{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "go_test.go",
  "prompt": "package max_sum_increasing_subseq_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nfunc max_sum_increasing_subseq(a []int, n int, index int, k int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMax_Sum_Increasing_Subseq(t *testing.T) {\n  candidate := max_sum_increasing_subseq\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 4, 6), expected: 11 },\n     { actual: candidate([]int{1, 101, 2, 3, 100, 4, 5}, 7, 2, 5), expected: 7 },\n     { actual: candidate([]int{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4), expected: 71 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index+1, k+1) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index >= n {\n        return 0\n    }\n\n    if k >= n {\n        return 0\n    }\n\n    if index == k {\n        return a[index]\n    }\n\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if index == k {\n        return a[k]\n    }\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[k] <= a[index] {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n    return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, index)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n",
    "    if index == 0 {\n        return a[index]\n    }\n    if k < index {\n        return 0\n    }\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] < a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index+1, k+1) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, index+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index, k+1))\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == 0 {\n        return a[0]\n    }\n    if k == 0 {\n        return 0\n    }\n    if k <= index {\n        return 0\n    }\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k) + a[k])\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, index+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] >= a[k] {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k),\n                   max_sum_increasing_subseq(a, n, index+1, k+1) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index >= n {\n        return 0\n    }\n\n    if k >= n {\n        return 0\n    }\n\n    if k <= index {\n        return 0\n    }\n\n    if a[index] >= a[k] {\n        return 0\n    }\n\n    return a[k] + max_sum_increasing_subseq(a, n, index, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if index == k {\n        return a[index]\n    }\n\n    if index > k {\n        return 0\n    }\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1),\n                   max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index+1, index+1) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if k < index {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, k, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1)+a[index])\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n",
    "    if index == 0 {\n        return a[0]\n    } else {\n        if k > index {\n            return a[index] + max_sum_increasing_subseq(a, n, index - 1, k)\n        } else {\n            return max_sum_increasing_subseq(a, n, index - 1, k)\n        }\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k + 1), a[k] + max_sum_increasing_subseq(a, n, k, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k < index {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n",
    "    if k >= n {\n        return 0\n    }\n    if index == 0 {\n        return a[k]\n    }\n    return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k + 1) + a[k])\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index > n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1) + a[index])\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index >= n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k + 1))\n}\n",
    "    if index == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n}\n",
    "    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index) + a[index])\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1) + a[k])\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    }\n    return max_sum_increasing_subseq(a, n, index, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, index), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] > a[index] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k+1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, index + 1))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, index + 1))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, index))\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, index), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if index > k {\n        return 0\n    }\n\n    if index == k {\n        return a[index]\n    }\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, index+1, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index >= n {\n        return 0\n    }\n    if k >= n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(a[k] + max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index, k+1))\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[k] > a[index] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    if index > k {\n        return 0\n    }\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index) + a[index])\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, index)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k) + a[k])\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if index == k {\n        return a[index]\n    }\n    return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] < a[k] {\n        return max(max_sum_increasing_subseq(a, n, index, k+1), a[index] + max_sum_increasing_subseq(a, n, k, k+1))\n    } else {\n        return max_sum_increasing_subseq(a, n, index, k+1)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] < a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), max_sum_increasing_subseq(a, n, index+1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n    }\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n    if k == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return a[index] + max_sum_increasing_subseq(a, n, index+1, k+1)\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n",
    "    if index == n {\n        return 0\n    }\n\n    if k == n {\n        return 0\n    }\n\n    if a[index] > a[k] {\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k))\n    } else {\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n    }\n}\n",
    "    if index == n {\n        return 0\n    }\n    if a[index] > a[k] {\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+1, index))\n    }\n    return max_sum_increasing_subseq(a, n, index+1, k)\n}\n"
  ]
}