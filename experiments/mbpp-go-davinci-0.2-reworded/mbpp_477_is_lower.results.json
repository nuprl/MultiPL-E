{
  "name": "mbpp_477_is_lower",
  "language": "go_test.go",
  "prompt": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py",
  "prompt_terminology": "reworded",
  "tests": "func TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lower string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lower += string(char + 32)\n        } else {\n            lower += string(char)\n        }\n    }\n    return lower\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, c := range myString {\n        if c >= 'A' && c <= 'Z' {\n            result += string(c + 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var myLowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            myLowerString += string(char + 32)\n        } else {\n            myLowerString += string(char)\n        }\n    }\n    return myLowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var myLowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            myLowerString += string(char + 32)\n        } else {\n            myLowerString += string(char)\n        }\n    }\n    return myLowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    // Convert the string to a rune slice.\n    myRuneSlice := []rune(myString)\n\n    // Loop through the rune slice.\n    for i := 0; i < len(myRuneSlice); i++ {\n        // If the rune is a capital letter.\n        if myRuneSlice[i] >= 'A' && myRuneSlice[i] <= 'Z' {\n            // Convert it to lower case.\n            myRuneSlice[i] += 32\n        }\n    }\n\n    // Return the lower case string.\n    return string(myRuneSlice)\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    // Convert the given string to lower case.\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpuh3krgmo_test.go:29: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpuh3krgmo_test.go:29: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpuh3krgmo_test.go:29: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lower string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lower += string(char + 32)\n        } else {\n            lower += string(char)\n        }\n    }\n    return lower\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    // Convert the string to a rune array.\n    myRune := []rune(myString)\n    // Loop through the rune array.\n    for i := 0; i < len(myRune); i++ {\n        // If the rune is uppercase, convert it to lowercase.\n        if myRune[i] >= 'A' && myRune[i] <= 'Z' {\n            myRune[i] = myRune[i] + 32\n        }\n    }\n    // Return the string.\n    return string(myRune)\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    // Convert the string to a rune slice.\n    runeSlice := []rune(myString)\n    // Iterate over the rune slice.\n    for i, r := range runeSlice {\n        // If the rune is a capital letter.\n        if r >= 'A' && r <= 'Z' {\n            // Convert the rune to lower case.\n            runeSlice[i] = r + 32\n        }\n    }\n    // Convert the rune slice to a string and return it.\n    return string(runeSlice)\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lower string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lower += string(char + 32)\n        } else {\n            lower += string(char)\n        }\n    }\n    return lower\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lower string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lower += string(char + 32)\n        } else {\n            lower += string(char)\n        }\n    }\n    return lower\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    // Convert the string to a rune slice.\n    myRuneSlice := []rune(myString)\n    // Iterate over the rune slice.\n    for i, r := range myRuneSlice {\n        // If the rune is uppercase, convert it to lowercase.\n        if r >= 'A' && r <= 'Z' {\n            myRuneSlice[i] = r + 32\n        }\n    }\n    // Return the converted string.\n    return string(myRuneSlice)\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerCase string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerCase += string(char + 32)\n        } else {\n            lowerCase += string(char)\n        }\n    }\n    return lowerCase\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for i := 0; i < len(myString); i++ {\n        if myString[i] >= 'A' && myString[i] <= 'Z' {\n            result += string(myString[i] + 32)\n        } else {\n            result += string(myString[i])\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    // Convert the string to a rune array.\n    myRune := []rune(myString)\n    // Iterate over the rune array.\n    for i := 0; i < len(myRune); i++ {\n        // If the rune is an upper case letter, convert it to lower case.\n        if myRune[i] >= 'A' && myRune[i] <= 'Z' {\n            myRune[i] = myRune[i] + 32\n        }\n    }\n    // Convert the rune array back to a string and return it.\n    return string(myRune)\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    myString = \"Hello\"\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpe0pls_6r_test.go:29: expected 'invalid', got 'Hello'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpe0pls_6r_test.go:29: expected 'true', got 'Hello'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpe0pls_6r_test.go:29: expected 'sentence', got 'Hello'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    return string(myString[0] + 32) + is_lower(myString[1:])\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpwj1ccc4m_test.go:31: expected 'invalid', got 'i\u008ev\u0081\u008c\u0089\u0084'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpwj1ccc4m_test.go:31: expected 'true', got 't\u0092\u0095e'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpwj1ccc4m_test.go:31: expected 'sentence', got 's\u0085\u008et\u0085\u008ece'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    // Convert the string to a rune slice.\n    myRuneSlice := []rune(myString)\n\n    // Iterate over the rune slice.\n    for i, v := range myRuneSlice {\n        // Check if the rune is uppercase.\n        if v >= 'A' && v <= 'Z' {\n            // Convert the rune to lowercase.\n            myRuneSlice[i] = v + 32\n        }\n    }\n\n    // Convert the rune slice to a string.\n    return string(myRuneSlice)\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerCaseString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerCaseString += string(char + 32)\n        } else {\n            lowerCaseString += string(char)\n        }\n    }\n    return lowerCaseString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerCaseString string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            lowerCaseString += string(char + 32)\n        } else {\n            lowerCaseString += string(char)\n        }\n    }\n    return lowerCaseString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lower string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lower += string(char + 32)\n        } else {\n            lower += string(char)\n        }\n    }\n    return lower\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string = \"\"\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lower string\n    for i := 0; i < len(myString); i++ {\n        if myString[i] >= 65 && myString[i] <= 90 {\n            lower += string(myString[i] + 32)\n        } else {\n            lower += string(myString[i])\n        }\n    }\n    return lower\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerCaseString string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            lowerCaseString += string(char + 32)\n        } else {\n            lowerCaseString += string(char)\n        }\n    }\n    return lowerCaseString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerCase string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerCase += string(char + 32)\n        } else {\n            lowerCase += string(char)\n        }\n    }\n    return lowerCase\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var myLowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            myLowerString += string(char + 32)\n        } else {\n            myLowerString += string(char)\n        }\n    }\n    return myLowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var myStringLower string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            myStringLower += string(char + 32)\n        } else {\n            myStringLower += string(char)\n        }\n    }\n    return myStringLower\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lower string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lower += string(char + 32)\n        } else {\n            lower += string(char)\n        }\n    }\n    return lower\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 65 && char <= 90 {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerString += string(char + 32)\n        } else {\n            lowerString += string(char)\n        }\n    }\n    return lowerString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var lowerCase string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            lowerCase += string(char + 32)\n        } else {\n            lowerCase += string(char)\n        }\n    }\n    return lowerCase\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char + 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    // Convert the string to a rune slice.\n    myRuneSlice := []rune(myString)\n\n    // Iterate over the rune slice.\n    for i, r := range myRuneSlice {\n        // If the rune is an upper case letter, convert it to lower case.\n        if r >= 'A' && r <= 'Z' {\n            myRuneSlice[i] = r + 32\n        }\n    }\n\n    // Convert the rune slice back to a string.\n    return string(myRuneSlice)\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123916,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    return myString\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "--- FAIL: TestIs_Lower (0.00s)\n    --- FAIL: TestIs_Lower/test_num__0 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'invalid', got 'InValid'\n    --- FAIL: TestIs_Lower/test_num__1 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'true', got 'TruE'\n    --- FAIL: TestIs_Lower/test_num__2 (0.00s)\n        tmpxqqeb8et_test.go:28: expected 'sentence', got 'SenTenCE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_lower_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert the given string to lower case.\nfunc is_lower(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char + 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Lower(t *testing.T) {\n  candidate := is_lower\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"InValid\"), expected: \"invalid\" },\n     { actual: candidate(\"TruE\"), expected: \"true\" },\n     { actual: candidate(\"SenTenCE\"), expected: \"sentence\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}