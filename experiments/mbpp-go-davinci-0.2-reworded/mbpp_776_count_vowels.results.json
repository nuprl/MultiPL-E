{
  "name": "mbpp_776_count_vowels",
  "language": "go_test.go",
  "prompt": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i, _ := range test_str {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpkzs2o09n_test.go:29:128: expected ']', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str) - 1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_coceynj_test.go:12:22: undefined: is_vowel\n/tmp/tmp_coceynj_test.go:14:45: undefined: is_vowel\n/tmp/tmp_coceynj_test.go:16:53: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if i == len(test_str) - 1 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp74ehlr6j_test.go:38: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp74ehlr6j_test.go:38: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp74ehlr6j_test.go:38: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp6b5irc50_test.go:51: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp6b5irc50_test.go:51: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmplrxjknn8_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if v == string(test_str[i+1]) {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if v == string(test_str[i-1]) {\n                    count++\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if v == string(test_str[i-1]) || v == string(test_str[i+1]) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpcerdziyr_test.go:51: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpcerdziyr_test.go:51: expected '%!s(int=12)', got '%!s(int=18)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpcerdziyr_test.go:51: expected '%!s(int=5)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var str_len int = len(test_str)\n    for i := 0; i < str_len; i++ {\n        var char string = string(test_str[i])\n        if i == 0 {\n            if string_in_slice(char, vowels) {\n                if string_in_slice(string(test_str[i+1]), vowels) {\n                    count++\n                }\n            }\n        } else if i == str_len - 1 {\n            if string_in_slice(char, vowels) {\n                if string_in_slice(string(test_str[i-1]), vowels) {\n                    count++\n                }\n            }\n        } else {\n            if string_in_slice(char, vowels) {\n                if string_in_slice(string(test_str[i-1]), vowels) || string_in_slice(string(test_str[i+1]), vowels) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpom810fka_test.go:16:16: undefined: string_in_slice\n/tmp/tmpom810fka_test.go:17:20: undefined: string_in_slice\n/tmp/tmpom810fka_test.go:22:16: undefined: string_in_slice\n/tmp/tmpom810fka_test.go:23:20: undefined: string_in_slice\n/tmp/tmpom810fka_test.go:28:16: undefined: string_in_slice\n/tmp/tmpom810fka_test.go:29:20: undefined: string_in_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i]) {\n            count++\n        } else if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc7qlz_9v_test.go:12:22: undefined: is_vowel\n/tmp/tmpc7qlz_9v_test.go:14:43: undefined: is_vowel\n/tmp/tmpc7qlz_9v_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if test_str[i+1:i+2] == v {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            for _, v := range vowels {\n                if test_str[i-1:i] == v {\n                    count++\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if test_str[i-1:i] == v || test_str[i+1:i+2] == v {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpomgj2b8e_test.go:51: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpomgj2b8e_test.go:51: expected '%!s(int=12)', got '%!s(int=18)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpomgj2b8e_test.go:51: expected '%!s(int=5)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str) - 1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_coceynj_test.go:12:22: undefined: is_vowel\n/tmp/tmp_coceynj_test.go:14:45: undefined: is_vowel\n/tmp/tmp_coceynj_test.go:16:53: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp6b5irc50_test.go:51: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp6b5irc50_test.go:51: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str)-1 {\n            if is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6rggsqm4_test.go:13:16: undefined: is_vowel\n/tmp/tmp6rggsqm4_test.go:17:16: undefined: is_vowel\n/tmp/tmp6rggsqm4_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var str_len int = len(test_str)\n    for i := 0; i < str_len; i++ {\n        var ch string = string(test_str[i])\n        if i == 0 {\n            if string_in_slice(string(test_str[i+1]), vowels) {\n                count++\n            }\n        } else if i == str_len - 1 {\n            if string_in_slice(string(test_str[i-1]), vowels) {\n                count++\n            }\n        } else {\n            if string_in_slice(string(test_str[i-1]), vowels) || string_in_slice(string(test_str[i+1]), vowels) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5a41x1xe_test.go:16:16: undefined: string_in_slice\n/tmp/tmp5a41x1xe_test.go:20:16: undefined: string_in_slice\n/tmp/tmp5a41x1xe_test.go:24:16: undefined: string_in_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n            if i == 0 {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            } else if i == len(test_str) - 1 {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            } else {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' ||\n                    test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp_ncr2ubt_test.go:47: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp_ncr2ubt_test.go:47: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp_ncr2ubt_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_byvqp9c_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        var char string = string(test_str[i])\n        if i == 0 {\n            if string(test_str[i+1]) == char {\n                count++\n            }\n            continue\n        }\n        if i == len(test_str) - 1 {\n            if string(test_str[i-1]) == char {\n                count++\n            }\n            continue\n        }\n        if string(test_str[i-1]) == char || string(test_str[i+1]) == char {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwaoisrvr_test.go:11:9: vowels declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var str_len = len(test_str)\n    for i := 0; i < str_len; i++ {\n        if i == 0 {\n            if vowels[string(test_str[i + 1])] {\n                count++\n            }\n        } else if i == str_len - 1 {\n            if vowels[string(test_str[i - 1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i - 1])] || vowels[string(test_str[i + 1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpby031ct9_test.go:52: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpby031ct9_test.go:52: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\":1, \"e\":1, \"i\":1, \"o\":1, \"u\":1}\n    for i := 0; i < len(test_str); i++ {\n        if _, ok := vowels[string(test_str[i])]; ok {\n            if i > 0 && i < len(test_str) - 1 {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            } else if i == 0 {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            } else if i == len(test_str) - 1 {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmps_dqxm62_test.go:50: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmps_dqxm62_test.go:50: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmps_dqxm62_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_npia65__test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' || test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdd0qf3ti_test.go:26:253: rune literal not terminated\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp_xjhvu4t_test.go:47: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp_xjhvu4t_test.go:47: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp_xjhvu4t_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmsujj0gz_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbzcypgmh_test.go:13:16: undefined: is_vowel\n/tmp/tmpbzcypgmh_test.go:17:16: undefined: is_vowel\n/tmp/tmpbzcypgmh_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool {\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && (vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpn8lwn7bf_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpn8lwn7bf_test.go:51: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpn8lwn7bf_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp645wspue_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str)-1 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i+1]) || is_vowel(test_str[i-1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm_7x02u9_test.go:13:16: undefined: is_vowel\n/tmp/tmpm_7x02u9_test.go:17:16: undefined: is_vowel\n/tmp/tmpm_7x02u9_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels map[string]bool = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && (vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpgr28leyl_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpgr28leyl_test.go:51: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpgr28leyl_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbcx6z6jt_test.go:12:22: undefined: is_vowel\n/tmp/tmpbcx6z6jt_test.go:14:43: undefined: is_vowel\n/tmp/tmpbcx6z6jt_test.go:16:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if i == len(test_str) - 1 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpp_wl82iy_test.go:38: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpp_wl82iy_test.go:38: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpp_wl82iy_test.go:38: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i + 1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i - 1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i + 1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i - 1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpx8uafafd_test.go:54: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpx8uafafd_test.go:54: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpx8uafafd_test.go:54: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var str_len int = len(test_str)\n    for i := 0; i < str_len; i++ {\n        var curr_char string = string(test_str[i])\n        if i == 0 {\n            if contains(vowels, string(test_str[i+1])) {\n                count++\n            }\n        } else if i == str_len-1 {\n            if contains(vowels, string(test_str[i-1])) {\n                count++\n            }\n        } else {\n            if contains(vowels, string(test_str[i-1])) || contains(vowels, string(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptjgoz4kn_test.go:16:16: undefined: contains\n/tmp/tmptjgoz4kn_test.go:20:16: undefined: contains\n/tmp/tmptjgoz4kn_test.go:24:16: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpg62jifju_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool {\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpyonhq7_8_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpyonhq7_8_test.go:51: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpyonhq7_8_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw1ub8f72_test.go:13:16: undefined: is_vowel\n/tmp/tmpw1ub8f72_test.go:17:16: undefined: is_vowel\n/tmp/tmpw1ub8f72_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if test_str[i+1:i+2] == v {\n                    count++\n                    break\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if test_str[i-1:i] == v {\n                    count++\n                    break\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if test_str[i-1:i] == v || test_str[i+1:i+2] == v {\n                    count++\n                    break\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpd2phz5in_test.go:54: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpd2phz5in_test.go:54: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str)-1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && (vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp2f4km5jd_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp2f4km5jd_test.go:51: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp2f4km5jd_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps0082z1s_test.go:12:22: undefined: is_vowel\n/tmp/tmps0082z1s_test.go:14:45: undefined: is_vowel\n/tmp/tmps0082z1s_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str) - 1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph0qpg1pv_test.go:12:22: undefined: is_vowel\n/tmp/tmph0qpg1pv_test.go:14:45: undefined: is_vowel\n/tmp/tmph0qpg1pv_test.go:16:53: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if contains(vowels, string(test_str[i+1])) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if contains(vowels, string(test_str[i-1])) {\n                count++\n            }\n        } else {\n            if contains(vowels, string(test_str[i-1])) || contains(vowels, string(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzpwwnsp8_test.go:14:16: undefined: contains\n/tmp/tmpzpwwnsp8_test.go:18:16: undefined: contains\n/tmp/tmpzpwwnsp8_test.go:22:16: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    var prev_char string = \"\"\n    var curr_char string = \"\"\n    var next_char string = \"\"\n    for i, char := range test_str {\n        curr_char = string(char)\n        if i > 0 {\n            prev_char = string(test_str[i-1])\n        }\n        if i < len(test_str) - 1 {\n            next_char = string(test_str[i+1])\n        }\n        if vowels[prev_char] || vowels[next_char] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpykpl54nm_test.go:13:9: curr_char declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == '\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123268,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzgftufb0_test.go:26:253: rune literal not terminated\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true}\n    for i, r := range test_str {\n        if i == 0 {\n            if vowels[rune(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[rune(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[rune(test_str[i-1])] || vowels[rune(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp0ga3gpe_test.go:12:12: r declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str) - 1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn593qeoe_test.go:12:22: undefined: is_vowel\n/tmp/tmpn593qeoe_test.go:14:45: undefined: is_vowel\n/tmp/tmpn593qeoe_test.go:16:53: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n            if i == 0 {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            } else if i == len(test_str) - 1 {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            } else {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' ||\n                    test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpx0_8llrr_test.go:47: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpx0_8llrr_test.go:47: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpx0_8llrr_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbcx6z6jt_test.go:12:22: undefined: is_vowel\n/tmp/tmpbcx6z6jt_test.go:14:43: undefined: is_vowel\n/tmp/tmpbcx6z6jt_test.go:16:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i+1]) == v {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i-1]) == v {\n                    count++\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && (string(test_str[i+1]) == v || string(test_str[i-1]) == v) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpg3vyzwwn_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpg3vyzwwn_test.go:51: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpg3vyzwwn_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i+1]) || is_vowel(test_str[i-1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj4p2v0fo_test.go:13:16: undefined: is_vowel\n/tmp/tmpj4p2v0fo_test.go:17:16: undefined: is_vowel\n/tmp/tmpj4p2v0fo_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj115qu75_test.go:12:22: undefined: is_vowel\n/tmp/tmpj115qu75_test.go:14:43: undefined: is_vowel\n/tmp/tmpj115qu75_test.go:16:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpan32lab7_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool {\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && (vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpn8lwn7bf_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpn8lwn7bf_test.go:51: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpn8lwn7bf_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\":1, \"e\":1, \"i\":1, \"o\":1, \"u\":1}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpe86sboea_test.go:54: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpe86sboea_test.go:54: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpe86sboea_test.go:54: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmplrxjknn8_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels_map map[string]bool = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels_map[string(test_str[i])] && vowels_map[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels_map[string(test_str[i])] && vowels_map[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels_map[string(test_str[i])] && vowels_map[string(test_str[i-1])] && vowels_map[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp__htk63d_test.go:53: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp__htk63d_test.go:53: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp__htk63d_test.go:53: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str)-1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && (vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpap96kaqd_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpap96kaqd_test.go:51: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpap96kaqd_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool {\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && (vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpn8lwn7bf_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpn8lwn7bf_test.go:51: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpn8lwn7bf_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if test_str[i] == v[0] || test_str[i+1] == v[0] {\n                    count++\n                    break\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if test_str[i-1] == v[0] || test_str[i] == v[0] {\n                    count++\n                    break\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if test_str[i-1] == v[0] || test_str[i] == v[0] || test_str[i+1] == v[0] {\n                    count++\n                    break\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpvxsua7x1_test.go:54: expected '%!s(int=7)', got '%!s(int=12)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpvxsua7x1_test.go:54: expected '%!s(int=12)', got '%!s(int=21)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpvxsua7x1_test.go:54: expected '%!s(int=5)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' {\n                    count++\n                }\n                if test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpq5zn26y1_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw1ub8f72_test.go:13:16: undefined: is_vowel\n/tmp/tmpw1ub8f72_test.go:17:16: undefined: is_vowel\n/tmp/tmpw1ub8f72_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if test_str[i+1:i+2] == v {\n                    count++\n                    break\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if test_str[i-1:i] == v {\n                    count++\n                    break\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if test_str[i-1:i] == v || test_str[i+1:i+2] == v {\n                    count++\n                    break\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpd2phz5in_test.go:54: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpd2phz5in_test.go:54: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true}\n    for i, c := range test_str {\n        if i == 0 {\n            if vowels[c] && vowels[rune(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[c] && vowels[rune(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[c] && vowels[rune(test_str[i-1])] && vowels[rune(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp14mym1m6_test.go:45: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp14mym1m6_test.go:45: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp14mym1m6_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i]) {\n            count++\n        } else if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwxibvfw1_test.go:12:22: undefined: is_vowel\n/tmp/tmpwxibvfw1_test.go:14:45: undefined: is_vowel\n/tmp/tmpwxibvfw1_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if (i == 0 && is_vowel(test_str[i+1])) || (i == len(test_str)-1 && is_vowel(test_str[i-1])) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpor2_iydj_test.go:12:23: undefined: is_vowel\n/tmp/tmpor2_iydj_test.go:14:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i]) {\n            count++\n        } else if i > 0 && i < len(test_str) - 1 && is_vowel(test_str[i]) && (is_vowel(test_str[i - 1]) || is_vowel(test_str[i + 1])) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3pe0ukmw_test.go:12:22: undefined: is_vowel\n/tmp/tmp3pe0ukmw_test.go:14:45: undefined: is_vowel\n/tmp/tmp3pe0ukmw_test.go:16:53: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpg62jifju_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp_nhb0swx_test.go:54: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp_nhb0swx_test.go:54: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp_nhb0swx_test.go:54: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpan32lab7_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6dw5wtw0_test.go:13:16: undefined: is_vowel\n/tmp/tmp6dw5wtw0_test.go:17:16: undefined: is_vowel\n/tmp/tmp6dw5wtw0_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    var prev_char string = \"\"\n    var curr_char string = \"\"\n    for _, char := range test_str {\n        curr_char = string(char)\n        if _, ok := vowels[curr_char]; ok {\n            if _, ok := vowels[prev_char]; ok {\n                count++\n            }\n        }\n        prev_char = curr_char\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpfq4zvjs1_test.go:41: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpfq4zvjs1_test.go:41: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpfq4zvjs1_test.go:41: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if string(test_str[i]) == \"a\" || string(test_str[i]) == \"e\" || string(test_str[i]) == \"i\" || string(test_str[i]) == \"o\" || string(test_str[i]) == \"u\" {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if string(test_str[i]) == \"a\" || string(test_str[i]) == \"e\" || string(test_str[i]) == \"i\" || string(test_str[i]) == \"o\" || string(test_str[i]) == \"u\" {\n                count++\n            }\n        } else {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && (string(test_str[i-1]) == \"a\" || string(test_str[i-1]) == \"e\" || string(test_str[i-1]) == \"i\" || string(test_str[i-1]) == \"o\" || string(test_str[i-1]) == \"u\") {\n                    count++\n                }\n                if string(test_str[i]) == v && (string(test_str[i+1]) == \"a\" || string(test_str[i+1]) == \"e\" || string(test_str[i+1]) == \"i\" || string(test_str[i+1]) == \"o\" || string(test_str[i+1]) == \"u\") {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123273,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpypbc3o5g_test.go:50: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpypbc3o5g_test.go:50: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpypbc3o5g_test.go:50: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true}\n    for i, c := range test_str {\n        if i > 0 && i < len(test_str) - 1 {\n            if vowels[c] && vowels[rune(test_str[i - 1])] && vowels[rune(test_str[i + 1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123273,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpe2w8l_y4_test.go:37: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpe2w8l_y4_test.go:37: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpe2w8l_y4_test.go:37: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\":true, \"e\":true, \"i\":true, \"o\":true, \"u\":true}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && vowels[string(test_str[i])] {\n            count++\n        } else if i == len(test_str)-1 && vowels[string(test_str[i])] {\n            count++\n        } else if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123273,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp03_ojmh9_test.go:39: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp03_ojmh9_test.go:39: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp03_ojmh9_test.go:39: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123272,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj6mfn95v_test.go:13:16: undefined: is_vowel\n/tmp/tmpj6mfn95v_test.go:17:16: undefined: is_vowel\n/tmp/tmpj6mfn95v_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123273,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpmccp8igt_test.go:54: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpmccp8igt_test.go:54: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpmccp8igt_test.go:54: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' || test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] ==\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpg1rrn51a_test.go:27:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123272,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj6mfn95v_test.go:13:16: undefined: is_vowel\n/tmp/tmpj6mfn95v_test.go:17:16: undefined: is_vowel\n/tmp/tmpj6mfn95v_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123272,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpn5ist3x8_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var test_str_runes = []rune(test_str)\n    var test_str_len = len(test_str_runes)\n\n    for i := 0; i < test_str_len; i++ {\n        var current_char = string(test_str_runes[i])\n        var next_char = \"\"\n        var prev_char = \"\"\n\n        if i < test_str_len - 1 {\n            next_char = string(test_str_runes[i + 1])\n        }\n\n        if i > 0 {\n            prev_char = string(test_str_runes[i - 1])\n        }\n\n        for _, v := range vowels {\n            if current_char == v {\n                continue\n            }\n\n            if next_char == v || prev_char == v {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpfz5c7bqp_test.go:57: expected '%!s(int=7)', got '%!s(int=8)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpfz5c7bqp_test.go:57: expected '%!s(int=12)', got '%!s(int=16)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpfz5c7bqp_test.go:57: expected '%!s(int=5)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmsujj0gz_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true}\n    for i, c := range test_str {\n        if i > 0 && i < len(test_str) - 1 {\n            if vowels[c] && (vowels[rune(test_str[i-1])] || vowels[rune(test_str[i+1])]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpb2d8nvq5_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpb2d8nvq5_test.go:37: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpb2d8nvq5_test.go:37: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var str_len int = len(test_str)\n    for i := 0; i < str_len; i++ {\n        if i == 0 {\n            if contains(vowels, string(test_str[i+1])) {\n                count++\n            }\n        } else if i == str_len - 1 {\n            if contains(vowels, string(test_str[i-1])) {\n                count++\n            }\n        } else {\n            if contains(vowels, string(test_str[i-1])) || contains(vowels, string(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj3lspwu3_test.go:15:16: undefined: contains\n/tmp/tmpj3lspwu3_test.go:19:16: undefined: contains\n/tmp/tmpj3lspwu3_test.go:23:16: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj115qu75_test.go:12:22: undefined: is_vowel\n/tmp/tmpj115qu75_test.go:14:43: undefined: is_vowel\n/tmp/tmpj115qu75_test.go:16:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_byvqp9c_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if (i == 0 && is_vowel(test_str[i+1])) || (i == len(test_str)-1 && is_vowel(test_str[i-1])) {\n            count++\n        } else if is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuzvqvlxa_test.go:12:23: undefined: is_vowel\n/tmp/tmpuzvqvlxa_test.go:14:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpqrhl1d3g_test.go:54: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpqrhl1d3g_test.go:54: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpqrhl1d3g_test.go:54: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_npia65__test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        for _, v := range vowels {\n            if i == 0 && test_str[i] == v[0] {\n                count++\n            } else if i == len(test_str) - 1 && test_str[i] == v[0] {\n                count++\n            } else if test_str[i] == v[0] && (test_str[i-1] == v[0] || test_str[i+1] == v[0]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmposskostv_test.go:41: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmposskostv_test.go:41: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmposskostv_test.go:41: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str)-1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && (vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpmsubna7n_test.go:45: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpmsubna7n_test.go:45: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpmsubna7n_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var str_len = len(test_str)\n\n    for i := 0; i < str_len; i++ {\n        if i == 0 {\n            if string_in_array(test_str[i:i+1], vowels) && string_in_array(test_str[i+1:i+2], vowels) {\n                count++\n            }\n        } else if i == str_len - 1 {\n            if string_in_array(test_str[i:i+1], vowels) && string_in_array(test_str[i-1:i], vowels) {\n                count++\n            }\n        } else {\n            if string_in_array(test_str[i:i+1], vowels) && (string_in_array(test_str[i+1:i+2], vowels) || string_in_array(test_str[i-1:i], vowels)) {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy__olg7c_test.go:16:16: undefined: string_in_array\n/tmp/tmpy__olg7c_test.go:20:16: undefined: string_in_array\n/tmp/tmpy__olg7c_test.go:24:16: undefined: string_in_array\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if i == len(test_str) - 1 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp74ehlr6j_test.go:38: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp74ehlr6j_test.go:38: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp74ehlr6j_test.go:38: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && vowels[string(test_str[i+1])] {\n            count++\n        } else if i == len(test_str) - 1 && vowels[string(test_str[i-1])] {\n            count++\n        } else if vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])] {\n            count++\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\npanic: runtime error: index out of range [14] with length 14 [recovered]\n\tpanic: runtime error: index out of range [14] with length 14\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364c0, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364c0, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_vowels(0x54741f, 0xe, 0x582803)\n\t/tmp/tmpixu7s1wy_test.go:24 +0x3c8\ncommand-line-arguments_test.TestCount_Vowels(0xc000102600)\n\t/tmp/tmpixu7s1wy_test.go:39 +0x53\ntesting.tRunner(0xc000102600, 0x54f4f8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) || i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i+1]) && is_vowel(test_str[i-1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9kf9tt7u_test.go:12:22: undefined: is_vowel\n/tmp/tmp9kf9tt7u_test.go:14:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i + 1]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i - 1]) {\n            count++\n        } else if is_vowel(test_str[i - 1]) && is_vowel(test_str[i + 1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwtdqgr97_test.go:12:22: undefined: is_vowel\n/tmp/tmpwtdqgr97_test.go:14:45: undefined: is_vowel\n/tmp/tmpwtdqgr97_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n            if i == 0 {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            } else if i == len(test_str) - 1 {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            } else {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpyadddx13_test.go:46: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpyadddx13_test.go:46: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpyadddx13_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy0vwmioq_test.go:12:22: undefined: is_vowel\n/tmp/tmpy0vwmioq_test.go:14:45: undefined: is_vowel\n/tmp/tmpy0vwmioq_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                count++\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbz0qva7y_test.go:11:9: vowels declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i+1]) || is_vowel(test_str[i-1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsir7qdnh_test.go:13:16: undefined: is_vowel\n/tmp/tmpsir7qdnh_test.go:17:16: undefined: is_vowel\n/tmp/tmpsir7qdnh_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbcx6z6jt_test.go:12:22: undefined: is_vowel\n/tmp/tmpbcx6z6jt_test.go:14:43: undefined: is_vowel\n/tmp/tmpbcx6z6jt_test.go:16:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i + 1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i - 1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && (vowels[string(test_str[i - 1])] || vowels[string(test_str[i + 1])]) {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpte60o2xi_test.go:53: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpte60o2xi_test.go:53: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpte60o2xi_test.go:53: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if v == string(test_str[i+1]) {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if v == string(test_str[i-1]) {\n                    count++\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if v == string(test_str[i-1]) || v == string(test_str[i+1]) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpcerdziyr_test.go:51: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpcerdziyr_test.go:51: expected '%!s(int=12)', got '%!s(int=18)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpcerdziyr_test.go:51: expected '%!s(int=5)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123272,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpn5ist3x8_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpan32lab7_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbzcypgmh_test.go:13:16: undefined: is_vowel\n/tmp/tmpbzcypgmh_test.go:17:16: undefined: is_vowel\n/tmp/tmpbzcypgmh_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123273,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpmccp8igt_test.go:54: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpmccp8igt_test.go:54: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpmccp8igt_test.go:54: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpliqz51ka_test.go:13:16: undefined: is_vowel\n/tmp/tmpliqz51ka_test.go:17:16: undefined: is_vowel\n/tmp/tmpliqz51ka_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i+1]) == v {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i-1]) == v {\n                    count++\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && (string(test_str[i-1]) == v || string(test_str[i+1]) == v) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123276,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmptigkdr3l_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmptigkdr3l_test.go:51: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmptigkdr3l_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        for _, v := range vowels {\n            if i == 0 && test_str[i] == v[0] {\n                count++\n            } else if i == len(test_str) - 1 && test_str[i] == v[0] {\n                count++\n            } else if test_str[i] == v[0] && (test_str[i - 1] == v[0] || test_str[i + 1] == v[0]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123276,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpkdlilqnu_test.go:41: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpkdlilqnu_test.go:41: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpkdlilqnu_test.go:41: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if contains(vowels, string(test_str[i+1])) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if contains(vowels, string(test_str[i-1])) {\n                count++\n            }\n        } else {\n            if contains(vowels, string(test_str[i-1])) || contains(vowels, string(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123276,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmie59810_test.go:14:16: undefined: contains\n/tmp/tmpmie59810_test.go:18:16: undefined: contains\n/tmp/tmpmie59810_test.go:22:16: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmplrxjknn8_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpan32lab7_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmplrxjknn8_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpg62jifju_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if test_str[i] == v[0] || test_str[i+1] == v[0] {\n                    count++\n                    break\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if test_str[i] == v[0] || test_str[i-1] == v[0] {\n                    count++\n                    break\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if test_str[i] == v[0] || test_str[i-1] == v[0] || test_str[i+1] == v[0] {\n                    count++\n                    break\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpuua13oq2_test.go:54: expected '%!s(int=7)', got '%!s(int=12)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpuua13oq2_test.go:54: expected '%!s(int=12)', got '%!s(int=21)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpuua13oq2_test.go:54: expected '%!s(int=5)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy0vwmioq_test.go:12:22: undefined: is_vowel\n/tmp/tmpy0vwmioq_test.go:14:45: undefined: is_vowel\n/tmp/tmpy0vwmioq_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    vowels := \"aeiou\"\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[test_str[i+1]] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[test_str[i-1]] {\n                count++\n            }\n        } else {\n            if vowels[test_str[i-1]] || vowels[test_str[i+1]] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123276,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp17xiowoq_test.go:14:13: non-bool vowels[test_str[i + 1]] (type byte) used as if condition\n/tmp/tmp17xiowoq_test.go:18:13: non-bool vowels[test_str[i - 1]] (type byte) used as if condition\n/tmp/tmp17xiowoq_test.go:22:38: invalid operation: vowels[test_str[i - 1]] || vowels[test_str[i + 1]] (operator || not defined on uint8)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str) - 1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_coceynj_test.go:12:22: undefined: is_vowel\n/tmp/tmp_coceynj_test.go:14:45: undefined: is_vowel\n/tmp/tmp_coceynj_test.go:16:53: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str)-1 {\n            if vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmprswo78lz_test.go:53: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmprswo78lz_test.go:53: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] ==\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123276,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9ic2dg9v_test.go:27:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i+1]) || is_vowel(test_str[i-1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsir7qdnh_test.go:13:16: undefined: is_vowel\n/tmp/tmpsir7qdnh_test.go:17:16: undefined: is_vowel\n/tmp/tmpsir7qdnh_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i+1]) || is_vowel(test_str[i-1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsrvpbbhq_test.go:13:16: undefined: is_vowel\n/tmp/tmpsrvpbbhq_test.go:17:16: undefined: is_vowel\n/tmp/tmpsrvpbbhq_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123272,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj6mfn95v_test.go:13:16: undefined: is_vowel\n/tmp/tmpj6mfn95v_test.go:17:16: undefined: is_vowel\n/tmp/tmpj6mfn95v_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw1ub8f72_test.go:13:16: undefined: is_vowel\n/tmp/tmpw1ub8f72_test.go:17:16: undefined: is_vowel\n/tmp/tmpw1ub8f72_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i != 0 && i != len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfy8uia0f_test.go:12:22: undefined: is_vowel\n/tmp/tmpfy8uia0f_test.go:14:43: undefined: is_vowel\n/tmp/tmpfy8uia0f_test.go:16:53: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    var prev_char string\n    for _, char := range test_str {\n        if vowels[prev_char] && vowels[string(char)] {\n            count++\n        }\n        prev_char = string(char)\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp3mte3h8z_test.go:37: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp3mte3h8z_test.go:37: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp3mte3h8z_test.go:37: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels map[string]int = map[string]int{\n        \"a\": 1,\n        \"e\": 1,\n        \"i\": 1,\n        \"o\": 1,\n        \"u\": 1,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpf5gka0p3_test.go:60: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpf5gka0p3_test.go:60: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpf5gka0p3_test.go:60: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmsujj0gz_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if string(test_str[i]) == \"a\" || string(test_str[i]) == \"e\" || string(test_str[i]) == \"i\" || string(test_str[i]) == \"o\" || string(test_str[i]) == \"u\" {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if string(test_str[i]) == \"a\" || string(test_str[i]) == \"e\" || string(test_str[i]) == \"i\" || string(test_str[i]) == \"o\" || string(test_str[i]) == \"u\" {\n                count++\n            }\n        } else {\n            if string(test_str[i]) == \"a\" || string(test_str[i]) == \"e\" || string(test_str[i]) == \"i\" || string(test_str[i]) == \"o\" || string(test_str[i]) == \"u\" {\n                if string(test_str[i-1]) == \"a\" || string(test_str[i-1]) == \"e\" || string(test_str[i-1]) == \"i\" || string(test_str[i-1]) == \"o\" || string(test_str[i-1]) == \"u\" {\n                    count++\n                }\n                if string(test_str[i+1]) == \"a\" || string(test_str[i+1]) == \"e\" || string(test_str[i+1]) == \"i\" || string(test_str[i+1]) == \"o\" || string(test_str[i+1]) == \"u\" {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptt1ze6hn_test.go:11:9: vowels declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpliqz51ka_test.go:13:16: undefined: is_vowel\n/tmp/tmpliqz51ka_test.go:17:16: undefined: is_vowel\n/tmp/tmpliqz51ka_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i, _ := range test_str {\n        if i == 0 {\n            if is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i+1]) || is_vowel(test_str[i-1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe9fredsf_test.go:13:16: undefined: is_vowel\n/tmp/tmpe9fredsf_test.go:17:16: undefined: is_vowel\n/tmp/tmpe9fredsf_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u' {\n                    count++\n                }\n                if test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpq5zn26y1_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpan32lab7_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmsujj0gz_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if test_str[i+1:i+2] == v {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if test_str[i-1:i] == v {\n                    count++\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if test_str[i-1:i] == v || test_str[i+1:i+2] == v {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpp8y2xfi5_test.go:51: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpp8y2xfi5_test.go:51: expected '%!s(int=12)', got '%!s(int=18)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpp8y2xfi5_test.go:51: expected '%!s(int=5)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if vowels[string(test_str[i])] {\n            if i > 0 && vowels[string(test_str[i-1])] {\n                count++\n            }\n            if i < len(test_str)-1 && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp4xu3qnbi_test.go:46: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp4xu3qnbi_test.go:46: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp4xu3qnbi_test.go:46: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i+1]) || is_vowel(test_str[i-1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsrvpbbhq_test.go:13:16: undefined: is_vowel\n/tmp/tmpsrvpbbhq_test.go:17:16: undefined: is_vowel\n/tmp/tmpsrvpbbhq_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyze93mtf_test.go:12:22: undefined: is_vowel\n/tmp/tmpyze93mtf_test.go:14:43: undefined: is_vowel\n/tmp/tmpyze93mtf_test.go:16:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        for _, v := range vowels {\n            if i == 0 {\n                if test_str[i] == v[0] || test_str[i+1] == v[0] {\n                    count++\n                }\n            } else if i == len(test_str) - 1 {\n                if test_str[i] == v[0] || test_str[i-1] == v[0] {\n                    count++\n                }\n            } else {\n                if test_str[i] == v[0] || test_str[i-1] == v[0] || test_str[i+1] == v[0] {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpbozga6py_test.go:47: expected '%!s(int=7)', got '%!s(int=13)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpbozga6py_test.go:47: expected '%!s(int=12)', got '%!s(int=25)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpbozga6py_test.go:47: expected '%!s(int=5)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_npia65__test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp_xjhvu4t_test.go:47: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp_xjhvu4t_test.go:47: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp_xjhvu4t_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9z5c3icp_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpu4q17qbd_test.go:54: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpu4q17qbd_test.go:54: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpu4q17qbd_test.go:54: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw1ub8f72_test.go:13:16: undefined: is_vowel\n/tmp/tmpw1ub8f72_test.go:17:16: undefined: is_vowel\n/tmp/tmpw1ub8f72_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpan32lab7_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v {\n                    if string(test_str[i+1]) == v {\n                        count++\n                    }\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v {\n                    if string(test_str[i-1]) == v {\n                        count++\n                    }\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if string(test_str[i]) == v {\n                    if string(test_str[i-1]) == v || string(test_str[i+1]) == v {\n                        count++\n                    }\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpzl7a5yfn_test.go:57: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpzl7a5yfn_test.go:57: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpzl7a5yfn_test.go:57: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n            if i == 0 {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            } else if i == len(test_str) - 1 {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            } else {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' ||\n                    test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp_ncr2ubt_test.go:47: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp_ncr2ubt_test.go:47: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp_ncr2ubt_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpg62jifju_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i]) {\n            count++\n        } else if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjrl399cu_test.go:12:22: undefined: is_vowel\n/tmp/tmpjrl399cu_test.go:14:45: undefined: is_vowel\n/tmp/tmpjrl399cu_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n\n    for i := 0; i < len(test_str); i++ {\n        var curr_char string = string(test_str[i])\n        var prev_char string = \"\"\n        var next_char string = \"\"\n\n        if i > 0 {\n            prev_char = string(test_str[i-1])\n        }\n\n        if i < len(test_str) - 1 {\n            next_char = string(test_str[i+1])\n        }\n\n        if vowels[curr_char] || vowels[prev_char] || vowels[next_char] {\n            count++\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmptmo_yefh_test.go:55: expected '%!s(int=7)', got '%!s(int=12)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmptmo_yefh_test.go:55: expected '%!s(int=12)', got '%!s(int=21)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmptmo_yefh_test.go:55: expected '%!s(int=5)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var str_len int = len(test_str)\n    for i := 0; i < str_len; i++ {\n        var char string = string(test_str[i])\n        if i == 0 {\n            if string_in_slice(char, vowels) && string_in_slice(string(test_str[i + 1]), vowels) {\n                count++\n            }\n        } else if i == str_len - 1 {\n            if string_in_slice(char, vowels) && string_in_slice(string(test_str[i - 1]), vowels) {\n                count++\n            }\n        } else {\n            if string_in_slice(char, vowels) && string_in_slice(string(test_str[i - 1]), vowels) && string_in_slice(string(test_str[i + 1]), vowels) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpssuuvbrp_test.go:16:16: undefined: string_in_slice\n/tmp/tmpssuuvbrp_test.go:20:16: undefined: string_in_slice\n/tmp/tmpssuuvbrp_test.go:24:16: undefined: string_in_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpg62jifju_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels string = \"aeiou\"\n    var prev_char rune = ' '\n    var curr_char rune = ' '\n    var next_char rune = ' '\n\n    for i, c := range test_str {\n        if i == 0 {\n            prev_char = ' '\n        } else {\n            prev_char = rune(test_str[i - 1])\n        }\n\n        curr_char = c\n        if i == len(test_str) - 1 {\n            next_char = ' '\n        } else {\n            next_char = rune(test_str[i + 1])\n        }\n\n        if strings.Contains(vowels, string(curr_char)) && (strings.Contains(vowels, string(prev_char)) || strings.Contains(vowels, string(next_char))) {\n            count++\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8giu2z5r_test.go:30:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq10qnxiz_test.go:12:22: undefined: is_vowel\n/tmp/tmpq10qnxiz_test.go:14:43: undefined: is_vowel\n/tmp/tmpq10qnxiz_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str) - 1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn593qeoe_test.go:12:22: undefined: is_vowel\n/tmp/tmpn593qeoe_test.go:14:45: undefined: is_vowel\n/tmp/tmpn593qeoe_test.go:16:53: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if is_vowel(test_str[i+1]) && is_vowel(test_str[i-1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmxjya0ds_test.go:12:22: undefined: is_vowel\n/tmp/tmpmxjya0ds_test.go:14:43: undefined: is_vowel\n/tmp/tmpmxjya0ds_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpliqz51ka_test.go:13:16: undefined: is_vowel\n/tmp/tmpliqz51ka_test.go:17:16: undefined: is_vowel\n/tmp/tmpliqz51ka_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmplrxjknn8_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_npia65__test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyze93mtf_test.go:12:22: undefined: is_vowel\n/tmp/tmpyze93mtf_test.go:14:43: undefined: is_vowel\n/tmp/tmpyze93mtf_test.go:16:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}