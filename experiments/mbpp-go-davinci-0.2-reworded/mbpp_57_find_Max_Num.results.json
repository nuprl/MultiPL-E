{
  "name": "mbpp_57_find_Max_Num",
  "language": "go_test.go",
  "prompt": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmp3afa78hw_test.go:40: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmp3afa78hw_test.go:40: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmp3afa78hw_test.go:40: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    // convert the array to a string\n    var str string\n    for i := 0; i < len(arr); i++ {\n        str += fmt.Sprintf(\"%d\", arr[i])\n    }\n    // convert the string to an int\n    num, _ := strconv.Atoi(str)\n    return num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpusjh9aq4_test.go:24:15: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i:=0; i<len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpz_dlotb__test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpz_dlotb__test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpz_dlotb__test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i+1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max*10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if max < arr[i] {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // find the max number\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    // find the max number's index\n    max_index := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == max {\n            max_index = i\n        }\n    }\n\n    // find the max number's index\n    min_index := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] < max {\n            min_index = i\n        }\n    }\n\n    // swap the max number and the min number\n    arr[max_index], arr[min_index] = arr[min_index], arr[max_index]\n\n    // find the max number\n    max = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max_num := 0\n    for _, v := range arr {\n        if v > max_num {\n            max_num = v\n        }\n    }\n    return max_num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max_num int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max_num = max_num * 10 + arr[i]\n    }\n    return max_num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int = 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // The idea is to sort the array in descending order and then concatenate the array elements to form the largest number.\n    // The sorting can be done using a custom comparator.\n    // The comparator function compares two numbers X and Y and returns 1 if X > Y, -1 if X < Y and 0 if X == Y.\n    // The comparator function is implemented in a way that it returns 1 if XY > YX and -1 if XY < YX.\n    // This is done by first converting the numbers to string and then comparing the strings.\n    // For example, let X = 542 and Y = 60. To compare X and Y, we compare 54260 and 60542. Since 60542 is greater than 54260, we put Y first.\n    // The comparator function is passed to the sort function.\n    // The sort function sorts the array in descending order.\n    // Finally, the array elements are concatenated to form the largest number.\n    // Time complexity: O(nlogn)\n    // Space complexity: O(n)\n    // where n is the number of digits.\n\n    // sort the array in descending order\n    sort(arr, func(a, b int) int {\n        // convert the numbers to string\n        str_a := fmt.Sprintf(\"%d\", a)\n        str_b := fmt.Sprintf(\"%d\", b)\n\n        // compare the strings\n        if str_a + str_b > str_b + str_a {\n            return 1\n        } else if str_a + str_b < str_b + str_a {\n            return -1\n        } else {\n            return 0\n        }\n    })\n\n    // concatenate the array elements to form the largest number\n    var max_num int\n    for i := 0; i < len(arr); i++ {\n        max_num = max_num * 10 + arr[i]\n    }\n\n    return max_num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var maxNum int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        maxNum = maxNum * 10 + arr[i]\n    }\n    return maxNum\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max_num int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max_num {\n            max_num = arr[i]\n        }\n    }\n    return max_num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for _, v := range arr {\n        max = max * 10 + v\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // Sort the array\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    // Convert the array to a number\n    var num int\n    for i := 0; i < len(arr); i++ {\n        num = num * 10 + arr[i]\n    }\n    return num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // Write your code here\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var result int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        result = result * 10 + arr[i]\n    }\n    return result\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := 0; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int = 0\n    var max_num int = 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    for _, v := range arr {\n        if v == max {\n            max_num = max_num * 10 + v\n        }\n    }\n    return max_num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // find the largest number that can be formed with the given list of digits.\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max_num int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max_num = max_num * 10 + arr[i]\n    }\n    return max_num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max_num int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max_num {\n            max_num = arr[i]\n        }\n    }\n    return max_num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max*10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    var max_str string\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    max_str = fmt.Sprintf(\"%d\", max)\n    for _, v := range arr {\n        if v != max {\n            max_str = fmt.Sprintf(\"%s%d\", max_str, v)\n        }\n    }\n    fmt.Println(max_str)\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int = 0\n    var temp int = 0\n    var i int = 0\n    var j int = 0\n    var k int = 0\n    var len_arr int = len(arr)\n    for i = 0; i < len_arr; i++ {\n        for j = i + 1; j < len_arr; j++ {\n            if arr[i] < arr[j] {\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n    for k = 0; k < len_arr; k++ {\n        max = max * 10 + arr[k]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if max < arr[i] {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // Write your code here\n    var max int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // First, sort the array in descending order\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    // Then, convert the array to a string\n    var str string\n    for _, v := range arr {\n        str += fmt.Sprintf(\"%d\", v)\n    }\n    // Finally, convert the string to an integer\n    num, _ := strconv.Atoi(str)\n    return num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpipa5j77v_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpi4q2sia3_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpt6_qzdt__test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    var max_num int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max_num = max_num * 10 + arr[i]\n    }\n    return max_num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122498,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    max := 0\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509951,
      "stdout": "--- FAIL: TestFind_Max_Num (0.00s)\n    --- FAIL: TestFind_Max_Num/test_num__0 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=321)', got '%!s(int=3)'\n    --- FAIL: TestFind_Max_Num/test_num__1 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=6541)', got '%!s(int=6)'\n    --- FAIL: TestFind_Max_Num/test_num__2 (0.00s)\n        tmpuqiftp1s_test.go:34: expected '%!s(int=9321)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n    // Sort the array in descending order\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Convert the array to a number\n    var num int\n    for i := 0; i < len(arr); i++ {\n        num = num * 10 + arr[i]\n    }\n\n    return num\n}\n\nfunc TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122528,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    }
  ]
}