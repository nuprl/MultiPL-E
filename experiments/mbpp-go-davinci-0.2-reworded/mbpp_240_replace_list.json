{
  "name": "mbpp_240_replace_list",
  "language": "go_test.go",
  "prompt": "package replace_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nfunc replace_list(list1 interface{}, list2 interface{}) interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py",
  "prompt_terminology": "reworded",
  "tests": "func TestReplace_List(t *testing.T) {\n  candidate := replace_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 2, 4, 6, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{5, 6, 7, 8}), expected: []int{1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]string{\"red\", \"blue\", \"green\"}, []string{\"yellow\"}), expected: []string{\"red\", \"blue\", \"yellow\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            l1 := list1.([]int)\n            l2 := list2.([]int)\n            l1[len(l1)-1] = l2[0]\n            return l1\n        case []string:\n            l1 := list1.([]int)\n            l2 := list2.([]string)\n            l1[len(l1)-1] = len(l2)\n            return l1\n        default:\n            return list1\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            l1 := list1.([]string)\n            l2 := list2.([]int)\n            l1[len(l1)-1] = fmt.Sprintf(\"%d\", l2[0])\n            return l1\n        case []string:\n            l1 := list1.([]string)\n            l2 := list2.([]string)\n            l1[len(l1)-1] = l2[0]\n            return l1\n        default:\n            return list1\n        }\n    default:\n        return list1\n    }\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            switch list2.(type) {\n                case []int:\n                    list1_int := list1.([]int)\n                    list2_int := list2.([]int)\n                    list1_int[len(list1_int)-1] = list2_int[0]\n                    return list1_int\n                default:\n                    return nil\n            }\n        case []string:\n            switch list2.(type) {\n                case []string:\n                    list1_string := list1.([]string)\n                    list2_string := list2.([]string)\n                    list1_string[len(list1_string)-1] = list2_string[0]\n                    return list1_string\n                default:\n                    return nil\n            }\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            switch list2.(type) {\n                case []int:\n                    list1_arr := list1.([]int)\n                    list2_arr := list2.([]int)\n                    list1_arr[len(list1_arr)-1] = list2_arr[0]\n                    return list1_arr\n                default:\n                    return nil\n            }\n        case []string:\n            switch list2.(type) {\n                case []string:\n                    list1_arr := list1.([]string)\n                    list2_arr := list2.([]string)\n                    list1_arr[len(list1_arr)-1] = list2_arr[0]\n                    return list1_arr\n                default:\n                    return nil\n            }\n        default:\n            return nil\n    }\n}\n",
    "    return list1\n}\n",
    "    // TODO: implement this function\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // TODO: Implement me!\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        default:\n            return list1\n        }\n    case []string:\n        switch list2.(type) {\n        case []string:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        default:\n            return list1\n        }\n    default:\n        return list1\n    }\n}\n",
    "    return list1\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1 = list1.([]int)\n        list1[len(list1)-1] = list2.([]int)[0]\n        return list1\n    case []string:\n        list1 = list1.([]string)\n        list1[len(list1)-1] = list2.([]string)[0]\n        return list1\n    case []float64:\n        list1 = list1.([]float64)\n        list1[len(list1)-1] = list2.([]float64)[0]\n        return list1\n    default:\n        return nil\n    }\n}\n",
    "    return nil\n}\n",
    "    return list1\n}\n",
    "    // TODO: implement\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1 = list1.([]int)\n        list2 = list2.([]int)\n        list1 = append(list1[:len(list1)-1], list2...)\n    case []string:\n        list1 = list1.([]string)\n        list2 = list2.([]string)\n        list1 = append(list1[:len(list1)-1], list2...)\n    }\n    return list1\n}\n",
    "    // TODO: Implement me!\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        default:\n            return list1\n        }\n    default:\n        return list1\n    }\n}\n"
  ]
}