{
  "name": "mbpp_120_max_product_tuple",
  "language": "go_test.go",
  "prompt": "package max_product_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\nfunc max_product_tuple(list1 [][]interface{}) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMax_Product_Tuple(t *testing.T) {\n  candidate := max_product_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 7}, []interface{}{2, 6}, []interface{}{1, 8}, []interface{}{4, 9}}), expected: 36 },\n     { actual: candidate([][]int{[]interface{}{10, 20}, []interface{}{15, 2}, []interface{}{5, 10}}), expected: 200 },\n     { actual: candidate([][]int{[]interface{}{11, 44}, []interface{}{10, 15}, []interface{}{20, 5}, []interface{}{12, 9}}), expected: 484 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    max := 0\n    for _, list := range list1 {\n        for i, val1 := range list {\n            for j, val2 := range list {\n                if i != j {\n                    product := val1.(int) * val2.(int)\n                    if product > max {\n                        max = product\n                    }\n                }\n            }\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, tuple := range list1 {\n        product := 1\n        for _, value := range tuple {\n            product *= value.(int)\n        }\n        if product > max {\n            max = product\n        }\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1); k++ {\n                for l := 0; l < len(list1[k]); l++ {\n                    if i != k && j != l {\n                        product := list1[i][j].(int) * list1[k][l].(int)\n                        if product > max {\n                            max = product\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1); k++ {\n                for l := 0; l < len(list1[k]); l++ {\n                    if i != k && j != l {\n                        product := list1[i][j].(int) * list1[k][l].(int)\n                        if product > max {\n                            max = product\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return max\n}\n",
    "    var max_product int\n    for _, list := range list1 {\n        for i, num := range list {\n            for j, num2 := range list {\n                if i != j {\n                    product := num.(int) * num2.(int)\n                    if product > max_product {\n                        max_product = product\n                    }\n                }\n            }\n        }\n    }\n    return max_product\n}\n",
    "    max := 0\n    for _, tuple := range list1 {\n        product := 1\n        for _, num := range tuple {\n            product *= num.(int)\n        }\n        if product > max {\n            max = product\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, tuple := range list1 {\n        product := tuple[0].(int) * tuple[1].(int)\n        if product > max {\n            max = product\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, tuple := range list1 {\n        if len(tuple) != 2 {\n            continue\n        }\n        product := tuple[0].(int) * tuple[1].(int)\n        if product > max {\n            max = product\n        }\n    }\n    return max\n}\n",
    "    max_product := 0\n    for _, list := range list1 {\n        for i, num := range list {\n            for j, num2 := range list {\n                if i != j {\n                    product := num.(int) * num2.(int)\n                    if product > max_product {\n                        max_product = product\n                    }\n                }\n            }\n        }\n    }\n    return max_product\n}\n",
    "    max := 0\n    for _, list := range list1 {\n        for i, num1 := range list {\n            for _, num2 := range list[i+1:] {\n                product := num1.(int) * num2.(int)\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1); k++ {\n                for l := 0; l < len(list1[k]); l++ {\n                    if i != k && j != l {\n                        if list1[i][j].(int) * list1[k][l].(int) > max {\n                            max = list1[i][j].(int) * list1[k][l].(int)\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, tuple := range list1 {\n        if len(tuple) != 2 {\n            continue\n        }\n        product := tuple[0].(int) * tuple[1].(int)\n        if product > max {\n            max = product\n        }\n    }\n    return max\n}\n",
    "    var max int = 0\n    for _, list := range list1 {\n        for i, num1 := range list {\n            for j, num2 := range list {\n                if i != j {\n                    product := num1.(int) * num2.(int)\n                    if product > max {\n                        max = product\n                    }\n                }\n            }\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1); k++ {\n                for l := 0; l < len(list1[k]); l++ {\n                    if i != k && j != l {\n                        product := list1[i][j].(int) * list1[k][l].(int)\n                        if product > max {\n                            max = product\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return max\n}\n",
    "    var max int = 0\n    for _, list2 := range list1 {\n        for _, list3 := range list2 {\n            if list3.(int) > max {\n                max = list3.(int)\n            }\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, list := range list1 {\n        for i, num1 := range list {\n            for j, num2 := range list {\n                if i != j {\n                    product := num1.(int) * num2.(int)\n                    if product > max {\n                        max = product\n                    }\n                }\n            }\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, list2 := range list1 {\n        for _, list3 := range list2 {\n            if list3.(int) > max {\n                max = list3.(int)\n            }\n        }\n    }\n    return max\n}\n",
    "    var max int\n    for _, list2 := range list1 {\n        for _, list3 := range list2 {\n            if list3.(int) > max {\n                max = list3.(int)\n            }\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, tuple := range list1 {\n        product := 1\n        for _, value := range tuple {\n            product *= value.(int)\n        }\n        if product > max {\n            max = product\n        }\n    }\n    return max\n}\n",
    "    max := 0\n    for _, l1 := range list1 {\n        for _, l2 := range list1 {\n            if l1 != l2 {\n                for _, i1 := range l1 {\n                    for _, i2 := range l2 {\n                        if i1 != i2 {\n                            if i1.(int) * i2.(int) > max {\n                                max = i1.(int) * i2.(int)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return max\n}\n"
  ]
}