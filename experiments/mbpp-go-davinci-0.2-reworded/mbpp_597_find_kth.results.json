{
  "name": "mbpp_597_find_kth",
  "language": "go_test.go",
  "prompt": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) == 1 && len(arr2) == 1 {\n        return arr1[0]\n    }\n    if len(arr1) == 1 {\n        if k == 1 {\n            return arr1[0]\n        } else {\n            return arr2[k-1]\n        }\n    }\n    if len(arr2) == 1 {\n        if k == 1 {\n            return arr2[0]\n        } else {\n            return arr1[k-1]\n        }\n    }\n    var i int\n    if len(arr1) < len(arr2) {\n        i = len(arr1) / 2\n    } else {\n        i = len(arr2) / 2\n    }\n    if k <= i {\n        return find_kth(arr1[:i], arr2[:i], k)\n    } else {\n        if arr1[i] < arr2[i] {\n            return find_kth(arr1[i:], arr2, k-i)\n        } else {\n            return find_kth(arr1, arr2[i:], k-i)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmpqvfsz4in_test.go:72: expected '%!s(int=6)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) > len(arr2) {\n        arr1, arr2 = arr2, arr1\n    }\n    if len(arr1) > k/2 {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    } else {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpfqg45ybh_test.go:9 +0x290 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a890\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpfqg45ybh_test.go:30 +0x1d2 fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a7d2\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpfqg45ybh_test.go:30 +0x1d2 fp=0xc020160448 sp=0xc0201603f8 pc=0x50a7d2\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpfqg45ybh_test.go:30 +0x1d2 fp=0xc020160498 sp=0xc020160448 pc=0x50a7d2\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpfqg45ybh_test.go:30 +0x1d2 fp=0xc0201604e8 sp=0xc020160498 pc=0x50a7d2\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpfqg45ybh_test.go:30 +0x1d2 fp=0xc020160538 sp=0xc0201604e8 pc=0x50a7d2\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpfqg45ybh_test.go:30 +0x1d2 fp=0xc020160588 sp=0xc020160538 pc=0x50a7d2\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpfqg45ybh_test.go:30 +0x1d2 fp=0xc0201605d8 sp=0xc020160588 pc=0x50a7d2\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpfqg45ybh_test.go:30 +0x1d2 fp=0xc020160628 sp=0xc0201605d8 pc=0x50a7d2\ncommand-li",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return find_kth(arr1[1:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[1:], 0)\n        }\n    }\n    if len(arr1) == 1 {\n        if arr1[0] < arr2[k-1] {\n            return arr2[k-1]\n        } else {\n            return arr2[k]\n        }\n    }\n    if len(arr2) == 1 {\n        if arr2[0] < arr1[k-1] {\n            return arr1[k-1]\n        } else {\n            return arr1[k]\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp2i3fsp3v_test.go:66: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp2i3fsp3v_test.go:66: expected '%!s(int=256)', got '%!s(int=265)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp2i3fsp3v_test.go:66: expected '%!s(int=8)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_kth(0xc000080648, 0x3, 0x3, 0xc000080608, 0x2, 0x2, 0x1, 0x3b)\n\t/tmp/tmpqjg5i_6i_test.go:37 +0x37c\ncommand-line-arguments_test.find_kth(0xc000080648, 0x3, 0x3, 0xc000080600, 0x3, 0x3, 0x2, 0x0)\n\t/tmp/tmpqjg5i_6i_test.go:40 +0x352\ncommand-line-arguments_test.find_kth(0xc000080648, 0x3, 0x3, 0xc0000805f8, 0x4, 0x4, 0x3, 0xd0)\n\t/tmp/tmpqjg5i_6i_test.go:40 +0x352\ncommand-line-arguments_test.find_kth(0xc000080638, 0x5, 0x5, 0xc0000805f8, 0x4, 0x4, 0x5, 0x5fa120)\n\t/tmp/tmpqjg5i_6i_test.go:38 +0x2e5\ncommand-line-arguments_test.TestFind_Kth(0xc000102600)\n\t/tmp/tmpqjg5i_6i_test.go:51 +0x10e\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return arr2[len(arr2)-1]\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo4bpr5o4_test.go:9 +0x2c5 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a8c5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo4bpr5o4_test.go:40 +0x275 fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a875\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo4bpr5o4_test.go:40 +0x275 fp=0xc020160448 sp=0xc0201603f8 pc=0x50a875\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo4bpr5o4_test.go:40 +0x275 fp=0xc020160498 sp=0xc020160448 pc=0x50a875\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo4bpr5o4_test.go:40 +0x275 fp=0xc0201604e8 sp=0xc020160498 pc=0x50a875\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo4bpr5o4_test.go:40 +0x275 fp=0xc020160538 sp=0xc0201604e8 pc=0x50a875\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo4bpr5o4_test.go:40 +0x275 fp=0xc020160588 sp=0xc020160538 pc=0x50a875\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo4bpr5o4_test.go:40 +0x275 fp=0xc0201605d8 sp=0xc020160588 pc=0x50a875\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo4bpr5o4_test.go:40 +0x275 fp=0xc020160628 sp=0xc0201605d8 pc=0x50a875\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return find_kth(arr1[1:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[1:], 0)\n        }\n    }\n    if k == 2 {\n        if arr1[1] < arr2[1] {\n            return find_kth(arr1[2:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[2:], 0)\n        }\n    }\n    if k == 3 {\n        if arr1[2] < arr2[2] {\n            return find_kth(arr1[3:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[3:], 0)\n        }\n    }\n    if k == 4 {\n        if arr1[3] < arr2[3] {\n            return find_kth(arr1[4:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[4:], 0)\n        }\n    }\n    if k == 5 {\n        if arr1[4] < arr2[4] {\n            return find_kth(arr1[5:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[5:], 0)\n        }\n    }\n    if k == 6 {\n        if arr1[5] < arr2[5] {\n            return find_kth(arr1[6:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[6:], 0\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5ygcex85_test.go:62:46: missing ',' before newline in argument list\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid int\n    if len(arr1) < k/2 {\n        mid = len(arr1)\n    } else {\n        mid = k/2\n    }\n    if arr1[mid-1] < arr2[mid-1] {\n        return find_kth(arr1[mid:], arr2, k-mid)\n    } else {\n        return find_kth(arr1, arr2[mid:], k-mid)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) > len(arr2) {\n        return find_kth(arr2, arr1, k)\n    }\n    if len(arr1) > k/2 {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    } else {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510566,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpwp9ufki6_test.go:9 +0x2bc fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a8bc\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpwp9ufki6_test.go:30 +0x1e5 fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpwp9ufki6_test.go:30 +0x1e5 fp=0xc020160448 sp=0xc0201603f8 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpwp9ufki6_test.go:30 +0x1e5 fp=0xc020160498 sp=0xc020160448 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpwp9ufki6_test.go:30 +0x1e5 fp=0xc0201604e8 sp=0xc020160498 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpwp9ufki6_test.go:30 +0x1e5 fp=0xc020160538 sp=0xc0201604e8 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpwp9ufki6_test.go:30 +0x1e5 fp=0xc020160588 sp=0xc020160538 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpwp9ufki6_test.go:30 +0x1e5 fp=0xc0201605d8 sp=0xc020160588 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpwp9ufki6_test.go:30 +0x1e5 fp=0xc020160628 sp=0xc0201605d8 pc=0x50a7e5\ncommand-li",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return find_kth(arr1[1:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[1:], 0)\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k/2)\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp96176f_l_test.go:58: expected '%!s(int=256)', got '%!s(int=119)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) > len(arr2) {\n        arr1, arr2 = arr2, arr1\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    } else {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpxklwk4bu_test.go:9 +0x2d7 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a8d7\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpxklwk4bu_test.go:36 +0x272 fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a872\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpxklwk4bu_test.go:36 +0x272 fp=0xc020160448 sp=0xc0201603f8 pc=0x50a872\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpxklwk4bu_test.go:36 +0x272 fp=0xc020160498 sp=0xc020160448 pc=0x50a872\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpxklwk4bu_test.go:36 +0x272 fp=0xc0201604e8 sp=0xc020160498 pc=0x50a872\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpxklwk4bu_test.go:36 +0x272 fp=0xc020160538 sp=0xc0201604e8 pc=0x50a872\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpxklwk4bu_test.go:36 +0x272 fp=0xc020160588 sp=0xc020160538 pc=0x50a872\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpxklwk4bu_test.go:36 +0x272 fp=0xc0201605d8 sp=0xc020160588 pc=0x50a872\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpxklwk4bu_test.go:36 +0x272 fp=0xc020160628 sp=0xc0201605d8 pc=0x50a872\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) > len(arr2) {\n        return find_kth(arr2, arr1, k)\n    }\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if k == 1 {\n        return min(arr1[0], arr2[0])\n    }\n    i := min(len(arr1), k/2)\n    j := min(len(arr2), k/2)\n    if arr1[i-1] > arr2[j-1] {\n        return find_kth(arr1, arr2[j:], k-j)\n    } else {\n        return find_kth(arr1[i:], arr2, k-i)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123448,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdfmarwt4_test.go:17:16: undefined: min\n/tmp/tmpdfmarwt4_test.go:19:10: undefined: min\n/tmp/tmpdfmarwt4_test.go:20:10: undefined: min\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc00014e000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000120300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc00014e000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_kth(0xc00008c648, 0x3, 0x3, 0xc00008c608, 0x2, 0x2, 0x1, 0x3b)\n\t/tmp/tmppcmh5imo_test.go:37 +0x37c\ncommand-line-arguments_test.find_kth(0xc00008c648, 0x3, 0x3, 0xc00008c600, 0x3, 0x3, 0x2, 0x0)\n\t/tmp/tmppcmh5imo_test.go:40 +0x352\ncommand-line-arguments_test.find_kth(0xc00008c648, 0x3, 0x3, 0xc00008c5f8, 0x4, 0x4, 0x3, 0xd0)\n\t/tmp/tmppcmh5imo_test.go:40 +0x352\ncommand-line-arguments_test.find_kth(0xc00008c638, 0x5, 0x5, 0xc00008c5f8, 0x4, 0x4, 0x5, 0x5fa120)\n\t/tmp/tmppcmh5imo_test.go:38 +0x2e5\ncommand-line-arguments_test.TestFind_Kth(0xc000120300)\n\t/tmp/tmppcmh5imo_test.go:51 +0x10e\ntesting.tRunner(0xc000120300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return arr2[len(arr2)-1]\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:9 +0x2b0 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a8b0\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc020160448 sp=0xc0201603f8 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc020160498 sp=0xc020160448 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc0201604e8 sp=0xc020160498 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc020160538 sp=0xc0201604e8 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc020160588 sp=0xc020160538 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc0201605d8 sp=0xc020160588 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc020160628 sp=0xc0201605d8 pc=0x50a86c\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return find_kth(arr1[1:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[1:], 0)\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp5spn_0lv_test.go:66: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp5spn_0lv_test.go:66: expected '%!s(int=256)', got '%!s(int=265)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp5spn_0lv_test.go:66: expected '%!s(int=8)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) > len(arr2) {\n        arr1, arr2 = arr2, arr1\n    }\n    if len(arr1) > k/2 {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    } else {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170398 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjvufinm4_test.go:9 +0x27d fp=0xc0201703a8 sp=0xc0201703a0 pc=0x50a87d\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjvufinm4_test.go:30 +0x1d0 fp=0xc0201703f8 sp=0xc0201703a8 pc=0x50a7d0\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjvufinm4_test.go:30 +0x1d0 fp=0xc020170448 sp=0xc0201703f8 pc=0x50a7d0\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjvufinm4_test.go:30 +0x1d0 fp=0xc020170498 sp=0xc020170448 pc=0x50a7d0\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjvufinm4_test.go:30 +0x1d0 fp=0xc0201704e8 sp=0xc020170498 pc=0x50a7d0\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjvufinm4_test.go:30 +0x1d0 fp=0xc020170538 sp=0xc0201704e8 pc=0x50a7d0\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjvufinm4_test.go:30 +0x1d0 fp=0xc020170588 sp=0xc020170538 pc=0x50a7d0\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjvufinm4_test.go:30 +0x1d0 fp=0xc0201705d8 sp=0xc020170588 pc=0x50a7d0\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpjvufinm4_test.go:30 +0x1d0 fp=0xc020170628 sp=0xc0201705d8 pc=0x50a7d0\ncommand-li",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if k <= 0 {\n        return -1\n    }\n\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n\n    var i, j int\n    if len(arr1) < k / 2 {\n        i = len(arr1)\n    } else {\n        i = k / 2\n    }\n\n    if len(arr2) < k / 2 {\n        j = len(arr2)\n    } else {\n        j = k / 2\n    }\n\n    if arr1[i - 1] < arr2[j - 1] {\n        return find_kth(arr1[i:], arr2, k - i)\n    } else {\n        return find_kth(arr1, arr2[j:], k - j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k / 2 {\n        a = arr1[len(arr1) - 1]\n    } else {\n        a = arr1[k / 2 - 1]\n    }\n    if len(arr2) < k / 2 {\n        b = arr2[len(arr2) - 1]\n    } else {\n        b = arr2[k / 2 - 1]\n    }\n    if a < b {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    } else {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k/2 > len(arr1) {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if k/2 > len(arr2) {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var k1, k2 int\n    if len(arr1) < k/2 {\n        k1 = len(arr1)\n    } else {\n        k1 = k/2\n    }\n    if len(arr2) < k/2 {\n        k2 = len(arr2)\n    } else {\n        k2 = k/2\n    }\n    if arr1[k1-1] < arr2[k2-1] {\n        return find_kth(arr1[k1:], arr2, k-k1)\n    } else {\n        return find_kth(arr1, arr2[k2:], k-k2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < len(arr2) {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:9 +0x21e fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a81e\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160448 sp=0xc0201603f8 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160498 sp=0xc020160448 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc0201604e8 sp=0xc020160498 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160538 sp=0xc0201604e8 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160588 sp=0xc020160538 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc0201605d8 sp=0xc020160588 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160628 sp=0xc0201605d8 pc=0x50a765\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k/2 > len(arr1) {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if k/2 > len(arr2) {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) == 1 && len(arr2) == 1 {\n        return arr1[0]\n    }\n    if len(arr1) == 1 {\n        if k == 1 {\n            if arr1[0] < arr2[0] {\n                return arr1[0]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            return arr2[k-1]\n        }\n    }\n    if len(arr2) == 1 {\n        if k == 1 {\n            if arr1[0] < arr2[0] {\n                return arr1[0]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            return arr1[k-1]\n        }\n    }\n    var mid1 int = len(arr1) / 2\n    var mid2 int = len(arr2) / 2\n    if mid1 + mid2 < k {\n        if arr1[mid1] > arr2[mid2] {\n            return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n        } else {\n            return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n        }\n    } else {\n        if arr1[mid1] > arr2[mid2] {\n            return find_kth(arr1[:mid1], arr2, k)\n        } else {\n            return find_kth(arr1, arr2[:mid2], k)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmppgnsa4xe_test.go:80: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmppgnsa4xe_test.go:80: expected '%!s(int=8)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1) - 1\n    } else {\n        i = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2) - 1\n    } else {\n        j = k/2 - 1\n    }\n    if arr1[i] > arr2[j] {\n        return find_kth(arr1, arr2[j+1:], k-j-1)\n    } else {\n        return find_kth(arr1[i+1:], arr2, k-i-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k - mid1 - 1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k - mid2 - 1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:9 +0x370 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x50a970\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e03f8 sp=0xc0201e03a8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e0448 sp=0xc0201e03f8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e0498 sp=0xc0201e0448 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e04e8 sp=0xc0201e0498 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e0538 sp=0xc0201e04e8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e0588 sp=0xc0201e0538 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e05d8 sp=0xc0201e0588 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e0628 sp=0xc0201e05d8 pc=0x50a92c\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1)+1:], k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2)+1:], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2+1:], arr2, k-k/2-1)\n    } else {\n        return find_kth(arr1, arr2[k/2+1:], k-k/2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmpugg0v_lg_test.go:59: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmpugg0v_lg_test.go:59: expected '%!s(int=256)', got '%!s(int=265)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmpugg0v_lg_test.go:59: expected '%!s(int=8)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr1[k/2-1] < arr2[len(arr2)-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2, k-len(arr1))\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    } else if len(arr2) == 0 {\n        return arr1[k]\n    }\n\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n\n    if len(arr1) > len(arr2) {\n        arr1, arr2 = arr2, arr1\n    }\n\n    if len(arr1) <= k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k - len(arr1)] {\n            return arr2[k - len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        }\n    } else {\n        if arr1[k / 2] < arr2[0] {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        } else {\n            return find_kth(arr1[:k / 2], arr2, k / 2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0200f0398 stack=[0xc0200f0000, 0xc0400f0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_kth(0xc0400efdf8, 0x1, 0x4, 0xc0400efe38, 0x5, 0x5, 0x1, 0x0)\n\t/tmp/tmpkfhqy6mx_test.go:9 +0x2d5 fp=0xc0200f03a8 sp=0xc0200f03a0 pc=0x50a8d5\ncommand-line-arguments_test.find_kth(0xc0400efdf8, 0x1, 0x4, 0xc0400efe38, 0x5, 0x5, 0x1, 0x0)\n\t/tmp/tmpkfhqy6mx_test.go:36 +0x225 fp=0xc0200f03f8 sp=0xc0200f03a8 pc=0x50a825\ncommand-line-arguments_test.find_kth(0xc0400efdf8, 0x1, 0x4, 0xc0400efe38, 0x5, 0x5, 0x1, 0x0)\n\t/tmp/tmpkfhqy6mx_test.go:36 +0x225 fp=0xc0200f0448 sp=0xc0200f03f8 pc=0x50a825\ncommand-line-arguments_test.find_kth(0xc0400efdf8, 0x1, 0x4, 0xc0400efe38, 0x5, 0x5, 0x1, 0x0)\n\t/tmp/tmpkfhqy6mx_test.go:36 +0x225 fp=0xc0200f0498 sp=0xc0200f0448 pc=0x50a825\ncommand-line-arguments_test.find_kth(0xc0400efdf8, 0x1, 0x4, 0xc0400efe38, 0x5, 0x5, 0x1, 0x0)\n\t/tmp/tmpkfhqy6mx_test.go:36 +0x225 fp=0xc0200f04e8 sp=0xc0200f0498 pc=0x50a825\ncommand-line-arguments_test.find_kth(0xc0400efdf8, 0x1, 0x4, 0xc0400efe38, 0x5, 0x5, 0x1, 0x0)\n\t/tmp/tmpkfhqy6mx_test.go:36 +0x225 fp=0xc0200f0538 sp=0xc0200f04e8 pc=0x50a825\ncommand-line-arguments_test.find_kth(0xc0400efdf8, 0x1, 0x4, 0xc0400efe38, 0x5, 0x5, 0x1, 0x0)\n\t/tmp/tmpkfhqy6mx_test.go:36 +0x225 fp=0xc0200f0588 sp=0xc0200f0538 pc=0x50a825\ncommand-line-arguments_test.find_kth(0xc0400efdf8, 0x1, 0x4, 0xc0400efe38, 0x5, 0x5, 0x1, 0x0)\n\t/tmp/tmpkfhqy6mx_test.go:36 +0x225 fp=0xc0200f05d8 sp=0xc0200f0588 pc=0x50a825\ncommand-line-arguments_test.find_kth(0xc0400efdf8, 0x1, 0x4, 0xc0400efe38, 0x5, 0x5, 0x1, 0x0)\n\t/tmp/tmpkfhqy6mx_test.go:36 +0x225 fp=0xc0200f0628 sp=0xc0200f05d8 pc=0x50a825\ncommand-li",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) == 1 && len(arr2) == 1 {\n        return arr1[0]\n    }\n    if len(arr1) == 1 {\n        if k == 1 {\n            return arr1[0]\n        } else {\n            return arr2[k-1]\n        }\n    }\n    if len(arr2) == 1 {\n        if k == 1 {\n            return arr2[0]\n        } else {\n            return arr1[k-1]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if arr2[1] < arr1[0] {\n                return arr2[1]\n            } else {\n                return arr1[0]\n            }\n        }\n    }\n    if k == 3 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                if arr1[2] < arr2[0] {\n                    return arr1[2]\n                } else {\n                    return arr2[0]\n                }\n            } else {\n                if arr2[1] < arr1[2] {\n                    return arr2[1]\n                } else {\n                    return arr1[2]\n                }\n            }\n        } else {\n            if arr2[1\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp0vstd5dw_test.go:78:22: expected ']', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n        return find_kth(arr1, arr2[:k/2], k/2)\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n        return find_kth(arr1[:k/2], arr2, k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n        return find_kth(arr1, arr2[:k/2], k/2)\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n        return find_kth(arr1[:k/2], arr2, k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return arr2[len(arr2)-1]\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:9 +0x2b0 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a8b0\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc020160448 sp=0xc0201603f8 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc020160498 sp=0xc020160448 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc0201604e8 sp=0xc020160498 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc020160538 sp=0xc0201604e8 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc020160588 sp=0xc020160538 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc0201605d8 sp=0xc020160588 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc020160628 sp=0xc0201605d8 pc=0x50a86c\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) >= k/2 {\n        if arr1[k/2-1] < arr2[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    } else {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], len(arr1))\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) <= k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2]\n    }\n    if len(arr2) <= k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 34 [running]:\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy5y9zy6b_test.go:9 +0x26b fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x50a86b\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy5y9zy6b_test.go:37 +0x205 fp=0xc0201e03f8 sp=0xc0201e03a8 pc=0x50a805\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy5y9zy6b_test.go:37 +0x205 fp=0xc0201e0448 sp=0xc0201e03f8 pc=0x50a805\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy5y9zy6b_test.go:37 +0x205 fp=0xc0201e0498 sp=0xc0201e0448 pc=0x50a805\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy5y9zy6b_test.go:37 +0x205 fp=0xc0201e04e8 sp=0xc0201e0498 pc=0x50a805\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy5y9zy6b_test.go:37 +0x205 fp=0xc0201e0538 sp=0xc0201e04e8 pc=0x50a805\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy5y9zy6b_test.go:37 +0x205 fp=0xc0201e0588 sp=0xc0201e0538 pc=0x50a805\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy5y9zy6b_test.go:37 +0x205 fp=0xc0201e05d8 sp=0xc0201e0588 pc=0x50a805\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpy5y9zy6b_test.go:37 +0x205 fp=0xc0201e0628 sp=0xc0201e05d8 pc=0x50a805\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1 int\n    var mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k - len(arr1) - 1] {\n            return arr2[k - len(arr1) - 1]\n        } else {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        }\n    }\n    if len(arr2) < k / 2 {\n        if arr2[len(arr2) - 1] < arr1[k - len(arr2) - 1] {\n            return arr1[k - len(arr2) - 1]\n        } else {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        }\n    }\n    if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    } else {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) >= k/2 {\n        mid1 = arr1[k/2-1]\n    } else {\n        mid1 = arr1[len(arr1)-1]\n    }\n    if len(arr2) >= k/2 {\n        mid2 = arr2[k/2-1]\n    } else {\n        mid2 = arr2[len(arr2)-1]\n    }\n    if mid1 < mid2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if k > len(arr1) + len(arr2) {\n        return -1\n    }\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if k/2 > len(arr1) {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if k/2 > len(arr2) {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170398 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp725lya1y_test.go:9 +0x385 fp=0xc0201703a8 sp=0xc0201703a0 pc=0x50a985\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp725lya1y_test.go:40 +0x33c fp=0xc0201703f8 sp=0xc0201703a8 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp725lya1y_test.go:40 +0x33c fp=0xc020170448 sp=0xc0201703f8 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp725lya1y_test.go:40 +0x33c fp=0xc020170498 sp=0xc020170448 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp725lya1y_test.go:40 +0x33c fp=0xc0201704e8 sp=0xc020170498 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp725lya1y_test.go:40 +0x33c fp=0xc020170538 sp=0xc0201704e8 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp725lya1y_test.go:40 +0x33c fp=0xc020170588 sp=0xc020170538 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp725lya1y_test.go:40 +0x33c fp=0xc0201705d8 sp=0xc020170588 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp725lya1y_test.go:40 +0x33c fp=0xc020170628 sp=0xc0201705d8 pc=0x50a93c\ncommand-li",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        return min(arr1[0], arr2[0])\n    }\n    if len(arr1) < k / 2 {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n    if len(arr2) < k / 2 {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    }\n    if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    }\n    return find_kth(arr1, arr2[k / 2:], k - k / 2)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuqlkohju_test.go:17:16: undefined: min\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    var i, j int\n    var res int\n    for i < len(arr1) && j < len(arr2) && k > 0 {\n        if arr1[i] < arr2[j] {\n            res = arr1[i]\n            i++\n        } else {\n            res = arr2[j]\n            j++\n        }\n        k--\n    }\n\n    for i < len(arr1) && k > 0 {\n        res = arr1[i]\n        i++\n        k--\n    }\n\n    for j < len(arr2) && k > 0 {\n        res = arr2[j]\n        j++\n        k--\n    }\n\n    return res\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    } else if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_kth(0xc00008c648, 0x3, 0x3, 0xc00008c608, 0x2, 0x2, 0x1, 0x3b)\n\t/tmp/tmp6njcwp0u_test.go:36 +0x37c\ncommand-line-arguments_test.find_kth(0xc00008c648, 0x3, 0x3, 0xc00008c600, 0x3, 0x3, 0x2, 0x0)\n\t/tmp/tmp6njcwp0u_test.go:39 +0x352\ncommand-line-arguments_test.find_kth(0xc00008c648, 0x3, 0x3, 0xc00008c5f8, 0x4, 0x4, 0x3, 0xd0)\n\t/tmp/tmp6njcwp0u_test.go:39 +0x352\ncommand-line-arguments_test.find_kth(0xc00008c638, 0x5, 0x5, 0xc00008c5f8, 0x4, 0x4, 0x5, 0x5fa120)\n\t/tmp/tmp6njcwp0u_test.go:37 +0x2e5\ncommand-line-arguments_test.TestFind_Kth(0xc000102600)\n\t/tmp/tmp6njcwp0u_test.go:51 +0x10e\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1 int\n    var mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) > len(arr2) {\n        return find_kth(arr2, arr1, k)\n    }\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if k == 1 {\n        return min(arr1[0], arr2[0])\n    }\n    i := min(len(arr1), k / 2)\n    j := min(len(arr2), k / 2)\n    if arr1[i - 1] > arr2[j - 1] {\n        return find_kth(arr1, arr2[j:], k - j)\n    } else {\n        return find_kth(arr1[i:], arr2, k - i)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpka3jmwf1_test.go:17:16: undefined: min\n/tmp/tmpka3jmwf1_test.go:19:10: undefined: min\n/tmp/tmpka3jmwf1_test.go:20:10: undefined: min\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2, k-len(arr1))\n        }\n    } else if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2, k-len(arr2))\n        }\n    } else {\n        if arr1[k/2-1] < arr2[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:9 +0x370 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x50a970\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e03f8 sp=0xc0201e03a8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e0448 sp=0xc0201e03f8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e0498 sp=0xc0201e0448 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e04e8 sp=0xc0201e0498 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e0538 sp=0xc0201e04e8 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e0588 sp=0xc0201e0538 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e05d8 sp=0xc0201e0588 pc=0x50a92c\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpo8decdub_test.go:40 +0x32c fp=0xc0201e0628 sp=0xc0201e05d8 pc=0x50a92c\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid int\n    if len(arr1) < k/2 {\n        mid = len(arr1)\n    } else {\n        mid = k/2\n    }\n    if arr1[mid-1] < arr2[mid-1] {\n        return find_kth(arr1[mid:], arr2, k-mid)\n    } else {\n        return find_kth(arr1, arr2[mid:], k-mid)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) > len(arr2) {\n        arr1, arr2 = arr2, arr1\n    }\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    k1 := k / 2\n    if k1 > len(arr1) {\n        k1 = len(arr1)\n    }\n    k2 := k - k1\n    if arr1[k1-1] < arr2[k2-1] {\n        return find_kth(arr1[k1:], arr2, k2)\n    } else {\n        return find_kth(arr1, arr2[k2:], k1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid int\n    if len(arr1) < k / 2 {\n        mid = len(arr1)\n    } else {\n        mid = k / 2\n    }\n    if arr1[mid - 1] < arr2[mid - 1] {\n        return find_kth(arr1[mid:], arr2, k - mid)\n    } else {\n        return find_kth(arr1, arr2[mid:], k - mid)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < len(arr2) {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:9 +0x21e fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a81e\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160448 sp=0xc0201603f8 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160498 sp=0xc020160448 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc0201604e8 sp=0xc020160498 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160538 sp=0xc0201604e8 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160588 sp=0xc020160538 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc0201605d8 sp=0xc020160588 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160628 sp=0xc0201605d8 pc=0x50a765\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_kth(0xc000080648, 0x3, 0x3, 0xc000080608, 0x2, 0x2, 0x1, 0x3b)\n\t/tmp/tmpqjg5i_6i_test.go:37 +0x37c\ncommand-line-arguments_test.find_kth(0xc000080648, 0x3, 0x3, 0xc000080600, 0x3, 0x3, 0x2, 0x0)\n\t/tmp/tmpqjg5i_6i_test.go:40 +0x352\ncommand-line-arguments_test.find_kth(0xc000080648, 0x3, 0x3, 0xc0000805f8, 0x4, 0x4, 0x3, 0xd0)\n\t/tmp/tmpqjg5i_6i_test.go:40 +0x352\ncommand-line-arguments_test.find_kth(0xc000080638, 0x5, 0x5, 0xc0000805f8, 0x4, 0x4, 0x5, 0x5fa120)\n\t/tmp/tmpqjg5i_6i_test.go:38 +0x2e5\ncommand-line-arguments_test.TestFind_Kth(0xc000102600)\n\t/tmp/tmpqjg5i_6i_test.go:51 +0x10e\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var idx1, idx2 int\n    if len(arr1) < k/2 {\n        idx1 = len(arr1)\n    } else {\n        idx1 = k/2\n    }\n    if len(arr2) < k/2 {\n        idx2 = len(arr2)\n    } else {\n        idx2 = k/2\n    }\n    if arr1[idx1-1] < arr2[idx2-1] {\n        return find_kth(arr1[idx1:], arr2, k-idx1)\n    } else {\n        return find_kth(arr1, arr2[idx2:], k-idx2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) > len(arr2) {\n        return find_kth(arr2, arr1, k)\n    }\n    if len(arr1) > k/2 {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k - k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k - k/2)\n        }\n    } else {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp9490tibs_test.go:9 +0x2bc fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a8bc\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp9490tibs_test.go:30 +0x1e5 fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp9490tibs_test.go:30 +0x1e5 fp=0xc020160448 sp=0xc0201603f8 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp9490tibs_test.go:30 +0x1e5 fp=0xc020160498 sp=0xc020160448 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp9490tibs_test.go:30 +0x1e5 fp=0xc0201604e8 sp=0xc020160498 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp9490tibs_test.go:30 +0x1e5 fp=0xc020160538 sp=0xc0201604e8 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp9490tibs_test.go:30 +0x1e5 fp=0xc020160588 sp=0xc020160538 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp9490tibs_test.go:30 +0x1e5 fp=0xc0201605d8 sp=0xc020160588 pc=0x50a7e5\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmp9490tibs_test.go:30 +0x1e5 fp=0xc020160628 sp=0xc0201605d8 pc=0x50a7e5\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    // k/2 is the index of the kth element in the first array\n    // k - k/2 is the index of the kth element in the second array\n    if arr1[k/2] < arr2[k - k/2] {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    } else {\n        return find_kth(arr1, arr2[k - k/2:], k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmptjxjujls_test.go:9 +0x210 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x50a810\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmptjxjujls_test.go:26 +0x16d fp=0xc0201e03f8 sp=0xc0201e03a8 pc=0x50a76d\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmptjxjujls_test.go:26 +0x16d fp=0xc0201e0448 sp=0xc0201e03f8 pc=0x50a76d\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmptjxjujls_test.go:26 +0x16d fp=0xc0201e0498 sp=0xc0201e0448 pc=0x50a76d\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmptjxjujls_test.go:26 +0x16d fp=0xc0201e04e8 sp=0xc0201e0498 pc=0x50a76d\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmptjxjujls_test.go:26 +0x16d fp=0xc0201e0538 sp=0xc0201e04e8 pc=0x50a76d\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmptjxjujls_test.go:26 +0x16d fp=0xc0201e0588 sp=0xc0201e0538 pc=0x50a76d\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmptjxjujls_test.go:26 +0x16d fp=0xc0201e05d8 sp=0xc0201e0588 pc=0x50a76d\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmptjxjujls_test.go:26 +0x16d fp=0xc0201e0628 sp=0xc0201e05d8 pc=0x50a76d\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k - mid1 - 1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k - mid2 - 1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_kth(0xc00008ce48, 0x3, 0x3, 0xc00008ce08, 0x2, 0x2, 0x1, 0x3b)\n\t/tmp/tmpzmypz3rm_test.go:34 +0x24e\ncommand-line-arguments_test.find_kth(0xc00008ce48, 0x3, 0x3, 0xc00008ce00, 0x3, 0x3, 0x2, 0x0)\n\t/tmp/tmpzmypz3rm_test.go:37 +0x213\ncommand-line-arguments_test.find_kth(0xc00008ce48, 0x3, 0x3, 0xc00008cdf8, 0x4, 0x4, 0x3, 0xd0)\n\t/tmp/tmpzmypz3rm_test.go:37 +0x213\ncommand-line-arguments_test.find_kth(0xc00008ce38, 0x5, 0x5, 0xc00008cdf8, 0x4, 0x4, 0x5, 0x5fa100)\n\t/tmp/tmpzmypz3rm_test.go:35 +0x19a\ncommand-line-arguments_test.TestFind_Kth(0xc000186300)\n\t/tmp/tmpzmypz3rm_test.go:48 +0x10e\ntesting.tRunner(0xc000186300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)-1]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)-1]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) > len(arr2) {\n        return find_kth(arr2, arr1, k)\n    }\n    if len(arr1) < k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k - len(arr1) - 1] {\n            return arr2[k - len(arr1) - 1]\n        } else {\n            return find_kth(arr1, arr2[k - len(arr1):], len(arr1))\n        }\n    } else {\n        if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        } else {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return arr1[len(arr1)-1]\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return arr2[len(arr2)-1]\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:9 +0x2b0 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a8b0\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc020160448 sp=0xc0201603f8 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc020160498 sp=0xc020160448 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc0201604e8 sp=0xc020160498 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc020160538 sp=0xc0201604e8 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc020160588 sp=0xc020160538 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc0201605d8 sp=0xc020160588 pc=0x50a86c\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpqo2ohi7e_test.go:40 +0x26c fp=0xc020160628 sp=0xc0201605d8 pc=0x50a86c\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1 int\n    var mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1)\n    } else {\n        mid1 = k/2\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2)\n    } else {\n        mid2 = k/2\n    }\n    if arr1[mid1-1] < arr2[mid2-1] {\n        return find_kth(arr1[mid1:], arr2, k-mid1)\n    } else {\n        return find_kth(arr1, arr2[mid2:], k-mid2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        return min(arr1[0], arr2[0])\n    }\n    if len(arr1) < k / 2 {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n    if len(arr2) < k / 2 {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    }\n    if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    }\n    return find_kth(arr1, arr2[k / 2:], k - k / 2)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123450,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuqlkohju_test.go:17:16: undefined: min\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    } else {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmptmey64q4_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmptmey64q4_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmptmey64q4_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) <= k / 2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k / 2 - 1\n    }\n    if len(arr2) <= k / 2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k / 2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    } else {\n        return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_kth(0xc000092648, 0x3, 0x3, 0xc000092608, 0x2, 0x2, 0x1, 0x3b)\n\t/tmp/tmp057du4yz_test.go:34 +0x24e\ncommand-line-arguments_test.find_kth(0xc000092648, 0x3, 0x3, 0xc000092600, 0x3, 0x3, 0x2, 0x0)\n\t/tmp/tmp057du4yz_test.go:37 +0x213\ncommand-line-arguments_test.find_kth(0xc000092648, 0x3, 0x3, 0xc0000925f8, 0x4, 0x4, 0x3, 0xd0)\n\t/tmp/tmp057du4yz_test.go:37 +0x213\ncommand-line-arguments_test.find_kth(0xc000092638, 0x5, 0x5, 0xc0000925f8, 0x4, 0x4, 0x5, 0x5fa100)\n\t/tmp/tmp057du4yz_test.go:35 +0x19a\ncommand-line-arguments_test.TestFind_Kth(0xc000001380)\n\t/tmp/tmp057du4yz_test.go:48 +0x10e\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < len(arr2) {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmpnw0rey48_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmpj3hzc312_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmpj3hzc312_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmpj3hzc312_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1[len(arr1):], arr2, k-len(arr1))\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1, arr2[len(arr2):], k-len(arr2))\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpijfkz43a_test.go:9 +0x365 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x50a965\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpijfkz43a_test.go:40 +0x31f fp=0xc0201e03f8 sp=0xc0201e03a8 pc=0x50a91f\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpijfkz43a_test.go:40 +0x31f fp=0xc0201e0448 sp=0xc0201e03f8 pc=0x50a91f\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpijfkz43a_test.go:40 +0x31f fp=0xc0201e0498 sp=0xc0201e0448 pc=0x50a91f\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpijfkz43a_test.go:40 +0x31f fp=0xc0201e04e8 sp=0xc0201e0498 pc=0x50a91f\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpijfkz43a_test.go:40 +0x31f fp=0xc0201e0538 sp=0xc0201e04e8 pc=0x50a91f\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpijfkz43a_test.go:40 +0x31f fp=0xc0201e0588 sp=0xc0201e0538 pc=0x50a91f\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpijfkz43a_test.go:40 +0x31f fp=0xc0201e05d8 sp=0xc0201e0588 pc=0x50a91f\ncommand-line-arguments_test.find_kth(0xc0401dfe50, 0x2, 0x2, 0xc0401dfe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpijfkz43a_test.go:40 +0x31f fp=0xc0201e0628 sp=0xc0201e05d8 pc=0x50a91f\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] > arr2[0] {\n            return arr2[0]\n        } else {\n            return arr1[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] > arr2[k-len(arr1)] {\n            return arr1[len(arr1)-1]\n        } else {\n            return arr2[k-len(arr1)]\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] > arr1[k-len(arr2)] {\n            return arr2[len(arr2)-1]\n        } else {\n            return arr1[k-len(arr2)]\n        }\n    }\n    if arr1[k/2] > arr2[k/2] {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170398 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpnd0j7o5l_test.go:9 +0x2b0 fp=0xc0201703a8 sp=0xc0201703a0 pc=0x50a8b0\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpnd0j7o5l_test.go:38 +0x205 fp=0xc0201703f8 sp=0xc0201703a8 pc=0x50a805\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpnd0j7o5l_test.go:38 +0x205 fp=0xc020170448 sp=0xc0201703f8 pc=0x50a805\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpnd0j7o5l_test.go:38 +0x205 fp=0xc020170498 sp=0xc020170448 pc=0x50a805\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpnd0j7o5l_test.go:38 +0x205 fp=0xc0201704e8 sp=0xc020170498 pc=0x50a805\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpnd0j7o5l_test.go:38 +0x205 fp=0xc020170538 sp=0xc0201704e8 pc=0x50a805\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpnd0j7o5l_test.go:38 +0x205 fp=0xc020170588 sp=0xc020170538 pc=0x50a805\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpnd0j7o5l_test.go:38 +0x205 fp=0xc0201705d8 sp=0xc020170588 pc=0x50a805\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpnd0j7o5l_test.go:38 +0x205 fp=0xc020170628 sp=0xc0201705d8 pc=0x50a805\ncommand-li",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) >= k/2 {\n        mid1 = k/2 - 1\n    } else {\n        mid1 = len(arr1) - 1\n    }\n    if len(arr2) >= k/2 {\n        mid2 = k/2 - 1\n    } else {\n        mid2 = len(arr2) - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return find_kth(arr1[1:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[1:], 0)\n        }\n    }\n    if k % 2 == 0 {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k/2)\n        }\n    } else {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k/2+1)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k/2+1)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmpr_ci9jvl_test.go:60: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmpr_ci9jvl_test.go:60: expected '%!s(int=256)', got '%!s(int=265)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmpr_ci9jvl_test.go:60: expected '%!s(int=8)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if k == 2 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            }\n            return arr2[0]\n        }\n        if arr2[1] < arr1[0] {\n            return arr2[1]\n        }\n        return arr1[0]\n    }\n    if k == 3 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                if arr1[2] < arr2[0] {\n                    return arr1[2]\n                }\n                return arr2[0]\n            }\n            if arr2[1] < arr1[2] {\n                return arr2[1]\n            }\n            return arr1[2]\n        }\n        if arr2[1] < arr1[0] {\n            if arr2[2] < arr1[0] {\n                return arr2[2]\n            }\n            return arr1[0]\n        }\n        if arr1[1] < arr2[2] {\n            return arr1[1]\n        }\n        return arr2[2]\n    }\n    if k == 4 {\n        if arr1[0] < arr2[0] {\n            if arr1[1] < arr2[0] {\n                if arr1[2] < arr2[0] {\n                    if arr1[3] < arr2[0] {\n                        return arr1[3]\n                    }\n                    return arr2[0]\n                }\n                if arr2[1] < arr1[3] {\n                    return arr2[1]\n                }\n                return arr1[3]\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxmnte7rb_test.go:72:6: expected '(', found TestFind_Kth\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)-1] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        }\n    } else if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)-1] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n        }\n    } else {\n        if arr1[k/2-1] < arr2[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_kth(0xc000092648, 0x3, 0x3, 0xc000092608, 0x2, 0x2, 0x1, 0x3b)\n\t/tmp/tmp4h7_qag2_test.go:36 +0x38a\ncommand-line-arguments_test.find_kth(0xc000092648, 0x3, 0x3, 0xc000092600, 0x3, 0x3, 0x2, 0x0)\n\t/tmp/tmp4h7_qag2_test.go:39 +0x365\ncommand-line-arguments_test.find_kth(0xc000092648, 0x3, 0x3, 0xc0000925f8, 0x4, 0x4, 0x3, 0xd0)\n\t/tmp/tmp4h7_qag2_test.go:39 +0x365\ncommand-line-arguments_test.find_kth(0xc000092638, 0x5, 0x5, 0xc0000925f8, 0x4, 0x4, 0x5, 0x5fa120)\n\t/tmp/tmp4h7_qag2_test.go:37 +0x2f4\ncommand-line-arguments_test.TestFind_Kth(0xc000001380)\n\t/tmp/tmp4h7_qag2_test.go:51 +0x10e\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < len(arr2) {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:9 +0x21e fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a81e\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160448 sp=0xc0201603f8 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160498 sp=0xc020160448 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc0201604e8 sp=0xc020160498 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160538 sp=0xc0201604e8 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160588 sp=0xc020160538 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc0201605d8 sp=0xc020160588 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160628 sp=0xc0201605d8 pc=0x50a765\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if k/2 > len(arr1) {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if k/2 > len(arr2) {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) > k/2 {\n        i = k/2\n    } else {\n        i = len(arr1)\n    }\n    if len(arr2) > k/2 {\n        j = k/2\n    } else {\n        j = len(arr2)\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    } else {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmptmey64q4_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmptmey64q4_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmptmey64q4_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var a, b int\n    if len(arr1) < k/2 {\n        a = arr1[len(arr1)-1]\n    } else {\n        a = arr1[k/2-1]\n    }\n    if len(arr2) < k/2 {\n        b = arr2[len(arr2)-1]\n    } else {\n        b = arr2[k/2-1]\n    }\n    if a < b {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    var mid1, mid2 int\n    if len(arr1) < k / 2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k / 2 - 1\n    }\n    if len(arr2) < k / 2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k / 2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1 + 1:], arr2, k - mid1 - 1)\n    }\n    return find_kth(arr1, arr2[mid2 + 1:], k - mid2 - 1)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k - len(arr1) - 1] {\n            return arr2[k - len(arr1) - 1]\n        } else {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        }\n    }\n    if len(arr2) < k / 2 {\n        if arr2[len(arr2) - 1] < arr1[k - len(arr2) - 1] {\n            return arr1[k - len(arr2) - 1]\n        } else {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        }\n    }\n    if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    } else {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k - 1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k - 1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k / 2 - 1] {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        } else {\n            return find_kth(arr1, arr2[:k / 2], k - k / 2)\n        }\n    }\n    if len(arr2) < k / 2 {\n        if arr2[len(arr2) - 1] < arr1[k / 2 - 1] {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        } else {\n            return find_kth(arr1[:k / 2], arr2, k - k / 2)\n        }\n    }\n    if arr1[k / 2 - 1] < arr2[k / 2 - 1] {\n        return find_kth(arr1[k / 2:], arr2, k - k / 2)\n    } else {\n        return find_kth(arr1, arr2[k / 2:], k - k / 2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k / 2 {\n        if arr1[len(arr1) - 1] < arr2[k - len(arr1)] {\n            return arr2[k - len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        }\n    } else if len(arr2) <= k / 2 {\n        if arr2[len(arr2) - 1] < arr1[k - len(arr2)] {\n            return arr1[k - len(arr2)]\n        } else {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        }\n    } else {\n        if arr1[k / 2] < arr2[k / 2] {\n            return find_kth(arr1[k / 2:], arr2, k - k / 2)\n        } else {\n            return find_kth(arr1, arr2[k / 2:], k - k / 2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123454,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170398 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpw9iqbyxb_test.go:9 +0x38b fp=0xc0201703a8 sp=0xc0201703a0 pc=0x50a98b\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpw9iqbyxb_test.go:39 +0x33c fp=0xc0201703f8 sp=0xc0201703a8 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpw9iqbyxb_test.go:39 +0x33c fp=0xc020170448 sp=0xc0201703f8 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpw9iqbyxb_test.go:39 +0x33c fp=0xc020170498 sp=0xc020170448 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpw9iqbyxb_test.go:39 +0x33c fp=0xc0201704e8 sp=0xc020170498 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpw9iqbyxb_test.go:39 +0x33c fp=0xc020170538 sp=0xc0201704e8 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpw9iqbyxb_test.go:39 +0x33c fp=0xc020170588 sp=0xc020170538 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpw9iqbyxb_test.go:39 +0x33c fp=0xc0201705d8 sp=0xc020170588 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpw9iqbyxb_test.go:39 +0x33c fp=0xc020170628 sp=0xc0201705d8 pc=0x50a93c\ncommand-li",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    } else {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.find_kth(0xc000092648, 0x3, 0x3, 0xc0000925f8, 0x4, 0x4, 0x3, 0xd0)\n\t/tmp/tmpq_1efycm_test.go:30 +0x27b\ncommand-line-arguments_test.find_kth(0xc000092638, 0x5, 0x5, 0xc0000925f8, 0x4, 0x4, 0x5, 0x5fa100)\n\t/tmp/tmpq_1efycm_test.go:33 +0x245\ncommand-line-arguments_test.TestFind_Kth(0xc000001380)\n\t/tmp/tmpq_1efycm_test.go:45 +0x10e\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        }\n        return arr2[0]\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    return find_kth(arr1, arr2[k/2:], k-k/2)\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < len(arr2) {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    } else {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:9 +0x21e fp=0xc0201603a8 sp=0xc0201603a0 pc=0x50a81e\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc0201603f8 sp=0xc0201603a8 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160448 sp=0xc0201603f8 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160498 sp=0xc020160448 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc0201604e8 sp=0xc020160498 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160538 sp=0xc0201604e8 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160588 sp=0xc020160538 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc0201605d8 sp=0xc020160588 pc=0x50a765\ncommand-line-arguments_test.find_kth(0xc04015fe50, 0x2, 0x2, 0xc04015fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpgkxatual_test.go:24 +0x165 fp=0xc020160628 sp=0xc0201605d8 pc=0x50a765\ncommand-l",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var i, j int\n    if len(arr1) < k/2 {\n        i = len(arr1)\n    } else {\n        i = k/2\n    }\n    if len(arr2) < k/2 {\n        j = len(arr2)\n    } else {\n        j = k/2\n    }\n    if arr1[i-1] < arr2[j-1] {\n        return find_kth(arr1[i:], arr2, k-i)\n    } else {\n        return find_kth(arr1, arr2[j:], k-j)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            if len(arr1) == 1 {\n                return arr2[0]\n            }\n            if arr1[1] < arr2[0] {\n                return arr1[1]\n            } else {\n                return arr2[0]\n            }\n        } else {\n            if len(arr2) == 1 {\n                return arr1[0]\n            }\n            if arr2[1] < arr1[0] {\n                return arr2[1]\n            } else {\n                return arr1[0]\n            }\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k - k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k - k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmpsjy5og4j_test.go:72: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmpsjy5og4j_test.go:72: expected '%!s(int=256)', got '%!s(int=265)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmpsjy5og4j_test.go:72: expected '%!s(int=8)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    }\n    if len(arr2) == 0 {\n        return arr1[k]\n    }\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n    if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2] < arr2[k/2] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123454,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170398 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722a, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpoi_8ns8p_test.go:9 +0x38b fp=0xc0201703a8 sp=0xc0201703a0 pc=0x50a98b\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpoi_8ns8p_test.go:40 +0x33c fp=0xc0201703f8 sp=0xc0201703a8 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpoi_8ns8p_test.go:40 +0x33c fp=0xc020170448 sp=0xc0201703f8 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpoi_8ns8p_test.go:40 +0x33c fp=0xc020170498 sp=0xc020170448 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpoi_8ns8p_test.go:40 +0x33c fp=0xc0201704e8 sp=0xc020170498 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpoi_8ns8p_test.go:40 +0x33c fp=0xc020170538 sp=0xc0201704e8 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpoi_8ns8p_test.go:40 +0x33c fp=0xc020170588 sp=0xc020170538 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpoi_8ns8p_test.go:40 +0x33c fp=0xc0201705d8 sp=0xc020170588 pc=0x50a93c\ncommand-line-arguments_test.find_kth(0xc04016fe50, 0x2, 0x2, 0xc04016fe00, 0x3, 0x3, 0x1, 0x0)\n\t/tmp/tmpoi_8ns8p_test.go:40 +0x33c fp=0xc020170628 sp=0xc0201705d8 pc=0x50a93c\ncommand-li",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) >= k/2 {\n        mid1 = arr1[k/2-1]\n    } else {\n        mid1 = arr1[len(arr1)-1]\n    }\n    if len(arr2) >= k/2 {\n        mid2 = arr2[k/2-1]\n    } else {\n        mid2 = arr2[len(arr2)-1]\n    }\n    if mid1 < mid2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k/2)\n        }\n    } else {\n        if arr1[k/2-1] < arr2[0] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=6)', got '%!s(int=1)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=256)', got '%!s(int=72)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmp8ld1nii9_test.go:53: expected '%!s(int=8)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if k/2 > len(arr1) {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if k/2 > len(arr2) {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        if arr1[len(arr1)-1] < arr2[k/2-1] {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        } else {\n            return find_kth(arr1, arr2[:k/2], k-k/2)\n        }\n    }\n    if len(arr2) < k/2 {\n        if arr2[len(arr2)-1] < arr1[k/2-1] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1[:k/2], arr2, k-k/2)\n        }\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123451,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k]\n    } else if len(arr2) == 0 {\n        return arr1[k]\n    }\n\n    if k == 0 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return find_kth(arr1[1:], arr2, 0)\n        } else {\n            return find_kth(arr1, arr2[1:], 0)\n        }\n    }\n\n    if len(arr1) <= k/2 {\n        if arr1[len(arr1)-1] < arr2[k-len(arr1)] {\n            return arr2[k-len(arr1)]\n        } else {\n            return find_kth(arr1, arr2[k-len(arr1):], len(arr1))\n        }\n    } else if len(arr2) <= k/2 {\n        if arr2[len(arr2)-1] < arr1[k-len(arr2)] {\n            return arr1[k-len(arr2)]\n        } else {\n            return find_kth(arr1[k-len(arr2):], arr2, len(arr2))\n        }\n    } else {\n        if arr1[k/2] < arr2[k/2] {\n            return find_kth(arr1[k/2:], arr2, k-k/2)\n        } else {\n            return find_kth(arr1, arr2[k/2:], k-k/2)\n        }\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123453,
      "stdout": "--- FAIL: TestFind_Kth (0.00s)\n    --- FAIL: TestFind_Kth/test_num__0 (0.00s)\n        tmpiwp1hlpm_test.go:68: expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestFind_Kth/test_num__1 (0.00s)\n        tmpiwp1hlpm_test.go:68: expected '%!s(int=256)', got '%!s(int=265)'\n    --- FAIL: TestFind_Kth/test_num__2 (0.00s)\n        tmpiwp1hlpm_test.go:68: expected '%!s(int=8)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    var mid1, mid2 int\n    if len(arr1) < k/2 {\n        mid1 = len(arr1) - 1\n    } else {\n        mid1 = k/2 - 1\n    }\n    if len(arr2) < k/2 {\n        mid2 = len(arr2) - 1\n    } else {\n        mid2 = k/2 - 1\n    }\n    if arr1[mid1] < arr2[mid2] {\n        return find_kth(arr1[mid1+1:], arr2, k-mid1-1)\n    } else {\n        return find_kth(arr1, arr2[mid2+1:], k-mid2-1)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_kth_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find kth element from the given two sorted lists.\nfunc find_kth(arr1 []int, arr2 []int, k int) int {\n    if len(arr1) == 0 {\n        return arr2[k-1]\n    }\n    if len(arr2) == 0 {\n        return arr1[k-1]\n    }\n    if k == 1 {\n        if arr1[0] < arr2[0] {\n            return arr1[0]\n        } else {\n            return arr2[0]\n        }\n    }\n    if len(arr1) < k/2 {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n    if len(arr2) < k/2 {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    }\n    if arr1[k/2-1] < arr2[k/2-1] {\n        return find_kth(arr1[k/2:], arr2, k-k/2)\n    } else {\n        return find_kth(arr1, arr2[k/2:], k-k/2)\n    }\n}\n\nfunc TestFind_Kth(t *testing.T) {\n  candidate := find_kth\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 6, 7, 9}, []int{1, 4, 8, 10}, 5), expected: 6 },\n     { actual: candidate([]int{100, 112, 256, 349, 770}, []int{72, 86, 113, 119, 265, 445, 892}, 7), expected: 256 },\n     { actual: candidate([]int{3, 4, 7, 8, 10}, []int{2, 5, 9, 11}, 6), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510564,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}