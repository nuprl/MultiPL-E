{
  "name": "mbpp_94_index_minimum",
  "language": "go_test.go",
  "prompt": "package index_minimum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of lists, write a function that returns the first value of the list with the smallest second value.\nfunc index_minimum(test_list [][]interface{}) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py",
  "prompt_terminology": "reworded",
  "tests": "func TestIndex_Minimum(t *testing.T) {\n  candidate := index_minimum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Rash\", 143}, []interface{}{\"Manjeet\", 200}, []interface{}{\"Varsha\", 100}}), expected: \"Varsha\" },\n     { actual: candidate([][]int{[]interface{}{\"Yash\", 185}, []interface{}{\"Dawood\", 125}, []interface{}{\"Sanya\", 175}}), expected: \"Dawood\" },\n     { actual: candidate([][]int{[]interface{}{\"Sai\", 345}, []interface{}{\"Salman\", 145}, []interface{}{\"Ayesha\", 96}}), expected: \"Ayesha\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var min_index int\n    var min_value int\n    for i, v := range test_list {\n        if i == 0 {\n            min_index = i\n            min_value = v[1].(int)\n        } else {\n            if v[1].(int) < min_value {\n                min_index = i\n                min_value = v[1].(int)\n            }\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    var min_index int = 0\n    var min_value int = test_list[0][1].(int)\n    for i, v := range test_list {\n        if v[1].(int) < min_value {\n            min_index = i\n            min_value = v[1].(int)\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    min_index := 0\n    min_value := test_list[0][1]\n    for i, v := range test_list {\n        if v[1].(int) < min_value.(int) {\n            min_index = i\n            min_value = v[1]\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    var min_index int\n    min_value := test_list[0][1]\n    for i, v := range test_list {\n        if v[1] < min_value {\n            min_index = i\n            min_value = v[1]\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    var min_index int\n    var min_value int\n    for i, v := range test_list {\n        if i == 0 {\n            min_index = i\n            min_value = v[1].(int)\n        } else {\n            if v[1].(int) < min_value {\n                min_index = i\n                min_value = v[1].(int)\n            }\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    var min_index int = 0\n    var min_value int = test_list[0][1].(int)\n    for i, v := range test_list {\n        if v[1].(int) < min_value {\n            min_index = i\n            min_value = v[1].(int)\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    var min_index int = 0\n    var min_value int = test_list[0][1].(int)\n    for i, v := range test_list {\n        if v[1].(int) < min_value {\n            min_index = i\n            min_value = v[1].(int)\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    var min_index int\n    var min_value int\n    for i, v := range test_list {\n        if i == 0 {\n            min_index = i\n            min_value = v[1].(int)\n        } else {\n            if v[1].(int) < min_value {\n                min_index = i\n                min_value = v[1].(int)\n            }\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    var min_index int = 0\n    var min_value int = test_list[0][1].(int)\n    for i, v := range test_list {\n        if v[1].(int) < min_value {\n            min_index = i\n            min_value = v[1].(int)\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    var min_index int = 0\n    var min_value int = test_list[0][1].(int)\n    for i, v := range test_list {\n        if v[1].(int) < min_value {\n            min_index = i\n            min_value = v[1].(int)\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    var min_index int\n    var min_value int\n    for i, v := range test_list {\n        if i == 0 {\n            min_index = i\n            min_value = v[1].(int)\n        } else {\n            if v[1].(int) < min_value {\n                min_index = i\n                min_value = v[1].(int)\n            }\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    min_index := 0\n    min_value := test_list[0][1]\n    for i, v := range test_list {\n        if v[1] < min_value {\n            min_index = i\n            min_value = v[1]\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    var min_index int\n    var min_value int\n    for i, v := range test_list {\n        if i == 0 {\n            min_index = i\n            min_value = v[1].(int)\n        } else {\n            if v[1].(int) < min_value {\n                min_index = i\n                min_value = v[1].(int)\n            }\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    var min_index int = 0\n    var min_value int = test_list[0][1].(int)\n    for i, v := range test_list {\n        if v[1].(int) < min_value {\n            min_index = i\n            min_value = v[1].(int)\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    var min_index int\n    var min_value int\n    for index, value := range test_list {\n        if index == 0 {\n            min_index = index\n            min_value = value[1].(int)\n        } else if value[1].(int) < min_value {\n            min_index = index\n            min_value = value[1].(int)\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    var min_index int = 0\n    var min_value int = test_list[0][1].(int)\n    for i, v := range test_list {\n        if v[1].(int) < min_value {\n            min_index = i\n            min_value = v[1].(int)\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    min_index := 0\n    min_value := test_list[0][1]\n    for i := 1; i < len(test_list); i++ {\n        if test_list[i][1] < min_value {\n            min_index = i\n            min_value = test_list[i][1]\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    var min_index int = 0\n    var min_value int = test_list[0][1].(int)\n    for i, v := range test_list {\n        if v[1].(int) < min_value {\n            min_index = i\n            min_value = v[1].(int)\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    var min_index int\n    var min_value int\n    min_value = test_list[0][1].(int)\n    min_index = 0\n    for i, v := range test_list {\n        if v[1].(int) < min_value {\n            min_value = v[1].(int)\n            min_index = i\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n",
    "    min_index := 0\n    min_value := test_list[0][1]\n    for i, v := range test_list {\n        if v[1] < min_value {\n            min_index = i\n            min_value = v[1]\n        }\n    }\n    return test_list[min_index][0].(string)\n}\n"
  ]
}