{
  "name": "mbpp_131_reverse_vowels",
  "language": "go_test.go",
  "prompt": "package reverse_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to reverse only the vowels of a given string (where y is not a vowel).\nfunc reverse_vowels(str1 string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py",
  "prompt_terminology": "reworded",
  "tests": "func TestReverse_Vowels(t *testing.T) {\n  candidate := reverse_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"USA\"), expected: \"ASU\" },\n     { actual: candidate(\"ab\"), expected: \"ab\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var vowels = map[string]string{\"a\": \"a\", \"e\": \"e\", \"i\": \"i\", \"o\": \"o\", \"u\": \"u\"}\n    var str2 string\n    var str3 string\n    for _, char := range str1 {\n        if _, ok := vowels[string(char)]; ok {\n            str2 += string(char)\n        }\n    }\n    for _, char := range str1 {\n        if _, ok := vowels[string(char)]; ok {\n            str3 += string(str2[len(str2)-1])\n            str2 = str2[:len(str2)-1]\n        } else {\n            str3 += string(char)\n        }\n    }\n    return str3\n}\n",
    "    vowels := []rune{'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    str1_runes := []rune(str1)\n    str1_vowels := []rune{}\n    str1_vowels_index := []int{}\n    for i, v := range str1_runes {\n        for _, vv := range vowels {\n            if v == vv {\n                str1_vowels = append(str1_vowels, v)\n                str1_vowels_index = append(str1_vowels_index, i)\n            }\n        }\n    }\n    for i, v := range str1_vowels_index {\n        str1_runes[v] = str1_vowels[len(str1_vowels)-1-i]\n    }\n    return string(str1_runes)\n}\n",
    "    var str2 string\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    var vowel_indexes []int\n    var vowel_chars []string\n    for i, char := range str1 {\n        for _, vowel := range vowels {\n            if string(char) == vowel {\n                vowel_indexes = append(vowel_indexes, i)\n                vowel_chars = append(vowel_chars, string(char))\n            }\n        }\n    }\n    for i, char := range str1 {\n        if contains(vowel_indexes, i) {\n            str2 += vowel_chars[len(vowel_chars)-1]\n            vowel_chars = vowel_chars[:len(vowel_chars)-1]\n        } else {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n",
    "    // create a map of vowels\n    vowels := map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    // create a slice of the string\n    str1_slice := []string{}\n    // create a slice of the vowels\n    vowels_slice := []string{}\n    // loop through the string\n    for _, char := range str1 {\n        // if the character is a vowel\n        if _, ok := vowels[string(char)]; ok {\n            // append the character to the vowels slice\n            vowels_slice = append(vowels_slice, string(char))\n        }\n        // append the character to the string slice\n        str1_slice = append(str1_slice, string(char))\n    }\n    // reverse the vowels slice\n    for i, j := 0, len(vowels_slice)-1; i < j; i, j = i+1, j-1 {\n        vowels_slice[i], vowels_slice[j] = vowels_slice[j], vowels_slice[i]\n    }\n    // create a counter for the vowels slice\n    counter := 0\n    // loop through the string slice\n    for i, char := range str1_slice {\n        // if the character is a vowel\n        if _, ok := vowels[string(char)]; ok {\n            // replace the character with the vowel in the vowels slice\n            str1_slice[i] = vowels_slice[counter]\n            // increment the counter\n            counter++\n        }\n    }\n    // return the string slice as a string\n    return strings.Join(str1_slice, \"\")\n}\n",
    "    var str2 string\n    for i := len(str1) - 1; i >= 0; i-- {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str2 += string(str1[i])\n        }\n    }\n    var str3 string\n    j := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str3 += string(str2[j])\n            j++\n        } else {\n            str3 += string(str1[i])\n        }\n    }\n    return str3\n}\n",
    "    var str2 string\n    var vowels = map[string]int{\"a\":1, \"e\":1, \"i\":1, \"o\":1, \"u\":1}\n    var vowel_stack []string\n    for _, char := range str1 {\n        if _, ok := vowels[string(char)]; ok {\n            vowel_stack = append(vowel_stack, string(char))\n        }\n    }\n    for _, char := range str1 {\n        if _, ok := vowels[string(char)]; ok {\n            str2 += vowel_stack[len(vowel_stack)-1]\n            vowel_stack = vowel_stack[:len(vowel_stack)-1]\n        } else {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n",
    "    var str2 string\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    var stack []string\n\n    for _, char := range str1 {\n        if contains(vowels, string(char)) {\n            stack = append(stack, string(char))\n        }\n    }\n\n    for _, char := range str1 {\n        if contains(vowels, string(char)) {\n            str2 += stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n        } else {\n            str2 += string(char)\n        }\n    }\n\n    return str2\n}\n",
    "    var str2 string\n    for i := len(str1) - 1; i >= 0; i-- {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str2 += string(str1[i])\n        }\n    }\n    var str3 string\n    var j int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' || str1[i] == 'e' || str1[i] == 'i' || str1[i] == 'o' || str1[i] == 'u' {\n            str3 += string(str2[j])\n            j++\n        } else {\n            str3 += string(str1[i])\n        }\n    }\n    return str3\n}\n",
    "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    var str1_runes = []rune(str1)\n    var str1_vowels = []string{}\n    var str1_vowels_runes = []rune{}\n    var str1_vowels_runes_reversed = []rune{}\n    var str1_vowels_reversed = []string{}\n    var str1_vowels_reversed_runes = []rune{}\n    var str1_vowels_reversed_runes_reversed = []rune{}\n    var str1_vowels_reversed_runes_reversed_string = \"\"\n    var str1_vowels_reversed_runes_reversed_string_runes = []rune{}\n    var str1_vowels_reversed_runes_reversed_string_runes_reversed = []rune{}\n    var str1_vowels_reversed_runes_reversed_string_runes_reversed_string = \"\"\n    var str1_vowels_reversed_runes_reversed_string_runes_reversed_string_runes = []rune{}\n    var str1_vowels_reversed_runes_reversed_string_runes_reversed_string_runes_reversed = []rune{}\n    var str1_vowels_reversed_runes_reversed_string_runes_reversed_string_runes_reversed_string = \"\"\n    var str1_vowels_reversed_runes_reversed_string_runes_reversed_string_runes_reversed_string_runes = []rune{}\n    var str1_vowels_reversed_runes_reversed_string_runes_reversed_string_runes_reversed_string",
    "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    var str1_runes = []rune(str1)\n    var str1_runes_len = len(str1_runes)\n    var str1_runes_vowels []rune\n    var str1_runes_vowels_len int\n    var str1_runes_vowels_idx int\n    var str1_runes_vowels_idx_rev int\n    var str1_runes_vowels_idx_rev_tmp rune\n    var str1_runes_vowels_idx_tmp rune\n    var str1_runes_vowels_idx_tmp_rev int\n    var str1_runes_vowels_idx_tmp_rev_tmp rune\n    var str1_runes_vowels_idx_tmp_rev_tmp_idx int\n    var str1_runes_vowels_idx_tmp_rev_tmp_idx_tmp rune\n    var str1_runes_vowels_idx_tmp_rev_tmp_idx_tmp_rev int\n    var str1_runes_vowels_idx_tmp_rev_tmp_idx_tmp_rev_tmp rune\n    var str1_runes_vowels_idx_tmp_rev_tmp_idx_tmp_rev_tmp_idx int\n    var str1_runes_vowels_idx_tmp_rev_tmp_idx_tmp_rev_tmp_idx_tmp rune\n    var str1_runes_vowels_idx_tmp_rev_tmp_idx_tmp_rev_tmp_idx_tmp_rev int\n    var str1_runes_vowels_idx_tmp_rev_tmp_idx_tmp_rev_tmp_idx_tmp_rev_tmp rune\n    var str1_runes_vowels_idx_tmp_rev_tmp_idx_tmp_rev_tmp_idx_tmp",
    "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    var str1_array = []string{}\n    var str1_vowels = []string{}\n    var str1_vowels_reversed = []string{}\n    var str1_reversed = \"\"\n    var i = 0\n\n    for _, char := range str1 {\n        str1_array = append(str1_array, string(char))\n    }\n\n    for _, char := range str1_array {\n        for _, vowel := range vowels {\n            if char == vowel {\n                str1_vowels = append(str1_vowels, char)\n            }\n        }\n    }\n\n    for i = len(str1_vowels) - 1; i >= 0; i-- {\n        str1_vowels_reversed = append(str1_vowels_reversed, str1_vowels[i])\n    }\n\n    for i = 0; i < len(str1_array); i++ {\n        for j := 0; j < len(vowels); j++ {\n            if str1_array[i] == vowels[j] {\n                str1_array[i] = str1_vowels_reversed[0]\n                str1_vowels_reversed = str1_vowels_reversed[1:]\n            }\n        }\n    }\n\n    for _, char := range str1_array {\n        str1_reversed += char\n    }\n\n    return str1_reversed\n}\n",
    "    var str2 string\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowel_positions []int\n    var vowel_positions_reversed []int\n    var vowel_positions_reversed_index int\n\n    for i, char := range str1 {\n        for _, vowel := range vowels {\n            if string(char) == vowel {\n                vowel_positions = append(vowel_positions, i)\n            }\n        }\n    }\n\n    for i := len(vowel_positions) - 1; i >= 0; i-- {\n        vowel_positions_reversed = append(vowel_positions_reversed, vowel_positions[i])\n    }\n\n    for i, char := range str1 {\n        if i == vowel_positions_reversed[vowel_positions_reversed_index] {\n            str2 += string(char)\n            vowel_positions_reversed_index++\n        } else {\n            str2 += string(char)\n        }\n    }\n\n    return str2\n}\n",
    "    // Convert string to slice of runes\n    str_slice := []rune(str1)\n    // Create a slice of runes to hold the vowels\n    var vowels []rune\n    // Create a slice of runes to hold the consonants\n    var consonants []rune\n    // Iterate through the string slice\n    for _, char := range str_slice {\n        // Check if the current character is a vowel\n        if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            // Append the current character to the vowels slice\n            vowels = append(vowels, char)\n        } else {\n            // Append the current character to the consonants slice\n            consonants = append(consonants, char)\n        }\n    }\n    // Reverse the vowels slice\n    for i, j := 0, len(vowels)-1; i < j; i, j = i+1, j-1 {\n        vowels[i], vowels[j] = vowels[j], vowels[i]\n    }\n    // Iterate through the string slice\n    for i, char := range str_slice {\n        // Check if the current character is a vowel\n        if char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' {\n            // Replace the current character with the first character in the vowels slice\n            str_slice[i] = vowels[0]\n            // Remove the first character from the vowels slice\n            vowels = vowels[1:]\n        }\n    }\n    // Iterate through the string slice\n    for i, char := range str_slice {\n        // Check if the current character is a consonant\n        if char != 'a' && char != 'e' && char != 'i' && char != 'o' && char != 'u' {\n            // Replace the current character with the first character in the consonants slice\n            str_slice[i] = consonants[0]\n            // Remove the first character from the consonants slice\n            consonants = consonants[1:]\n        }\n    }\n    // Return the string",
    "    var str2 string\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    var vowel_stack []string\n    for _, char := range str1 {\n        if contains(vowels, string(char)) {\n            vowel_stack = append(vowel_stack, string(char))\n        }\n    }\n    for _, char := range str1 {\n        if contains(vowels, string(char)) {\n            str2 += vowel_stack[len(vowel_stack)-1]\n            vowel_stack = vowel_stack[:len(vowel_stack)-1]\n        } else {\n            str2 += string(char)\n        }\n    }\n    return str2\n}\n",
    "    // Create a map of vowels\n    vowels := map[string]string{\"a\": \"a\", \"e\": \"e\", \"i\": \"i\", \"o\": \"o\", \"u\": \"u\"}\n    // Create a slice of the string\n    str1_slice := []string{}\n    // Create a slice of the vowels\n    vowels_slice := []string{}\n    // Create a slice of the non-vowels\n    non_vowels_slice := []string{}\n    // Create a slice of the reversed vowels\n    reversed_vowels_slice := []string{}\n    // Create a slice of the reversed string\n    reversed_str1_slice := []string{}\n    // Create a slice of the reversed string\n    reversed_str1 := \"\"\n\n    // Loop through the string and add each character to the slice\n    for _, char := range str1 {\n        str1_slice = append(str1_slice, string(char))\n    }\n\n    // Loop through the slice and add each vowel to the vowels slice\n    for _, char := range str1_slice {\n        if _, ok := vowels[char]; ok {\n            vowels_slice = append(vowels_slice, char)\n        } else {\n            non_vowels_slice = append(non_vowels_slice, char)\n        }\n    }\n\n    // Reverse the vowels slice\n    for i := len(vowels_slice) - 1; i >= 0; i-- {\n        reversed_vowels_slice = append(reversed_vowels_slice, vowels_slice[i])\n    }\n\n    // Loop through the string slice and add the reversed vowels and non-vowels to the reversed string slice\n    for i, char := range str1_slice {\n        if _, ok := vowels[char]; ok {\n            reversed_str1_slice = append(reversed_str1_slice, reversed_vowels_slice[0])\n            reversed_vowels_slice = reversed_vowels_slice[1:]\n        } else {\n            reversed_str1_slice = append(reversed_str1_slice,",
    "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"}\n    str1_array := []string{}\n    for _, char := range str1 {\n        str1_array = append(str1_array, string(char))\n    }\n    start := 0\n    end := len(str1_array) - 1\n    for start < end {\n        if !contains(vowels, str1_array[start]) {\n            start += 1\n        } else if !contains(vowels, str1_array[end]) {\n            end -= 1\n        } else {\n            str1_array[start], str1_array[end] = str1_array[end], str1_array[start]\n            start += 1\n            end -= 1\n        }\n    }\n    return strings.Join(str1_array, \"\")\n}\n",
    "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var str1_vowels []string\n    var str1_vowels_reversed []string\n    var str1_vowels_reversed_string string\n    var str1_vowels_reversed_string_final string\n    var str1_vowels_reversed_string_final_array []string\n    var str1_vowels_reversed_string_final_array_index int\n    var str1_vowels_reversed_string_final_array_index_final int\n    var str1_vowels_reversed_string_final_array_index_final_string string\n    var str1_vowels_reversed_string_final_array_index_final_string_final string\n    var str1_vowels_reversed_string_final_array_index_final_string_final_array []string\n    var str1_vowels_reversed_string_final_array_index_final_string_final_array_index int\n    var str1_vowels_reversed_string_final_array_index_final_string_final_array_index_final int\n    var str1_vowels_reversed_string_final_array_index_final_string_final_array_index_final_string string\n    var str1_vowels_reversed_string_final_array_index_final_string_final_array_index_final_string_final string\n    var str1_vowels_reversed_string_final_array_index_final_string_final_array_index_final_string_final_array []string\n    var str1_vowels_reversed_string_final_array_index_final_string_final_array_index_final_string_final_array_index int\n    var str1_vowels_reversed_string_final_array_index_final_string_final_array_index_final_string_final_array_index_final int\n    var str1_vowels_",
    "    str2 := []rune(str1)\n    var i, j int = 0, len(str2) - 1\n    for i < j {\n        if is_vowel(str2[i]) && is_vowel(str2[j]) {\n            str2[i], str2[j] = str2[j], str2[i]\n            i++\n            j--\n        } else if is_vowel(str2[i]) {\n            j--\n        } else {\n            i++\n        }\n    }\n    return string(str2)\n}\n",
    "    // Create a map of vowels\n    vowels := map[string]string{\"a\": \"a\", \"e\": \"e\", \"i\": \"i\", \"o\": \"o\", \"u\": \"u\"}\n    // Create a slice of the string\n    str1_slice := []string{}\n    // Create a slice of the vowels\n    vowels_slice := []string{}\n    // Create a slice of the reversed vowels\n    reversed_vowels_slice := []string{}\n    // Create a slice of the reversed string\n    reversed_str1_slice := []string{}\n    // Create a slice of the reversed string\n    reversed_str1 := \"\"\n    // Loop through the string\n    for _, char := range str1 {\n        // Append the string to the string slice\n        str1_slice = append(str1_slice, string(char))\n        // Check if the string is a vowel\n        if _, ok := vowels[string(char)]; ok {\n            // Append the vowel to the vowels slice\n            vowels_slice = append(vowels_slice, string(char))\n        }\n    }\n    // Reverse the vowels slice\n    for i := len(vowels_slice) - 1; i >= 0; i-- {\n        reversed_vowels_slice = append(reversed_vowels_slice, vowels_slice[i])\n    }\n    // Loop through the string slice\n    for _, char := range str1_slice {\n        // Check if the string is a vowel\n        if _, ok := vowels[string(char)]; ok {\n            // Append the reversed vowel to the reversed string slice\n            reversed_str1_slice = append(reversed_str1_slice, reversed_vowels_slice[0])\n            // Remove the vowel from the reversed vowels slice\n            reversed_vowels_slice = reversed_vowels_slice[1:]\n        } else {\n            // Append the string to the reversed string slice\n            reversed_str1_slice = append(reversed_str1_slice, string(char))\n        }\n    }\n    // Loop through the reversed string slice\n    for",
    "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var str2 string\n    var str3 string\n    var str4 string\n    var str5 string\n    var str6 string\n    var str7 string\n    var str8 string\n    var str9 string\n    var str10 string\n    var str11 string\n    var str12 string\n    var str13 string\n    var str14 string\n    var str15 string\n    var str16 string\n    var str17 string\n    var str18 string\n    var str19 string\n    var str20 string\n    var str21 string\n    var str22 string\n    var str23 string\n    var str24 string\n    var str25 string\n    var str26 string\n    var str27 string\n    var str28 string\n    var str29 string\n    var str30 string\n    var str31 string\n    var str32 string\n    var str33 string\n    var str34 string\n    var str35 string\n    var str36 string\n    var str37 string\n    var str38 string\n    var str39 string\n    var str40 string\n    var str41 string\n    var str42 string\n    var str43 string\n    var str44 string\n    var str45 string\n    var str46 string\n    var str47 string\n    var str48 string\n    var str49 string\n    var str50 string\n    var str51 string\n    var str52 string\n    var str53 string\n    var str54 string\n    var str55 string\n    var str56 string\n    var str57 string\n    var str58 string\n    var str59 string\n    var str60 string\n    var str61 string\n    var str62 string\n    var str63 string\n    var str64 string\n    var str65 string\n    var str66 string\n    var str67 string\n    var str68 string\n    var str69 string\n    var str70 string\n    var str71 string\n    var str72 string\n    var str73 string\n    var str74 string\n    var str75 string\n    var str76 string\n    var str77 string\n    var str78 string\n    var str79 string\n    var str80 string\n    var str81 string\n    var str82 string\n    var"
  ]
}