{
  "name": "mbpp_579_find_dissimilar",
  "language": "go_test.go",
  "prompt": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpi4a_u9up_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            ret = append(ret, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            ret = append(ret, val)\n        }\n    }\n    return ret\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp17u3kx0e_test.go:12:13: undefined: contains\n/tmp/tmp17u3kx0e_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp133cfncj_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdl9ei6y_test.go:12:13: undefined: contains\n/tmp/tmprdl9ei6y_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2ttzxqzv_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpd1j5c4ft_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        for _, val2 := range test_tup2 {\n            if val1 != val2 {\n                dissimilar = append(dissimilar, val1)\n            }\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpp9fhwqfg_test.go:36: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=6) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpp9fhwqfg_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=1) %!s(int=1) %!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpp9fhwqfg_test.go:36: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=21) %!s(int=21) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=11) %!s(int=25) %!s(int=25) %!s(int=25) %!s(int=25) %!s(int=26) %!s(int=26) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp5o48befd_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmppey0_gex_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, elem1 := range test_tup1 {\n        if !contains(test_tup2, elem1) {\n            dissimilar_list = append(dissimilar_list, elem1)\n        }\n    }\n    for _, elem2 := range test_tup2 {\n        if !contains(test_tup1, elem2) {\n            dissimilar_list = append(dissimilar_list, elem2)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpec4y1tgv_test.go:12:13: undefined: contains\n/tmp/tmpec4y1tgv_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdl9ei6y_test.go:12:13: undefined: contains\n/tmp/tmprdl9ei6y_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            ret = append(ret, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzr_1poj1_test.go:12:13: undefined: contains\n/tmp/tmpzr_1poj1_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpi4a_u9up_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var res []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            res = append(res, test_tup1[i])\n        }\n    }\n    return res\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpp96kzj0t_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpp96kzj0t_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpp96kzj0t_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !in_tuple(v, test_tup2) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !in_tuple(v, test_tup1) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ybutb8__test.go:12:13: undefined: in_tuple\n/tmp/tmp3ybutb8__test.go:17:13: undefined: in_tuple\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpu7fs30sn_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpu7fs30sn_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpu7fs30sn_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val2)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp_rm_7zot_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v1 := range test_tup2 {\n        found := false\n        for _, v2 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmppxa2uocf_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var res []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            res = append(res, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            res = append(res, v2)\n        }\n    }\n    return res\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpsmwgqbq9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret_tup []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            ret_tup = append(ret_tup, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            ret_tup = append(ret_tup, val)\n        }\n    }\n    return ret_tup\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2d7dwqm_test.go:12:13: undefined: contains\n/tmp/tmpg2d7dwqm_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            dissimilar = append(dissimilar, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            dissimilar = append(dissimilar, val)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7k659cj3_test.go:12:13: undefined: contains\n/tmp/tmp7k659cj3_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdl9ei6y_test.go:12:13: undefined: contains\n/tmp/tmprdl9ei6y_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdl9ei6y_test.go:12:13: undefined: contains\n/tmp/tmprdl9ei6y_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpi4a_u9up_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp6euvie_c_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp6euvie_c_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp6euvie_c_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        if !contains(test_tup2, v1) {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        if !contains(test_tup1, v2) {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaeguui9i_test.go:12:13: undefined: contains\n/tmp/tmpaeguui9i_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdl9ei6y_test.go:12:13: undefined: contains\n/tmp/tmprdl9ei6y_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            dissimilar = append(dissimilar, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            dissimilar = append(dissimilar, v)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmtic_wtm_test.go:12:13: undefined: contains\n/tmp/tmpmtic_wtm_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            ret = append(ret, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzr_1poj1_test.go:12:13: undefined: contains\n/tmp/tmpzr_1poj1_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdl9ei6y_test.go:12:13: undefined: contains\n/tmp/tmprdl9ei6y_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp5o48befd_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpnwsf3_59_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpi4a_u9up_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, i := range test_tup1 {\n        found := false\n        for _, j := range test_tup2 {\n            if i == j {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, i)\n        }\n    }\n    for _, i := range test_tup2 {\n        found := false\n        for _, j := range test_tup1 {\n            if i == j {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpvrk2bdjm_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp6euvie_c_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp6euvie_c_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp6euvie_c_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2ttzxqzv_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmppey0_gex_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var is_in_tup2 bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                is_in_tup2 = true\n                break\n            }\n        }\n        if is_in_tup2 == false {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpmyf4x80k_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpmyf4x80k_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpmyf4x80k_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2ttzxqzv_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpskzogxj5_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdl9ei6y_test.go:12:13: undefined: contains\n/tmp/tmprdl9ei6y_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, elem1 := range test_tup1 {\n        found := false\n        for _, elem2 := range test_tup2 {\n            if elem1 == elem2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, elem1)\n        }\n    }\n    for _, elem2 := range test_tup2 {\n        found := false\n        for _, elem1 := range test_tup1 {\n            if elem2 == elem1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, elem2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp9s2oyp7b_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            dissimilar = append(dissimilar, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            dissimilar = append(dissimilar, val)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7k659cj3_test.go:12:13: undefined: contains\n/tmp/tmp7k659cj3_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpjd2l7ifh_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpjd2l7ifh_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpjd2l7ifh_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpskzogxj5_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            ret = append(ret, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            ret = append(ret, val)\n        }\n    }\n    return ret\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp17u3kx0e_test.go:12:13: undefined: contains\n/tmp/tmp17u3kx0e_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2ttzxqzv_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2ttzxqzv_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpi4a_u9up_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpqfpcyxkh_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        if !contains(test_tup2, v1) {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        if !contains(test_tup1, v2) {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaeguui9i_test.go:12:13: undefined: contains\n/tmp/tmpaeguui9i_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, item := range test_tup1 {\n        if !contains(test_tup2, item) {\n            dissimilar_list = append(dissimilar_list, item)\n        }\n    }\n    for _, item := range test_tup2 {\n        if !contains(test_tup1, item) {\n            dissimilar_list = append(dissimilar_list, item)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgmd6uen2_test.go:12:13: undefined: contains\n/tmp/tmpgmd6uen2_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpjd2l7ifh_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpjd2l7ifh_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpjd2l7ifh_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpt_qrvvxt_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpnwsf3_59_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdl9ei6y_test.go:12:13: undefined: contains\n/tmp/tmprdl9ei6y_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp11495svf_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp11495svf_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp11495svf_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpt_qrvvxt_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmppey0_gex_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpqfpcyxkh_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v1 := range test_tup2 {\n        var found bool = false\n        for _, v2 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp31n81u7w_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, item1 := range test_tup1 {\n        found := false\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, item1)\n        }\n    }\n    for _, item2 := range test_tup2 {\n        found := false\n        for _, item1 := range test_tup1 {\n            if item2 == item1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, item2)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpjd0qy77a_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, item1 := range test_tup1 {\n        found := false\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item1)\n        }\n    }\n    for _, item2 := range test_tup2 {\n        found := false\n        for _, item1 := range test_tup1 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpho_79e1m_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        is_dissimilar := true\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                is_dissimilar = false\n                break\n            }\n        }\n        if is_dissimilar {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpxx01ho4v_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpxx01ho4v_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpxx01ho4v_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v1 := range test_tup2 {\n        var found bool = false\n        for _, v2 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp31n81u7w_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, elem := range test_tup1 {\n        if !is_in_list(elem, test_tup2) {\n            result = append(result, elem)\n        }\n    }\n    for _, elem := range test_tup2 {\n        if !is_in_list(elem, test_tup1) {\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb46qyv5k_test.go:12:13: undefined: is_in_list\n/tmp/tmpb46qyv5k_test.go:17:13: undefined: is_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, item1 := range test_tup1 {\n        found := false\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, item1)\n        }\n    }\n    for _, item2 := range test_tup2 {\n        found := false\n        for _, item1 := range test_tup1 {\n            if item2 == item1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, item2)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp51t61mjv_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var res []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            res = append(res, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            res = append(res, val)\n        }\n    }\n    return res\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122781,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo6qg3f0__test.go:12:13: undefined: contains\n/tmp/tmpo6qg3f0__test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val2)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp9a69paeh_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        if !contains(test_tup2, val1) {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        if !contains(test_tup1, val2) {\n            dissimilar = append(dissimilar, val2)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122781,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp25smcq_1_test.go:12:13: undefined: contains\n/tmp/tmp25smcq_1_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdl9ei6y_test.go:12:13: undefined: contains\n/tmp/tmprdl9ei6y_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret_tup []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            ret_tup = append(ret_tup, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            ret_tup = append(ret_tup, val2)\n        }\n    }\n    return ret_tup\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1o6pylg1_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpqfpcyxkh_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val1 := range test_tup2 {\n        var found bool\n        for _, val2 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmprj32zfxv_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp6euvie_c_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp6euvie_c_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp6euvie_c_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        if !contains(test_tup2, val1) {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        if !contains(test_tup1, val2) {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122781,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_em80ydn_test.go:12:13: undefined: contains\n/tmp/tmp_em80ydn_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpt_qrvvxt_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, item1 := range test_tup1 {\n        var found bool = false\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item1)\n        }\n    }\n    for _, item2 := range test_tup2 {\n        var found bool = false\n        for _, item1 := range test_tup1 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpxj84z4vb_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !is_in(val, test_tup2) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !is_in(val, test_tup1) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122781,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6n7u4x7n_test.go:12:13: undefined: is_in\n/tmp/tmp6n7u4x7n_test.go:17:13: undefined: is_in\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                break\n            }\n            if v2 == test_tup2[len(test_tup2) - 1] {\n                result = append(result, v1)\n            }\n        }\n    }\n    for _, v2 := range test_tup2 {\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                break\n            }\n            if v1 == test_tup1[len(test_tup1) - 1] {\n                result = append(result, v2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp1keo5bu0_test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, elem1 := range test_tup1 {\n        found := false\n        for _, elem2 := range test_tup2 {\n            if elem1 == elem2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, elem1)\n        }\n    }\n    for _, elem2 := range test_tup2 {\n        found := false\n        for _, elem1 := range test_tup1 {\n            if elem2 == elem1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar_list = append(dissimilar_list, elem2)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpr_euymi9_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2ttzxqzv_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            ret = append(ret, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            ret = append(ret, v2)\n        }\n    }\n    return ret\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpobq6_iy8_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpskzogxj5_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, elem := range test_tup1 {\n        if !contains(test_tup2, elem) {\n            result = append(result, elem)\n        }\n    }\n    for _, elem := range test_tup2 {\n        if !contains(test_tup1, elem) {\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122781,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp82m3vshz_test.go:12:13: undefined: contains\n/tmp/tmp82m3vshz_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, v1 := range test_tup1 {\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                break\n            }\n            if v2 == test_tup2[len(test_tup2)-1] {\n                dissimilar = append(dissimilar, v1)\n            }\n        }\n    }\n    for _, v2 := range test_tup2 {\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                break\n            }\n            if v1 == test_tup1[len(test_tup1)-1] {\n                dissimilar = append(dissimilar, v2)\n            }\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp7cqav96m_test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpjd2l7ifh_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpjd2l7ifh_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpjd2l7ifh_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpqfpcyxkh_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            dissimilar = append(dissimilar, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            dissimilar = append(dissimilar, val)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7k659cj3_test.go:12:13: undefined: contains\n/tmp/tmp7k659cj3_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2ttzxqzv_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, elem := range test_tup1 {\n        if !contains(test_tup2, elem) {\n            result = append(result, elem)\n        }\n    }\n    for _, elem := range test_tup2 {\n        if !contains(test_tup1, elem) {\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122781,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp82m3vshz_test.go:12:13: undefined: contains\n/tmp/tmp82m3vshz_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_tup1 {\n        if !is_in(item, test_tup2) {\n            result = append(result, item)\n        }\n    }\n    for _, item := range test_tup2 {\n        if !is_in(item, test_tup1) {\n            result = append(result, item)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122781,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm6j9ss2e_test.go:12:13: undefined: is_in\n/tmp/tmpm6j9ss2e_test.go:17:13: undefined: is_in\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, i := range test_tup1 {\n        if !contains(test_tup2, i) {\n            result = append(result, i)\n        }\n    }\n    for _, i := range test_tup2 {\n        if !contains(test_tup1, i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122781,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph3awquup_test.go:12:13: undefined: contains\n/tmp/tmph3awquup_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmppey0_gex_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdl9ei6y_test.go:12:13: undefined: contains\n/tmp/tmprdl9ei6y_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        if !contains(test_tup2, v1) {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        if !contains(test_tup1, v2) {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaeguui9i_test.go:12:13: undefined: contains\n/tmp/tmpaeguui9i_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpqfpcyxkh_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val2)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp80zij0sw_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, i := range test_tup1 {\n        if !contains(test_tup2, i) {\n            result = append(result, i)\n        }\n    }\n    for _, i := range test_tup2 {\n        if !contains(test_tup1, i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122781,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph3awquup_test.go:12:13: undefined: contains\n/tmp/tmph3awquup_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, elem1 := range test_tup1 {\n        var found bool = false\n        for _, elem2 := range test_tup2 {\n            if elem1 == elem2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, elem1)\n        }\n    }\n    for _, elem2 := range test_tup2 {\n        var found bool = false\n        for _, elem1 := range test_tup1 {\n            if elem2 == elem1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, elem2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpgg3a2l0w_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpqfpcyxkh_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !in_tup(v, test_tup2) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !in_tup(v, test_tup1) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122781,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw301da4s_test.go:12:13: undefined: in_tup\n/tmp/tmpw301da4s_test.go:17:13: undefined: in_tup\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp4q4yndz4_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp4q4yndz4_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp4q4yndz4_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpqfpcyxkh_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdl9ei6y_test.go:12:13: undefined: contains\n/tmp/tmprdl9ei6y_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpqfpcyxkh_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpt_qrvvxt_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !is_in(val, test_tup2) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !is_in(val, test_tup1) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122781,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6n7u4x7n_test.go:12:13: undefined: is_in\n/tmp/tmp6n7u4x7n_test.go:17:13: undefined: is_in\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdl9ei6y_test.go:12:13: undefined: contains\n/tmp/tmprdl9ei6y_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpi4a_u9up_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdl9ei6y_test.go:12:13: undefined: contains\n/tmp/tmprdl9ei6y_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpi4a_u9up_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var res []interface{}\n    for _, v := range test_tup1 {\n        if !in_list(test_tup2, v) {\n            res = append(res, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !in_list(test_tup1, v) {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122781,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgp6eci29_test.go:12:13: undefined: in_list\n/tmp/tmpgp6eci29_test.go:17:13: undefined: in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        if !contains(test_tup2, val1) {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        if !contains(test_tup1, val2) {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122781,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_em80ydn_test.go:12:13: undefined: contains\n/tmp/tmp_em80ydn_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            ret = append(ret, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            ret = append(ret, v2)\n        }\n    }\n    return ret\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpuas3a8qm_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret_tup []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            ret_tup = append(ret_tup, val1)\n        }\n    }\n    for _, val1 := range test_tup2 {\n        found := false\n        for _, val2 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            ret_tup = append(ret_tup, val1)\n        }\n    }\n    return ret_tup\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp0qsnc5um_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val1 := range test_tup2 {\n        var found bool = false\n        for _, val2 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122783,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp7pgkjixz_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            ret = append(ret, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzr_1poj1_test.go:12:13: undefined: contains\n/tmp/tmpzr_1poj1_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, item1 := range test_tup1 {\n        found := false\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item1)\n        }\n    }\n    for _, item2 := range test_tup2 {\n        found := false\n        for _, item1 := range test_tup1 {\n            if item2 == item1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122783,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpqelf70hn_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp5o48befd_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpu7fs30sn_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpu7fs30sn_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpu7fs30sn_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                break\n            }\n            if v2 == test_tup2[len(test_tup2)-1] {\n                result = append(result, v1)\n            }\n        }\n    }\n    for _, v2 := range test_tup2 {\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                break\n            }\n            if v1 == test_tup1[len(test_tup1)-1] {\n                result = append(result, v2)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122783,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpvjkvcw7c_test.go:49: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp6euvie_c_test.go:34: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp6euvie_c_test.go:34: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp6euvie_c_test.go:34: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            dissimilar = append(dissimilar, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            dissimilar = append(dissimilar, v)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmtic_wtm_test.go:12:13: undefined: contains\n/tmp/tmpmtic_wtm_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, elem := range test_tup1 {\n        if !contains(test_tup2, elem) {\n            dissimilar_list = append(dissimilar_list, elem)\n        }\n    }\n    for _, elem := range test_tup2 {\n        if !contains(test_tup1, elem) {\n            dissimilar_list = append(dissimilar_list, elem)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122783,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb3unb8j__test.go:12:13: undefined: contains\n/tmp/tmpb3unb8j__test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v2 == v1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmppey0_gex_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpi4a_u9up_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpi4a_u9up_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpi4a_u9up_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2ttzxqzv_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        var found bool = false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122783,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpxrmsnn0q_test.go:51: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val2)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122783,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp7hq6gaa2_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar_list []interface{}\n    for _, elem1 := range test_tup1 {\n        var is_dissimilar bool = true\n        for _, elem2 := range test_tup2 {\n            if elem1 == elem2 {\n                is_dissimilar = false\n                break\n            }\n        }\n        if is_dissimilar {\n            dissimilar_list = append(dissimilar_list, elem1)\n        }\n    }\n    return dissimilar_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122783,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp4vo1sh65_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp4vo1sh65_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp4vo1sh65_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val2)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122783,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp8x52zcn5_test.go:51: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpskzogxj5_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        found := false\n        for _, v1 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmptnglkysk_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        if !contains(test_tup2, v1) {\n            result = append(result, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        if !contains(test_tup1, v2) {\n            result = append(result, v2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaeguui9i_test.go:12:13: undefined: contains\n/tmp/tmpaeguui9i_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, item1 := range test_tup1 {\n        found := false\n        for _, item2 := range test_tup2 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item1)\n        }\n    }\n    for _, item2 := range test_tup2 {\n        found := false\n        for _, item1 := range test_tup1 {\n            if item1 == item2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, item2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpho_79e1m_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        found := false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, v1)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmpu7fs30sn_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmpu7fs30sn_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpu7fs30sn_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp5o48befd_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !is_in_list(v, test_tup2) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !is_in_list(v, test_tup1) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122783,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpprunhfl5_test.go:12:13: undefined: is_in_list\n/tmp/tmpprunhfl5_test.go:17:13: undefined: is_in_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, i := range test_tup1 {\n        if !contains(test_tup2, i) {\n            result = append(result, i)\n        }\n    }\n    for _, i := range test_tup2 {\n        if !contains(test_tup1, i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122781,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph3awquup_test.go:12:13: undefined: contains\n/tmp/tmph3awquup_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        if !contains(test_tup2, val) {\n            result = append(result, val)\n        }\n    }\n    for _, val := range test_tup2 {\n        if !contains(test_tup1, val) {\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ryyv75j_test.go:12:13: undefined: contains\n/tmp/tmp3ryyv75j_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2ttzxqzv_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp2ttzxqzv_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        var found bool = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        var found bool = false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp5o48befd_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var res []interface{}\n    for _, v1 := range test_tup1 {\n        if !contains(test_tup2, v1) {\n            res = append(res, v1)\n        }\n    }\n    for _, v2 := range test_tup2 {\n        if !contains(test_tup1, v2) {\n            res = append(res, v2)\n        }\n    }\n    return res\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122783,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg11x_tmg_test.go:12:13: undefined: contains\n/tmp/tmpg11x_tmg_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, elem := range test_tup1 {\n        if !contains(test_tup2, elem) {\n            result = append(result, elem)\n        }\n    }\n    for _, elem := range test_tup2 {\n        if !contains(test_tup1, elem) {\n            result = append(result, elem)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122781,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp82m3vshz_test.go:12:13: undefined: contains\n/tmp/tmp82m3vshz_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        if !contains(test_tup2, v) {\n            result = append(result, v)\n        }\n    }\n    for _, v := range test_tup2 {\n        if !contains(test_tup1, v) {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdl9ei6y_test.go:12:13: undefined: contains\n/tmp/tmprdl9ei6y_test.go:17:13: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] != test_tup2[i] {\n            result = append(result, test_tup1[i])\n        }\n    }\n\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122783,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmppinibx5v_test.go:36: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmppinibx5v_test.go:36: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmppinibx5v_test.go:36: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=21) %!s(int=11) %!s(int=25) %!s(int=26)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val2)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp80zij0sw_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpi4a_u9up_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret_list []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            ret_list = append(ret_list, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            ret_list = append(ret_list, val2)\n        }\n    }\n    return ret_list\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122783,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp9a51lrw1_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var dissimilar []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            dissimilar = append(dissimilar, val1)\n        }\n    }\n    return dissimilar\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122782,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__0 (0.00s)\n        tmp4q4yndz4_test.go:41: expected '[%!s(int=3) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=6)]'\n    --- FAIL: TestFind_Dissimilar/test_num__1 (0.00s)\n        tmp4q4yndz4_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=7) %!s(int=9)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp4q4yndz4_test.go:41: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var found bool\n    for _, val1 := range test_tup1 {\n        found = false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found = false\n        for _, val1 := range test_tup1 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122783,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmp9vb9yfal_test.go:54: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val1 := range test_tup1 {\n        found := false\n        for _, val2 := range test_tup2 {\n            if val1 == val2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val1)\n        }\n    }\n    for _, val2 := range test_tup2 {\n        found := false\n        for _, val1 := range test_tup1 {\n            if val2 == val1 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, val2)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509954,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpi4a_u9up_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var ret []interface{}\n    for _, v1 := range test_tup1 {\n        var found bool = false\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            ret = append(ret, v1)\n        }\n    }\n    for _, v1 := range test_tup2 {\n        var found bool = false\n        for _, v2 := range test_tup1 {\n            if v1 == v2 {\n                found = true\n                break\n            }\n        }\n        if !found {\n            ret = append(ret, v1)\n        }\n    }\n    return ret\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122783,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpqwn5w8vn_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_dissimilar_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the dissimilar elements in the given two lists.\nfunc find_dissimilar(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, i := range test_tup1 {\n        found := false\n        for _, j := range test_tup2 {\n            if i == j {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, i)\n        }\n    }\n    for _, i := range test_tup2 {\n        found := false\n        for _, j := range test_tup1 {\n            if i == j {\n                found = true\n                break\n            }\n        }\n        if !found {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n\nfunc TestFind_Dissimilar(t *testing.T) {\n  candidate := find_dissimilar\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{7, 2, 3, 9}), expected: []interface{}{1, 4, 7, 9} },\n     { actual: candidate([]interface{}{21, 11, 25, 26}, []interface{}{26, 34, 21, 36}), expected: []interface{}{34, 36, 11, 25} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122779,
      "stdout": "--- FAIL: TestFind_Dissimilar (0.00s)\n    --- FAIL: TestFind_Dissimilar/test_num__2 (0.00s)\n        tmpvrk2bdjm_test.go:53: expected '[%!s(int=34) %!s(int=36) %!s(int=11) %!s(int=25)]', got '[%!s(int=11) %!s(int=25) %!s(int=34) %!s(int=36)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}