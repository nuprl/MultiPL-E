{
  "name": "mbpp_282_sub_list",
  "language": "go_test.go",
  "prompt": "package sub_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to subtract two lists element-wise.\nfunc sub_list(nums1 []int, nums2 []int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSub_List(t *testing.T) {\n  candidate := sub_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}, []int{4, 5, 6}), expected: []int{-3, -3, -3} },\n     { actual: candidate([]int{1, 2}, []int{3, 4}), expected: []int{-2, -2} },\n     { actual: candidate([]int{90, 120}, []int{50, 70}), expected: []int{40, 50} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []int\n    for i, _ := range nums1 {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i, v := range nums1 {\n        result[i] = v - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    if len(nums1) != len(nums2) {\n        return result\n    }\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must have the same length\")\n    }\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 should have the same length\")\n    }\n    res := make([]int, len(nums1))\n    for i, v := range nums1 {\n        res[i] = v - nums2[i]\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    var res []int\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, nums1[i] - nums2[i])\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    if len(nums1) != len(nums2) {\n        return result\n    }\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n\n    res := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i, _ := range nums1 {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return []int{}\n    }\n    result := make([]int, len(nums1))\n    for i, num := range nums1 {\n        result[i] = num - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must have the same length\")\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n\n    result := make([]int, len(nums1))\n    for i, v := range nums1 {\n        result[i] = v - nums2[i]\n    }\n\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i, v := range nums1 {\n        res[i] = v - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var nums []int\n    for i, _ := range nums1 {\n        nums = append(nums, nums1[i] - nums2[i])\n    }\n    return nums\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i, _ := range nums1 {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i, _ := range nums1 {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    for i := 0; i < len(nums1); i++ {\n        nums1[i] -= nums2[i]\n    }\n    return nums1\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i, v := range nums1 {\n        result = append(result, v - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i, _ := range nums1 {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    var res []int\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, nums1[i] - nums2[i])\n    }\n    return res\n}\n",
    "    var res []int\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, nums1[i] - nums2[i])\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var ret []int\n    for i := 0; i < len(nums1); i++ {\n        ret = append(ret, nums1[i] - nums2[i])\n    }\n    return ret\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must have the same length\")\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n\n    return result\n}\n",
    "    var nums []int\n    for i := 0; i < len(nums1); i++ {\n        nums = append(nums, nums1[i] - nums2[i])\n    }\n    return nums\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return []int{}\n    }\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i, _ := range nums1 {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return []int{}\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var nums []int\n    for i := 0; i < len(nums1); i++ {\n        nums = append(nums, nums1[i] - nums2[i])\n    }\n    return nums\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, nums1[i] - nums2[i])\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i, v := range nums1 {\n        res[i] = v - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, nums1[i] - nums2[i])\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i, _ := range nums1 {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"Length of two lists are not equal\")\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    for i, _ := range nums1 {\n        nums1[i] -= nums2[i]\n    }\n    return nums1\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i, v := range nums1 {\n        res[i] = v - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var nums3 []int\n    for i := 0; i < len(nums1); i++ {\n        nums3 = append(nums3, nums1[i] - nums2[i])\n    }\n    return nums3\n}\n",
    "    var result []int\n    if len(nums1) != len(nums2) {\n        return result\n    }\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var ret []int\n    for i := 0; i < len(nums1); i++ {\n        ret = append(ret, nums1[i] - nums2[i])\n    }\n    return ret\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must have the same length\")\n    }\n\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i, _ := range nums1 {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var res []int\n    for i := 0; i < len(nums1); i++ {\n        res = append(res, nums1[i] - nums2[i])\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i, v := range nums1 {\n        res[i] = v - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        panic(\"nums1 and nums2 must have the same length\")\n    }\n    res := make([]int, len(nums1))\n    for i, v := range nums1 {\n        res[i] = v - nums2[i]\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i, _ := range nums1 {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i, _ := range nums1 {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(nums1); i++ {\n        result = append(result, nums1[i] - nums2[i])\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    res := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        res[i] = nums1[i] - nums2[i]\n    }\n    return res\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n",
    "    if len(nums1) != len(nums2) {\n        return nil\n    }\n    result := make([]int, len(nums1))\n    for i := 0; i < len(nums1); i++ {\n        result[i] = nums1[i] - nums2[i]\n    }\n    return result\n}\n"
  ]
}