{
  "name": "mbpp_740_tuple_to_dict",
  "language": "go_test.go",
  "prompt": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given list to a key-value map using adjacent elements. https://www.geeksforgeeks.org/gothon-convert-list-to-adjacent-pair-map/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "reworded",
  "tests": "func TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n",
    "    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n",
    "    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n",
    "    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n",
    "    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n",
    "    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n",
    "    var dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n",
    "    var result = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return result\n}\n",
    "    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n",
    "    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n",
    "    var output_dict map[int]int\n    output_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        output_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return output_dict\n}\n",
    "    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n",
    "    // Create a new map\n    test_dict := make(map[int]int)\n    // Iterate through the list\n    for i := 0; i < len(test_tup); i += 2 {\n        // Add the tuple to the map\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    // Return the map\n    return test_dict\n}\n",
    "    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n",
    "    var result = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return result\n}\n",
    "    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n",
    "    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n",
    "    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n",
    "    var result = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return result\n}\n",
    "    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n"
  ]
}