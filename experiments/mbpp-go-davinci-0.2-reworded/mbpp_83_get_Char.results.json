{
  "name": "mbpp_83_get_Char",
  "language": "go_test.go",
  "prompt": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py",
  "prompt_terminology": "reworded",
  "tests": "func TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, i := range strr {\n        sum += int(i)\n    }\n    return string(sum % 26)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpnq8un0eu_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, ch := range strr {\n        sum += int(ch)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpjb1x0del_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 'a')\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpfwa6bi4p_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    sum = sum % 26\n    return string(sum + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpk6mwnpz4_test.go:15:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpqrw8jr1r_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp3dubzjbi_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19n_y8m6_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    var res string\n    for _, v := range strr {\n        sum += int(v)\n    }\n    sum = sum % 26\n    res = string(sum + 97)\n    return res\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp0o7ea7zk_test.go:16:11: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    var str string\n    for i := 0; i < len(strr); i++ {\n        sum += int(strr[i])\n    }\n    sum = sum % 26\n    str = string(sum + 65)\n    return str\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp1hw7qofr_test.go:16:11: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int = 0\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp8mhw5m3b_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpqrw8jr1r_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum%26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpn4zsdtg9_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpqrw8jr1r_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, ch := range strr {\n        sum += int(ch)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpjb1x0del_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 'a')\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpfwa6bi4p_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    sum = sum % 26\n    return string(sum + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp7w6kn8fq_test.go:15:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int = 0\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp95eghba8_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, ch := range strr {\n        sum += int(ch)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpjb1x0del_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, c := range strr {\n        sum += int(c)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp075u1cew_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum%26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmphu47cbxo_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, ch := range strr {\n        sum += int(ch)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp1yee3ne8_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpqrw8jr1r_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpqrw8jr1r_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpqrw8jr1r_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp3dubzjbi_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for i := 0; i < len(strr); i++ {\n        sum += int(strr[i])\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpssyom9x5_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp3dubzjbi_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    sum = sum % 26\n    return string(sum + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp7w6kn8fq_test.go:15:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum%26 + 'a')\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpdzpxojot_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpqrw8jr1r_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, c := range strr {\n        sum += int(c)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpnx6rcls__test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, c := range strr {\n        sum += int(c)\n    }\n    return string(sum % 26 + 'a')\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp3rsrsykv_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, c := range strr {\n        sum += int(c)\n    }\n    return string(sum % 26 + int('a'))\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbovn6z_q_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp3dubzjbi_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    sum = sum % 26\n    return string(sum + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpw3fp0q3d_test.go:15:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for i := 0; i < len(strr); i++ {\n        sum += int(strr[i])\n    }\n    sum = sum % 26\n    return string(sum + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpfecq3a5l_test.go:15:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, ch := range strr {\n        sum += int(ch)\n    }\n    return string(sum % 26 + 'A')\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpcssny3_b_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for i := 0; i < len(strr); i++ {\n        sum += int(strr[i])\n    }\n    sum = sum % 26\n    return string(sum + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpfecq3a5l_test.go:15:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int = 0\n    for _, i := range strr {\n        sum += int(i)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpr1bgrp8y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpqrw8jr1r_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp3dubzjbi_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, c := range strr {\n        sum += int(c)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpnx6rcls__test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, c := range strr {\n        sum += int(c)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp075u1cew_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp3dubzjbi_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for i := 0; i < len(strr); i++ {\n        sum += int(strr[i])\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpssyom9x5_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    sum %= 26\n    return string(sum + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpooku6_l1_test.go:15:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 'A')\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsx04d3cr_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, i := range strr {\n        sum += int(i)\n    }\n    return string(sum % 26 + 'a')\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpj2p65uk0_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum%26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmphu47cbxo_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var str string\n    var sum int\n    for i := 0; i < len(strr); i++ {\n        sum += int(strr[i])\n    }\n    sum = sum % 26\n    str = string(sum + 97)\n    return str\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp2qgqernt_test.go:16:11: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpqrw8jr1r_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum%26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpn4zsdtg9_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, i := range strr {\n        sum += int(i)\n    }\n    return string(sum % 26)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpnq8un0eu_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    sum = sum % 26\n    return string(sum + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpw3fp0q3d_test.go:15:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, ch := range strr {\n        sum += int(ch)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp1yee3ne8_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, ch := range strr {\n        sum += int(ch)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpjb1x0del_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum%26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmphu47cbxo_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var str string\n    var sum int\n    for i := 0; i < len(strr); i++ {\n        sum += int(strr[i])\n    }\n    sum = sum % 26\n    str = string(sum + 65)\n    return str\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123800,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp4s82ke7m_test.go:16:11: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19n_y8m6_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 'a')\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpfwa6bi4p_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 'a')\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpfwa6bi4p_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmp19j3do0y_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, v := range strr {\n        sum += int(v)\n    }\n    return string(sum % 26 + 97)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpbgxgnoku_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_Char_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\nfunc get_Char(strr string) string {\n    var sum int\n    for _, char := range strr {\n        sum += int(char)\n    }\n    return string(sum % 26 + 65)\n}\n\nfunc TestGet_Char(t *testing.T) {\n  candidate := get_Char\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: \"f\" },\n     { actual: candidate(\"gfg\"), expected: \"t\" },\n     { actual: candidate(\"ab\"), expected: \"c\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509677,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test\n/tmp/tmpsaflfzy2_test.go:14:12: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}