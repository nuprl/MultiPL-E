{
  "name": "mbpp_252_convert",
  "language": "go_test.go",
  "prompt": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py",
  "prompt_terminology": "reworded",
  "tests": "func TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    return []interface{}{numbers, numbers}\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n"
  ]
}