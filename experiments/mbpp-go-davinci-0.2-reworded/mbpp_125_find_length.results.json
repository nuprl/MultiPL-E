{
  "name": "mbpp_125_find_length",
  "language": "go_test.go",
  "prompt": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if count_0 + count_1 > max_diff {\n                max_diff = count_0 + count_1\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmppy2y9pew_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmppy2y9pew_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmppy2y9pew_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count--\n        } else {\n            count++\n        }\n        if count > max {\n            max = count\n        }\n        if count < 0 {\n            count = 0\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpefgt_3r0_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpefgt_3r0_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpefgt_3r0_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if count_0 + count_1 > max_diff {\n                max_diff = count_0 + count_1\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmppy2y9pew_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmppy2y9pew_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmppy2y9pew_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count--\n        } else {\n            count++\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp9jctv2xq_test.go:40: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp9jctv2xq_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp9jctv2xq_test.go:40: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    max_diff := 0\n    count_1 := 0\n    count_0 := 0\n    for _, c := range myString {\n        if c == '1' {\n            count_1 += 1\n        } else {\n            count_0 += 1\n        }\n        if count_1 == count_0 {\n            diff := count_1 - count_0\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpuwq5qajs_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpuwq5qajs_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpuwq5qajs_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count0, count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if maxDiff < count0 {\n                maxDiff = count0\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpjdc1rhho_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpjdc1rhho_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0, count_1 int = 0, 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpqmv2nt48_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpqmv2nt48_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    for _, char := range myString {\n        if char == '0' {\n            diff--\n        } else {\n            diff++\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2pj4xhxj_test.go:40: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp2pj4xhxj_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2pj4xhxj_test.go:40: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n\n        if count_0 == count_1 {\n            if count_0 + count_1 > max_diff {\n                max_diff = count_0 + count_1\n            }\n        }\n    }\n\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpceog96zm_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpceog96zm_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpceog96zm_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_1 int = 0\n    var count_0 int = 0\n    var i int = 0\n    var j int = 0\n    for i = 0; i < len(myString); i++ {\n        count_1 = 0\n        count_0 = 0\n        for j = i; j < len(myString); j++ {\n            if myString[j] == '1' {\n                count_1++\n            } else {\n                count_0++\n            }\n            if count_1 - count_0 > max_diff {\n                max_diff = count_1 - count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpxeh3llxi_test.go:47: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpxeh3llxi_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpxeh3llxi_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    var diff int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff = count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp21apzr4b_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp21apzr4b_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp21apzr4b_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if count_zero + count_one > max_diff {\n                max_diff = count_zero + count_one\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp9qsr87i2_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp9qsr87i2_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp9qsr87i2_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count1, count0 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n        if count1 == count0 {\n            if maxDiff < count1 {\n                maxDiff = count1\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpbfao9501_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpbfao9501_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var zeroCount int\n    var oneCount int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            if maxDiff < zeroCount {\n                maxDiff = zeroCount\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpgrr94p45_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpgrr94p45_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpl8liiq4k_test.go:46: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpl8liiq4k_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var count_0, count_1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff := count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpk1vvrld__test.go:44: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpk1vvrld__test.go:44: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpk1vvrld__test.go:44: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var diff int\n    var count0 int\n    var count1 int\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        diff = count0 - count1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpipe20mrr_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpipe20mrr_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpipe20mrr_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    var i int = 0\n    var j int = 0\n    var length int = len(myString)\n\n    for i = 0; i < length; i++ {\n        count_0 = 0\n        count_1 = 0\n        for j = i; j < length; j++ {\n            if myString[j] == '0' {\n                count_0++\n            } else {\n                count_1++\n            }\n            diff = count_0 - count_1\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpro8e28fn_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpro8e28fn_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_zero int\n    var count_one int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff = count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp90w_13ez_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp90w_13ez_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp90w_13ez_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            max_diff = count_0\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpn376kvza_test.go:41: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpn376kvza_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count1, count0 int = 0, 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n        if count1 == count0 {\n            if maxDiff < (count1 + count0) {\n                maxDiff = count1 + count0\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp4t15c7x0_test.go:42: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp4t15c7x0_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp4t15c7x0_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_zero int\n    var count_one int\n    var i int\n    var j int\n    var n int\n\n    n = len(myString)\n    max_diff = 0\n    diff = 0\n    count_zero = 0\n    count_one = 0\n    i = 0\n    j = 0\n    for i < n && j < n {\n        if myString[j] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff = count_zero - count_one\n        if diff == 0 {\n            if j - i + 1 > max_diff {\n                max_diff = j - i + 1\n            }\n            j++\n        } else if diff > 0 {\n            if diff > max_diff {\n                max_diff = diff\n            }\n            i++\n        } else {\n            j++\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpkzqw3a3n_test.go:64: expected '%!s(int=6)', got '%!s(int=11)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpkzqw3a3n_test.go:64: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpkzqw3a3n_test.go:64: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff := count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpbvy13jhy_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpbvy13jhy_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpbvy13jhy_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count0, count1 int\n    for i := 0; i < len(myString); i++ {\n        for j := i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                count0++\n            } else {\n                count1++\n            }\n            if count0 - count1 > maxDiff {\n                maxDiff = count0 - count1\n            }\n        }\n        count0 = 0\n        count1 = 0\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int = 0\n    var count int = 0\n    for _, v := range myString {\n        if v == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_length int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_length < count_0 {\n                max_length = count_0\n            }\n        }\n    }\n    return max_length\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpizcc3x6i_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpizcc3x6i_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var diff int\n    var count0 int\n    var count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        diff = count0 - count1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count0 int = 0\n    var count1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if maxDiff < count0 {\n                maxDiff = count0\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpgm3q8r4d_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpgm3q8r4d_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var count int\n    var max int\n    for _, char := range myString {\n        if char == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var zeroCount int = 0\n    var oneCount int = 0\n\n    for _, char := range myString {\n        if char == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            if maxDiff < (zeroCount + oneCount) {\n                maxDiff = zeroCount + oneCount\n            }\n        }\n    }\n\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpyn11ik3h_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpyn11ik3h_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpyn11ik3h_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var i int = 0\n    var j int = 0\n    var diff int = 0\n    var len_myString int = len(myString)\n    for i = 0; i < len_myString; i++ {\n        count_0 = 0\n        count_1 = 0\n        for j = i; j < len_myString; j++ {\n            if myString[j] == '0' {\n                count_0 += 1\n            } else {\n                count_1 += 1\n            }\n            diff = count_0 - count_1\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpex5nwdrm_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpex5nwdrm_test.go:53: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var cur_diff int = 0\n    for _, c := range myString {\n        if c == '0' {\n            cur_diff++\n        } else {\n            cur_diff--\n        }\n        if cur_diff < 0 {\n            cur_diff = 0\n        }\n        if cur_diff > max_diff {\n            max_diff = cur_diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count1, count0 int = 0, 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n        if count1 == count0 {\n            if maxDiff < count1 {\n                maxDiff = count1\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmphj0bdlfx_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmphj0bdlfx_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, c := range myString {\n        if c == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var zero_count int\n    var one_count int\n    for _, char := range myString {\n        if char == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        diff = zero_count - one_count\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp078vl24v_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp078vl24v_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp078vl24v_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count1, count0 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n        if count1 == count0 {\n            if maxDiff < count1 {\n                maxDiff = count1\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpbfao9501_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpbfao9501_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int = 0\n    var count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < (count_zero + count_one) {\n                max_diff = count_zero + count_one\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpmkb9rfij_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpmkb9rfij_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpmkb9rfij_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_1 int = 0\n    var count_0 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count_1++\n        } else {\n            count_0++\n        }\n        if count_1 == count_0 {\n            if max_diff < count_1 {\n                max_diff = count_1\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpihy96pfk_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpihy96pfk_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var i int = 0\n    var j int = 0\n    var n int = len(myString)\n    for i = 0; i < n; i++ {\n        diff = 0\n        for j = i; j < n; j++ {\n            if myString[j] == '0' {\n                diff++\n            } else {\n                diff--\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_0 int\n    var count_1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var zeros, ones int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeros++\n        } else {\n            ones++\n        }\n        if zeros == ones {\n            if maxDiff < (zeros - ones) {\n                maxDiff = zeros - ones\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp9ht0jzh4_test.go:42: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp9ht0jzh4_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp9ht0jzh4_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    var diff int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero += 1\n        } else {\n            count_one += 1\n        }\n        diff = count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp77idobdb_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp77idobdb_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp77idobdb_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count0, count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            maxDiff = max(maxDiff, count0)\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2arj15s6_test.go:19:23: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff := count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpqxogwf5y_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpqxogwf5y_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpqxogwf5y_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int = 0\n    var count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    max := 0\n    count := 0\n    for _, c := range myString {\n        if c == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpsc1wb6at_test.go:40: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpsc1wb6at_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpsc1wb6at_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    // fmt.Println(myString)\n    var max int\n    var count int\n    for _, c := range myString {\n        if c == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpojek5igl_test.go:41: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpojek5igl_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpojek5igl_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var zeroCount, oneCount int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            if maxDiff < (zeroCount + oneCount) {\n                maxDiff = zeroCount + oneCount\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp9d7uoyb0_test.go:42: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp9d7uoyb0_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp9d7uoyb0_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var count_zero int\n    var count_one int\n    for i := 0; i < len(myString); i++ {\n        for j := i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                count_zero++\n            } else {\n                count_one++\n            }\n            if count_zero - count_one > max_diff {\n                max_diff = count_zero - count_one\n            }\n        }\n        count_zero = 0\n        count_one = 0\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for _, c := range myString {\n        if c == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        if zero_count > one_count {\n            if zero_count - one_count > max_diff {\n                max_diff = zero_count - one_count\n            }\n        } else {\n            if one_count - zero_count > max_diff {\n                max_diff = one_count - zero_count\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2vkgk8q9_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp2vkgk8q9_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2vkgk8q9_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, c := range myString {\n        if c == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff := count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp70vgfnkr_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp70vgfnkr_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp70vgfnkr_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, v := range myString {\n        if v == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if max < count {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_zero int\n    var count_one int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff = count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp90w_13ez_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp90w_13ez_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp90w_13ez_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    // fmt.Println(myString)\n    var max_diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        if zero_count == one_count {\n            if max_diff < zero_count {\n                max_diff = zero_count\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmptnoc6hy0_test.go:44: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmptnoc6hy0_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_zero int\n    var count_one int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff = count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp90w_13ez_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp90w_13ez_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp90w_13ez_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    max_diff := 0\n    count_0 := 0\n    count_1 := 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if count_0 + count_1 > max_diff {\n                max_diff = count_0 + count_1\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp8_i5q58k_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp8_i5q58k_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp8_i5q58k_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var count_0 int\n    var count_1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if count_0 + count_1 > max_diff {\n                max_diff = count_0 + count_1\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpnhc3s9lm_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpnhc3s9lm_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpnhc3s9lm_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var currDiff int\n    for _, char := range myString {\n        if char == '0' {\n            currDiff--\n        } else {\n            currDiff++\n        }\n        if currDiff < 0 {\n            currDiff = 0\n        }\n        if currDiff > maxDiff {\n            maxDiff = currDiff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpschw9ha3_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpschw9ha3_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpschw9ha3_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    max_diff := 0\n    diff := 0\n    for _, char := range myString {\n        if char == '0' {\n            diff--\n        } else {\n            diff++\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpcpywlag7_test.go:40: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpcpywlag7_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpcpywlag7_test.go:40: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, v := range myString {\n        if v == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero += 1\n        } else {\n            count_one += 1\n        }\n        if count_zero == count_one {\n            if count_zero + count_one > max_diff {\n                max_diff = count_zero + count_one\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp1z9mmsy3_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp1z9mmsy3_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp1z9mmsy3_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpg02huqsw_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpg02huqsw_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123087,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpimmz15vw_test.go:40: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpimmz15vw_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpimmz15vw_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        if zero_count == one_count {\n            diff = zero_count - one_count\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp_5bsdbao_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp_5bsdbao_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp_5bsdbao_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_0 int\n    var count_1 int\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp9gxcl3wn_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp9gxcl3wn_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp9gxcl3wn_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            max_diff = count_zero\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpebed4k9k_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpebed4k9k_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count1, count0 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n        if count1 == count0 {\n            if maxDiff < count1 {\n                maxDiff = count1\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpbfao9501_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpbfao9501_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int = 0\n    var count int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var count int\n    var max int\n    var zero int\n    var one int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero++\n        } else {\n            one++\n        }\n        count = zero - one\n        if count < 0 {\n            count = -count\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpkzh19c76_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpkzh19c76_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpkzh19c76_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count--\n        } else {\n            count++\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpuaxiqre6_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpuaxiqre6_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpuaxiqre6_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpv2l1gzeh_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpv2l1gzeh_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    max := 0\n    count := 0\n    for _, c := range myString {\n        if c == '0' {\n            count--\n        } else {\n            count++\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp3ntlkj73_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp3ntlkj73_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp3ntlkj73_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var one_count int = 0\n    var zero_count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            one_count++\n        } else {\n            zero_count++\n        }\n        if one_count != zero_count {\n            if one_count > zero_count {\n                if one_count - zero_count > max_diff {\n                    max_diff = one_count - zero_count\n                }\n            } else {\n                if zero_count - one_count > max_diff {\n                    max_diff = zero_count - one_count\n                }\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp19jx0wyb_test.go:49: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp19jx0wyb_test.go:49: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp19jx0wyb_test.go:49: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    var oneCount int\n    var zeroCount int\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            oneCount++\n        } else {\n            zeroCount++\n        }\n        if oneCount == zeroCount {\n            count = oneCount + zeroCount\n            if count > max {\n                max = count\n            }\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpnh3q1_bo_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpnh3q1_bo_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpnh3q1_bo_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        diff = zero_count - one_count\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmprv48zabl_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmprv48zabl_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmprv48zabl_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff := count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpqxogwf5y_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpqxogwf5y_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpqxogwf5y_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, c := range myString {\n        if c == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            diff := count_zero - count_one\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpykkl8blv_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpykkl8blv_test.go:47: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpykkl8blv_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count1 int = 0\n    var count0 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n        if count1 == count0 {\n            if maxDiff < count1 {\n                maxDiff = count1\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp7k4_hb7s_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp7k4_hb7s_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var diff int\n    var count0 int\n    var count1 int\n\n    for _, char := range myString {\n        if char == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        diff = count0 - count1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpyk3q6hss_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpyk3q6hss_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpyk3q6hss_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var zeroCount, oneCount, maxDiff int\n    for _, char := range myString {\n        if char == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount > oneCount {\n            if zeroCount - oneCount > maxDiff {\n                maxDiff = zeroCount - oneCount\n            }\n        } else {\n            if oneCount - zeroCount > maxDiff {\n                maxDiff = oneCount - zeroCount\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpoxkwkste_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpoxkwkste_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpoxkwkste_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    var diff int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff = count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpah4cfhq9_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpah4cfhq9_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpah4cfhq9_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count0, count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if count0 + count1 > maxDiff {\n                maxDiff = count0 + count1\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp81wl6x_n_test.go:42: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp81wl6x_n_test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp81wl6x_n_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count1, count0 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if maxDiff < count0 {\n                maxDiff = count0\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpqz926j_b_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpqz926j_b_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count1 int = 0\n    var count0 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n        if count1 == count0 {\n            if maxDiff < count1 {\n                maxDiff = count1\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp7k4_hb7s_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp7k4_hb7s_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    max_diff := 0\n    count_1 := 0\n    count_0 := 0\n\n    for _, c := range myString {\n        if c == '1' {\n            count_1++\n        } else {\n            count_0++\n        }\n\n        if count_1 == count_0 {\n            if count_1 + count_0 > max_diff {\n                max_diff = count_1 + count_0\n            }\n        }\n    }\n\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmplbnev7oy_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmplbnev7oy_test.go:46: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmplbnev7oy_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, char := range myString {\n        if string(char) == \"0\" {\n            count_0 += 1\n        } else {\n            count_1 += 1\n        }\n        diff := count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpe4ab_p0u_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpe4ab_p0u_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpe4ab_p0u_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for _, char := range myString {\n        if char == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        diff = zero_count - one_count\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpydcuekgd_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpydcuekgd_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpydcuekgd_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int = 0\n    var count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    var diff int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff = count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp21apzr4b_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp21apzr4b_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp21apzr4b_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var zero_count int\n    var one_count int\n\n    for _, char := range myString {\n        if char == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n\n        diff = zero_count - one_count\n        if diff < 0 {\n            diff = -diff\n        }\n\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpqotada2y_test.go:50: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpqotada2y_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpqotada2y_test.go:50: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_0 int\n    var count_1 int\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp9gxcl3wn_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp9gxcl3wn_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp9gxcl3wn_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff := count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpbvy13jhy_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpbvy13jhy_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpbvy13jhy_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count1, count0 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n        if count1 == count0 {\n            if maxDiff < count1 {\n                maxDiff = count1\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpbfao9501_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpbfao9501_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDifference int = 0\n    var currentDifference int = 0\n    for _, char := range myString {\n        if char == '0' {\n            currentDifference--\n        } else {\n            currentDifference++\n        }\n        if currentDifference < 0 {\n            currentDifference = 0\n        }\n        if currentDifference > maxDifference {\n            maxDifference = currentDifference\n        }\n    }\n    return maxDifference\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123089,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmputr0hosi_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmputr0hosi_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmputr0hosi_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 + count_1 {\n                max_diff = count_0 + count_1\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp_2pkbwxv_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp_2pkbwxv_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp_2pkbwxv_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var curr_diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        curr_diff = zero_count - one_count\n        if curr_diff < 0 {\n            curr_diff = -curr_diff\n        }\n        if curr_diff > max_diff {\n            max_diff = curr_diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpyxh5cie__test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpyxh5cie__test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpyxh5cie__test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for _, char := range myString {\n        if char == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        if zero_count == one_count {\n            if max_diff < zero_count {\n                max_diff = zero_count\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpkjv283ha_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpkjv283ha_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count0 int = 0\n    var count1 int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        diff := count0 - count1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp4p3wx3ka_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp4p3wx3ka_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp4p3wx3ka_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            max_diff = count_zero\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpx9ajju21_test.go:41: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpx9ajju21_test.go:41: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var curr_diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        curr_diff = zero_count - one_count\n        if curr_diff < 0 {\n            curr_diff = -curr_diff\n        }\n        if curr_diff > max_diff {\n            max_diff = curr_diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2jkma3iy_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp2jkma3iy_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2jkma3iy_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var diff int\n    var count0 int\n    var count1 int\n    for i := 0; i < len(myString); i++ {\n        for j := i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                count0++\n            } else {\n                count1++\n            }\n            diff = count0 - count1\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max {\n                max = diff\n            }\n        }\n        count0 = 0\n        count1 = 0\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpkvtkr4lu_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpkvtkr4lu_test.go:50: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, v := range myString {\n        if v == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var one_count int = 0\n    var zero_count int = 0\n    for _, char := range myString {\n        if char == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        diff = one_count - zero_count\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpoa74j513_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpoa74j513_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpoa74j513_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int = 0\n    var count int = 0\n    for _, c := range myString {\n        if c == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpnj6i2rdo_test.go:40: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpnj6i2rdo_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpnj6i2rdo_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0 += 1\n        } else {\n            count_1 += 1\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp_si36bkd_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp_si36bkd_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp_si36bkd_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var oneCount, zeroCount int\n    for _, char := range myString {\n        if char == '1' {\n            oneCount++\n        } else {\n            zeroCount++\n        }\n        if oneCount > zeroCount {\n            if oneCount - zeroCount > maxDiff {\n                maxDiff = oneCount - zeroCount\n            }\n        } else {\n            if zeroCount - oneCount > maxDiff {\n                maxDiff = zeroCount - oneCount\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpa6w6_u93_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpa6w6_u93_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpa6w6_u93_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_0 int\n    var count_1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var diff int\n    var zeroCount int\n    var oneCount int\n    for _, char := range myString {\n        if char == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        diff = zeroCount - oneCount\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpggbga2h1_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpggbga2h1_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpggbga2h1_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        diff = zero_count - one_count\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmprv48zabl_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmprv48zabl_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmprv48zabl_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        if zero_count == one_count {\n            if max_diff < zero_count {\n                max_diff = zero_count\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpctivqf6j_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpctivqf6j_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count0 int = 0\n    var count1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if maxDiff < count0 {\n                maxDiff = count0\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpgm3q8r4d_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpgm3q8r4d_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if count_zero + count_one > max_diff {\n                max_diff = count_zero + count_one\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpul6k98z1_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpul6k98z1_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpul6k98z1_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var diff int\n    var count0 int\n    var count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        diff = count0 - count1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    //fmt.Println(\"myString: \", myString)\n    var count0, count1, max int\n    for i := 0; i < len(myString); i++ {\n        count0 = 0\n        count1 = 0\n        for j := i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                count0++\n            } else {\n                count1++\n            }\n            if count0 - count1 > max {\n                max = count0 - count1\n            }\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero += 1\n        } else {\n            count_one += 1\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmppj4u51eg_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmppj4u51eg_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count--\n        } else {\n            count++\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2a42yi3q_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp2a42yi3q_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2a42yi3q_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var countZero int = 0\n    var countOne int = 0\n    for _, char := range myString {\n        if char == '0' {\n            countZero++\n        } else {\n            countOne++\n        }\n        if countZero == countOne {\n            if maxDiff < countZero {\n                maxDiff = countZero\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp8_mkanzo_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp8_mkanzo_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var currDiff int\n    var currZero int\n    var currOne int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            currZero++\n        } else {\n            currOne++\n        }\n        currDiff = currZero - currOne\n        if currDiff < 0 {\n            currDiff = -currDiff\n        }\n        if currDiff > maxDiff {\n            maxDiff = currDiff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp5wi4bs8j_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp5wi4bs8j_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp5wi4bs8j_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    max_diff := 0\n    cur_diff := 0\n    for _, c := range myString {\n        if c == '0' {\n            cur_diff += 1\n        } else {\n            cur_diff -= 1\n        }\n        if cur_diff < 0 {\n            cur_diff = 0\n        }\n        if cur_diff > max_diff {\n            max_diff = cur_diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var zeroCount int = 0\n    var oneCount int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            if maxDiff < zeroCount {\n                maxDiff = zeroCount\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp0y0a5_sm_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp0y0a5_sm_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count0, count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if maxDiff < count0 {\n                maxDiff = count0\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpjdc1rhho_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpjdc1rhho_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    var diff int = 0\n    var i int = 0\n    var j int = 0\n    var len_str int = len(myString)\n    for i = 0; i < len_str; i++ {\n        for j = i; j < len_str; j++ {\n            if myString[j] == '0' {\n                count_zero++\n            } else {\n                count_one++\n            }\n            diff = count_zero - count_one\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n        count_zero = 0\n        count_one = 0\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpl1qjiqg__test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpl1qjiqg__test.go:53: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        for j := i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                count_0++\n            } else {\n                count_1++\n            }\n            if count_0 - count_1 > max_diff {\n                max_diff = count_0 - count_1\n            }\n        }\n        count_0 = 0\n        count_1 = 0\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    for _, char := range myString {\n        if char == '0' {\n            diff -= 1\n        } else {\n            diff += 1\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpcmtpt6ql_test.go:40: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpcmtpt6ql_test.go:40: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpcmtpt6ql_test.go:40: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpg02huqsw_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpg02huqsw_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var count_zero int\n    var count_one int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp6o8by305_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp6o8by305_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int = 0\n    var count int = 0\n    for _, v := range myString {\n        if v == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var zeroCount int\n    var oneCount int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            if zeroCount + oneCount > maxDiff {\n                maxDiff = zeroCount + oneCount\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpusy3k__n_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpusy3k__n_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpusy3k__n_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var zeroCount int = 0\n    var oneCount int = 0\n    for _, char := range myString {\n        if char == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            if zeroCount + oneCount > maxDiff {\n                maxDiff = zeroCount + oneCount\n            }\n        }\n    }\n    zeroCount = 0\n    oneCount = 0\n    for i := len(myString) - 1; i >= 0; i-- {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            if zeroCount + oneCount > maxDiff {\n                maxDiff = zeroCount + oneCount\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpfl8zf5oe_test.go:57: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpfl8zf5oe_test.go:57: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpfl8zf5oe_test.go:57: expected '%!s(int=2)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count int\n    for _, char := range myString {\n        if string(char) == \"1\" {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if maxDiff < count {\n            maxDiff = count\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp7l9ery44_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp7l9ery44_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp7l9ery44_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0, count_1 int = 0, 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpqmv2nt48_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpqmv2nt48_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int = 0\n    var count int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count1, count0 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n        if count1 == count0 {\n            if maxDiff < count1 {\n                maxDiff = count1\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpbfao9501_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpbfao9501_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for _, char := range myString {\n        if char == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        if zero_count == one_count {\n            if max_diff < (zero_count + one_count) {\n                max_diff = zero_count + one_count\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp079aegur_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp079aegur_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp079aegur_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var diff int\n    var zeroCount int\n    var oneCount int\n\n    for _, char := range myString {\n        if char == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n\n        diff = zeroCount - oneCount\n        if diff < 0 {\n            diff = -diff\n        }\n\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpfzn1a3r7_test.go:50: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpfzn1a3r7_test.go:50: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpfzn1a3r7_test.go:50: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n        if count < 0 {\n            count = 0\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123087,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpimmz15vw_test.go:40: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpimmz15vw_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpimmz15vw_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if count_zero + count_one > max_diff {\n                max_diff = count_zero + count_one\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpul6k98z1_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpul6k98z1_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpul6k98z1_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if count_0 + count_1 > max_diff {\n                max_diff = count_0 + count_1\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpjl0zf4ff_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpjl0zf4ff_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpjl0zf4ff_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var diff int\n    var count0 int\n    var count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        diff = count0 - count1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var zeroCount, oneCount, maxDiff int\n    for _, char := range myString {\n        if string(char) == \"0\" {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount > oneCount {\n            if zeroCount - oneCount > maxDiff {\n                maxDiff = zeroCount - oneCount\n            }\n        } else {\n            if oneCount - zeroCount > maxDiff {\n                maxDiff = oneCount - zeroCount\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpsy23mvjl_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpsy23mvjl_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpsy23mvjl_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if count_0 + count_1 > max_diff {\n                max_diff = count_0 + count_1\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmppy2y9pew_test.go:43: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmppy2y9pew_test.go:43: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmppy2y9pew_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var diff int\n    var count0 int\n    var count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        diff = count0 - count1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2lxscbpj_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff = count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpdrg0vh4s_test.go:47: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpdrg0vh4s_test.go:47: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpdrg0vh4s_test.go:47: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int = 0\n    var count1 int = 0\n    var count0 int = 0\n    var diff int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '1' {\n            count1++\n        } else {\n            count0++\n        }\n        diff = count1 - count0\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > maxDiff {\n            maxDiff = diff\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpm0gw_z7f_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpm0gw_z7f_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpm0gw_z7f_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0, count_1 int = 0, 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if count_0 + count_1 > max_diff {\n                max_diff = count_0 + count_1\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpwrsk_t8__test.go:42: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpwrsk_t8__test.go:42: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpwrsk_t8__test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        diff = zero_count - one_count\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmprv48zabl_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmprv48zabl_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmprv48zabl_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpg02huqsw_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpg02huqsw_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp0outscww_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_1 int = 0\n    var count_0 int = 0\n    var diff int = 0\n    var i int = 0\n    var j int = 0\n    for i = 0; i < len(myString); i++ {\n        for j = i; j < len(myString); j++ {\n            if myString[j] == '1' {\n                count_1++\n            } else {\n                count_0++\n            }\n            diff = count_1 - count_0\n            if diff < 0 {\n                diff = -diff\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n        count_1 = 0\n        count_0 = 0\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp2ie1velv_test.go:52: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2ie1velv_test.go:52: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, char := range myString {\n        if char == '0' {\n            count--\n        } else {\n            count++\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123088,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpuaxiqre6_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpuaxiqre6_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpuaxiqre6_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp6ubbvyfw_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp6ubbvyfw_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp6ubbvyfw_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count--\n        } else {\n            count++\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2a42yi3q_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp2a42yi3q_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2a42yi3q_test.go:43: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var curr_diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        curr_diff = zero_count - one_count\n        if curr_diff < 0 {\n            curr_diff = -curr_diff\n        }\n        if curr_diff > max_diff {\n            max_diff = curr_diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123090,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp2jkma3iy_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmp2jkma3iy_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp2jkma3iy_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpatdx9316_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int\n    var count int\n    for _, v := range myString {\n        if v == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count0, count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            maxDiff = max(maxDiff, count0)\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2arj15s6_test.go:19:23: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int\n    var diff int\n    var count_0 int\n    var count_1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpb2n08cpa_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max int = 0\n    var count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff := count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpqxogwf5y_test.go:45: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpqxogwf5y_test.go:45: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpqxogwf5y_test.go:45: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count0, count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            maxDiff = count0\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123092,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmp9_z8x4uf_test.go:40: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmp9_z8x4uf_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpld1q6xxx_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var maxDiff int\n    var count0, count1 int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if maxDiff < count0 {\n                maxDiff = count0\n            }\n        }\n    }\n    return maxDiff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510001,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpjdc1rhho_test.go:42: expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpjdc1rhho_test.go:42: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n\nfunc TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestFind_Length (0.00s)\n    --- FAIL: TestFind_Length/test_num__0 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestFind_Length/test_num__1 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestFind_Length/test_num__2 (0.00s)\n        tmpfc8cs_xk_test.go:46: expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}