{
  "name": "mbpp_393_max_length_list",
  "language": "go_test.go",
  "prompt": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n\n    for _, list := range input_list {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpaluiaejg_test.go:41: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpaluiaejg_test.go:41: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpaluiaejg_test.go:41: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = list\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv5bvjhyo_test.go:15:22: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int = 0\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpk7bkggbh_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpk7bkggbh_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpk7bkggbh_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpwp6nrnhh_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpwp6nrnhh_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpwp6nrnhh_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, 0)\n            max_length_list = append(max_length_list, list)\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int = 0\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpinl7e5p0_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa2bvv_2p_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int = 0\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpinl7e5p0_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length_list []interface{}\n    max_length := 0\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpkgo8n3co_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpkgo8n3co_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpkgo8n3co_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int = 0\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpinl7e5p0_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = []interface{}{list}\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpmfn865jv_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpmfn865jv_test.go:38: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpmfn865jv_test.go:38: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, val := range list {\n                max_length_list[i] = val\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmp8ac2gd_2_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmp8ac2gd_2_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmp8ac2gd_2_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, 0)\n            max_length_list = append(max_length_list, list)\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_length_list []interface{}\n\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu_st2b5y_test.go:16:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, 0)\n            max_length_list = append(max_length_list, list)\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmp7n6y3sdq_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmp7n6y3sdq_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmp7n6y3sdq_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7koro2h4_test.go:16:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7koro2h4_test.go:16:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7koro2h4_test.go:16:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa2bvv_2p_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7koro2h4_test.go:16:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, 0)\n            max_length_list = append(max_length_list, list)\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpm_c9vj3j_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpm_c9vj3j_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpm_c9vj3j_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, 0)\n            max_length_list = append(max_length_list, list)\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpm_c9vj3j_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpm_c9vj3j_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpm_c9vj3j_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmp7n6y3sdq_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmp7n6y3sdq_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmp7n6y3sdq_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, 0)\n            max_length_list = append(max_length_list, list)\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = list\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv5bvjhyo_test.go:15:22: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, 0)\n            max_length_list = append(max_length_list, list)\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa2bvv_2p_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmp7n6y3sdq_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmp7n6y3sdq_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmp7n6y3sdq_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_list []interface{}\n    for _, list := range input_list {\n        if len(list) > len(max_list) {\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpi2lkahwb_test.go:37: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpi2lkahwb_test.go:37: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpi2lkahwb_test.go:37: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa2bvv_2p_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpwp6nrnhh_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpwp6nrnhh_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpwp6nrnhh_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmp7n6y3sdq_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmp7n6y3sdq_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmp7n6y3sdq_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7koro2h4_test.go:16:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpwp6nrnhh_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpwp6nrnhh_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpwp6nrnhh_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = list\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp_y0bdaz_test.go:15:22: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int = 0\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpinl7e5p0_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_list []interface{}\n    max_length := 0\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, item := range list {\n                max_list[i] = item\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmp1hid0nz5_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmp1hid0nz5_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmp1hid0nz5_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int = 0\n    var max_length_list []interface{}\n\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, _ := range list {\n                max_length_list[i] = list[i]\n            }\n        }\n    }\n\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmp_ew8gm9d_test.go:41: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmp_ew8gm9d_test.go:41: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmp_ew8gm9d_test.go:41: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = list\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp_y0bdaz_test.go:15:22: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int = 0\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpinl7e5p0_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmp5d1zdrqm_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmp5d1zdrqm_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmp5d1zdrqm_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, 0)\n            max_length_list = append(max_length_list, list)\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length_list = make([]interface{}, 0)\n            max_length_list = append(max_length_list, list)\n            max_length = len(list)\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpzek4d8fj_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpzek4d8fj_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpzek4d8fj_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmp5d1zdrqm_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmp5d1zdrqm_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmp5d1zdrqm_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int = 0\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpinl7e5p0_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = list\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv5bvjhyo_test.go:15:22: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int = 0\n    var max_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpfxu_oxgj_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpfxu_oxgj_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpfxu_oxgj_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7koro2h4_test.go:16:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpwp6nrnhh_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpwp6nrnhh_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpwp6nrnhh_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmp5d1zdrqm_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmp5d1zdrqm_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmp5d1zdrqm_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = list\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp_y0bdaz_test.go:15:22: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, 0)\n            max_length_list = append(max_length_list, list)\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length = 0\n    var max_length_list []interface{}\n\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd_zs0jr8_test.go:16:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpwp6nrnhh_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpwp6nrnhh_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpwp6nrnhh_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmps1_18xwg_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmps1_18xwg_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmps1_18xwg_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmp7n6y3sdq_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmp7n6y3sdq_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmp7n6y3sdq_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, max_length)\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmp_f8pekwp_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmp_f8pekwp_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmp_f8pekwp_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, value := range list {\n                max_length_list[i] = value\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmphqbrf_u__test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmphqbrf_u__test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmphqbrf_u__test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmp5d1zdrqm_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmp5d1zdrqm_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmp5d1zdrqm_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmp5d1zdrqm_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmp5d1zdrqm_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmp5d1zdrqm_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpfa76635t_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = list\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp_y0bdaz_test.go:15:22: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122710,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmplz7d4jts_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmplz7d4jts_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmplz7d4jts_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    var max_length int\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa2bvv_2p_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, 0)\n            max_length_list = append(max_length_list, list)\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, 0)\n            max_length_list = append(max_length_list, list)\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "--- FAIL: TestMax_Length_List (0.00s)\n    --- FAIL: TestMax_Length_List/test_num__0 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length_List/test_num__1 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=5) [%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]', got '[[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]]'\n    --- FAIL: TestMax_Length_List/test_num__2 (0.00s)\n        tmpmwdw63gv_test.go:39: expected '[%!s(int=4) [%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]', got '[[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509994,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptfyvl4m4_test.go:15:29: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}