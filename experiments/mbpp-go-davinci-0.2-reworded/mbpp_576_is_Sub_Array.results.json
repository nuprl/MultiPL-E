{
  "name": "mbpp_576_is_Sub_Array",
  "language": "go_test.go",
  "prompt": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "reworded",
  "tests": "func TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) > len(A) - i {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            for j := 0; j < len(A); j++ {\n                if A[j] != B[i+j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    } else {\n        return is_Sub_Array(A, B[1:])\n    }\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if i+len(A) > len(B) {\n                return false\n            }\n            for j := 1; j < len(A); j++ {\n                if A[j] != B[i+j] {\n                    break\n                }\n                if j == len(A)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            for j := 0; j < len(A); j++ {\n                if A[j] != B[i + j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpxzsar3r8_test.go:19\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmpxzsar3r8_test.go:40 +0x4f9\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    // fmt.Println(A, B)\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            for j := 1; j < len(A); j++ {\n                if i + j >= len(B) {\n                    return false\n                }\n                if B[i + j] != A[j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    } else {\n        return is_Sub_Array(A, B[1:])\n    }\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    } else {\n        return is_Sub_Array(A, B[1:])\n    }\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if A[0] == B[i] {\n            for j := 0; j < len(A); j++ {\n                if A[j] != B[i+j] {\n                    break\n                }\n                if j == len(A)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            for j := 0; j < len(A); j++ {\n                if B[i+j] != A[j] {\n                    break\n                }\n                if j == len(A)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            for j := 0; j < len(A); j++ {\n                if A[j] != B[i + j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    } else {\n        return is_Sub_Array(A, B[1:])\n    }\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpxzsar3r8_test.go:19\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmpxzsar3r8_test.go:40 +0x4f9\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            for j = 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n            }\n            if j == len(B) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmp136_r1wh_test.go:14\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmp136_r1wh_test.go:35 +0x4ec\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            for j := 1; j < len(A); j++ {\n                if B[i+j] != A[j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    }\n    return is_Sub_Array(A, B[1:])\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            for j := 0; j < len(A); j++ {\n                if A[j] != B[i + j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if A[i:i+len(B)] == B {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn09jq_2e_test.go:15:30: invalid operation: A[i:i + len(B)] == B (slice can only be compared to nil)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A[i:]) < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if i + j >= len(A) {\n                    return false\n                }\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if B[i] == A[0] {\n            j := 1\n            for ; j < len(A); j++ {\n                if B[i + j] != A[j] {\n                    break\n                }\n            }\n            if j == len(A) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    // check if A is sublist of B\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            for j := 0; j < len(A); j++ {\n                if A[j] != B[i+j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpxzsar3r8_test.go:19\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmpxzsar3r8_test.go:40 +0x4f9\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpjw9cvwyv_test.go:16\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmpjw9cvwyv_test.go:37 +0x513\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return false\n    }\n    if len(B) == 0 {\n        return true\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    } else {\n        return is_Sub_Array(A[1:], B)\n    }\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\n    --- FAIL: TestIs_Sub_Array/test_num__1 (0.00s)\n        tmpe5objhl9_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            for j := 0; j < len(A); j++ {\n                if A[j] != B[i+j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    }\n    return is_Sub_Array(A, B[1:])\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if len(A[i:]) < len(B) {\n                return false\n            }\n            if A[i:i+len(B)] == B {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnx2ozaob_test.go:19:30: invalid operation: A[i:i + len(B)] == B (slice can only be compared to nil)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            for j := 0; j < len(A); j++ {\n                if A[j] != B[i + j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[i+1:], B[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            for j := 0; j < len(A); j++ {\n                if B[i+j] != A[j] {\n                    break\n                }\n                if j == len(A)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if len(B) - i < len(A) {\n                return false\n            }\n            for j := 1; j < len(A); j++ {\n                if A[j] != B[i + j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124144,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    } else {\n        return is_Sub_Array(A, B[1:])\n    }\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            for j = 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n            }\n            if j == len(B) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmp136_r1wh_test.go:14\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmp136_r1wh_test.go:35 +0x4ec\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    }\n    return is_Sub_Array(A, B[1:])\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            for j := 0; j < len(A); j++ {\n                if B[i+j] != A[j] {\n                    break\n                }\n                if j == len(A)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    } else {\n        return is_Sub_Array(A, B[1:])\n    }\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124144,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpxzsar3r8_test.go:19\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmpxzsar3r8_test.go:40 +0x4f9\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124144,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if i+len(A) > len(B) {\n                return false\n            }\n            for j := 1; j < len(A); j++ {\n                if A[j] != B[i+j] {\n                    break\n                }\n                if j == len(A)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            for j := 1; j < len(A); j++ {\n                if i + j >= len(B) {\n                    return false\n                }\n                if A[j] != B[i + j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            if len(B) > 1 {\n                for j := 1; j < len(B); j++ {\n                    if i+j >= len(A) {\n                        return false\n                    }\n                    if A[i+j] != B[j] {\n                        break\n                    }\n                    if j == len(B)-1 {\n                        return true\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            for j := 1; j < len(A); j++ {\n                if A[j] != B[i+j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    n := len(A)\n    m := len(B)\n    if n < m {\n        return false\n    }\n    for i := 0; i < n; i++ {\n        if A[i] == B[0] {\n            if n - i < m {\n                return false\n            }\n            for j := 0; j < m; j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == m-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpxzsar3r8_test.go:19\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmpxzsar3r8_test.go:40 +0x4f9\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i <= len(B) - len(A); i++ {\n        if A[0] == B[i] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124144,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpxzsar3r8_test.go:19\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmpxzsar3r8_test.go:40 +0x4f9\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    // A is sublist of B\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            for j := 0; j < len(A); j++ {\n                if A[j] != B[i+j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            } else {\n                if is_Sub_Array(A[i+1:], B[1:]) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124144,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if A[0] == B[i] {\n            for j := 0; j < len(A); j++ {\n                if A[j] != B[i+j] {\n                    break\n                }\n                if j == len(A)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A[i:]) < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpott744mi_test.go:16\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000102600)\n\t/tmp/tmpott744mi_test.go:37 +0x513\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            for j := 0; j < len(A); j++ {\n                if i + j >= len(B) {\n                    return false\n                }\n                if B[i + j] != A[j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if i + j >= len(A) || A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if i+j >= len(A) {\n                    return false\n                }\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    } else {\n        return is_Sub_Array(A, B[1:])\n    }\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            for j := 0; j < len(A); j++ {\n                if B[i+j] != A[j] {\n                    break\n                }\n                if j == len(A)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            for j := 0; j < len(A); j++ {\n                if B[i+j] != A[j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    }\n    return is_Sub_Array(A, B[1:])\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            for j := 1; j < len(A); j++ {\n                if B[i + j] != A[j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmplh3mlqmp_test.go:13\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmplh3mlqmp_test.go:34 +0x513\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if len(A) > 1 {\n                for j := 1; j < len(A); j++ {\n                    if i+j < len(B) {\n                        if A[j] != B[i+j] {\n                            break\n                        }\n                        if j == len(A)-1 {\n                            return true\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A[i:]) < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i < len(A) && j < len(B) {\n        if A[i] == B[j] {\n            i++\n            j++\n        } else {\n            i++\n        }\n    }\n    if j == len(B) {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124146,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124146,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpjm07b_g4_test.go:20\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmpjm07b_g4_test.go:41 +0x4f9\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[i+1:], B[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if i + j >= len(A) {\n                    return false\n                }\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    } else {\n        return is_Sub_Array(A, B[1:])\n    }\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if i+j >= len(A) {\n                    return false\n                }\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A[i:]) < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                } else if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n\n    if len(A) > len(B) {\n        return false\n    }\n\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            for j := 1; j < len(A); j++ {\n                if i+j >= len(B) {\n                    return false\n                }\n                if B[i+j] != A[j] {\n                    break\n                }\n                if j == len(A)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            for j := 0; j < len(A); j++ {\n                if A[j] != B[i+j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) > len(A) - i {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    } else {\n        return is_Sub_Array(A, B[1:])\n    }\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpxzsar3r8_test.go:19\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmpxzsar3r8_test.go:40 +0x4f9\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpxzsar3r8_test.go:19\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmpxzsar3r8_test.go:40 +0x4f9\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n\n    for i := 0; i < len(B); i++ {\n        if A[0] == B[i] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpjw9cvwyv_test.go:16\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmpjw9cvwyv_test.go:37 +0x513\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            for j := 0; j < len(A); j++ {\n                if B[i + j] != A[j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i < len(A) && j < len(B) {\n        if A[i] == B[j] {\n            i++\n            j++\n        } else {\n            i++\n        }\n    }\n    if j == len(B) {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124146,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if A[0] == B[i] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            for j := 0; j < len(A); j++ {\n                if A[j] != B[i + j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpott744mi_test.go:16\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000102600)\n\t/tmp/tmpott744mi_test.go:37 +0x513\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    // Check if A is empty\n    if len(A) == 0 {\n        return false\n    }\n    // Check if B is empty\n    if len(B) == 0 {\n        return false\n    }\n    // Check if A is longer than B\n    if len(A) > len(B) {\n        return false\n    }\n    // Check if A is sublist of B\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if len(B) - i < len(A) {\n                return false\n            }\n            for j := 1; j < len(A); j++ {\n                if B[i+j] != A[j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if A[0] == B[i] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmp5iypx9mx_test.go:19\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000102600)\n\t/tmp/tmp5iypx9mx_test.go:40 +0x4f9\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A)-len(B)+1; i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[i+1:], B[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    } else {\n        return is_Sub_Array(A, B[1:])\n    }\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124145,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpott744mi_test.go:16\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000102600)\n\t/tmp/tmpott744mi_test.go:37 +0x513\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        for j := 0; j < len(A); j++ {\n            if A[j] != B[i + j] {\n                break\n            }\n            if j == len(A) - 1 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001080)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmp4chyqt51_test.go:13\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001080)\n\t/tmp/tmp4chyqt51_test.go:34 +0x513\ntesting.tRunner(0xc000001080, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    }\n    return is_Sub_Array(A, B[1:])\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            j := 0\n            for ; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n            }\n            if j == len(B) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            for j := 1; j < len(A); j++ {\n                if A[j] != B[i + j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if len(B) - i < len(A) {\n                return false\n            }\n            for j := 1; j < len(A); j++ {\n                if A[j] != B[i+j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    // A = [1,2,3,4,5,6]\n    // B = [3,4,5]\n    // B is sublist of A\n    // A = [1,2,3,4,5,6]\n    // B = [3,4,5,6]\n    // B is sublist of A\n    // A = [1,2,3,4,5,6]\n    // B = [3,4,5,7]\n    // B is not sublist of A\n    // A = [1,2,3,4,5,6]\n    // B = [3,4,5,6,7]\n    // B is not sublist of A\n    // A = [1,2,3,4,5,6]\n    // B = [3,4,5,6,7,8]\n    // B is not sublist of A\n    // A = [1,2,3,4,5,6]\n    // B = [3,4,5,6,7,8,9]\n    // B is not sublist of A\n    // A = [1,2,3,4,5,6]\n    // B = [3,4,5,6,7,8,9,10]\n    // B is not sublist of A\n    // A = [1,2,3,4,5,6]\n    // B = [3,4,5,6,7,8,9,10,11]\n    // B is not sublist of A\n    // A = [1,2,3,4,5,6]\n    // B = [3,4,5,6,7,8,9,10,11,12]\n    // B is not sublist of A\n    // A = [1,2,3,4,5,6]\n    // B = [3,4,5,6,7,8,9,10,11,12,13]\n    // B is not sublist of A\n    // A = [1,2,3,4,5,6]\n    // B = [3,4,5,6,7,8,9,10,\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpe834dx3n_test.go:42:6: expected '(', found TestIs_Sub_Array\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124148,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpm8_3inq5_test.go:13\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmpm8_3inq5_test.go:34 +0x513\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            for j = 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n            }\n            if j == len(B) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmp136_r1wh_test.go:14\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmp136_r1wh_test.go:35 +0x4ec\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    }\n    return is_Sub_Array(A, B[1:])\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            for j := 1; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124148,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124148,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B); i++ {\n        if B[i] == A[0] {\n            if len(A) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[1:], B[i+1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            for j := 0; j < len(A); j++ {\n                if A[j] != B[i + j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if B[i] == A[0] {\n            for j := 0; j < len(A); j++ {\n                if B[i + j] != A[j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124148,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmp5iypx9mx_test.go:19\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000102600)\n\t/tmp/tmp5iypx9mx_test.go:40 +0x4f9\ntesting.tRunner(0xc000102600, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B)-1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124148,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmpbb0y5ezl_test.go:20\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000001380)\n\t/tmp/tmpbb0y5ezl_test.go:41 +0x4f9\ntesting.tRunner(0xc000001380, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 || len(B) == 0 {\n        return false\n    }\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if B[i] == A[0] {\n            for j := 0; j < len(A); j++ {\n                if B[i + j] != A[j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124148,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    var i, j int\n    for i = 0; i < len(A); i++ {\n        for j = 0; j < len(B); j++ {\n            if A[i] == B[j] {\n                break\n            }\n        }\n        if j == len(B) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124148,
      "stdout": "--- FAIL: TestIs_Sub_Array (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.is_Sub_Array(...)\n\t/tmp/tmp1qei3lq3_test.go:16\ncommand-line-arguments_test.TestIs_Sub_Array(0xc000186300)\n\t/tmp/tmp1qei3lq3_test.go:37 +0x513\ntesting.tRunner(0xc000186300, 0x54f1e0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i+j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124144,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            for j := 1; j < len(B); j++ {\n                if i + j >= len(A) {\n                    return false\n                }\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) == 0 {\n        return true\n    }\n    if len(B) == 0 {\n        return false\n    }\n    if A[0] == B[0] {\n        return is_Sub_Array(A[1:], B[1:])\n    } else {\n        return is_Sub_Array(A, B[1:])\n    }\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(B) - len(A) + 1; i++ {\n        if A[0] == B[i] {\n            for j := 0; j < len(A); j++ {\n                if A[j] != B[i + j] {\n                    break\n                }\n                if j == len(A) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124142,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510636,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    for i := 0; i < len(A); i++ {\n        if A[i] == B[0] {\n            if len(A) - i < len(B) {\n                return false\n            }\n            for j := 0; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n                if j == len(B) - 1 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124147,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            j := 0\n            for ; j < len(B); j++ {\n                if A[i + j] != B[j] {\n                    break\n                }\n            }\n            if j == len(B) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124148,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) > len(B) {\n        return false\n    }\n    for i := 0; i < len(A); i++ {\n        if A[i] != B[i] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124148,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Sub_Array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether a list is sublist of another or not.\nfunc is_Sub_Array(A []int, B []int) bool {\n    if len(A) < len(B) {\n        return false\n    }\n\n    for i := 0; i < len(A) - len(B) + 1; i++ {\n        if A[i] == B[0] {\n            if len(B) == 1 {\n                return true\n            }\n            if is_Sub_Array(A[i+1:], B[1:]) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sub_Array(t *testing.T) {\n  candidate := is_Sub_Array\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 4, 3, 5}, []int{1, 2}), expected: false },\n     { actual: candidate([]int{1, 2, 1}, []int{1, 2, 1}), expected: true },\n     { actual: candidate([]int{1, 0, 2, 2}, []int{2, 2, 0}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124148,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}