{
  "name": "mbpp_444_trim_tuple",
  "language": "go_test.go",
  "prompt": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "func TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v, \", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v, \", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4w09t253_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4w09t253_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4w09t253_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4w09t253_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4w09t253_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4w09t253_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var output string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        output += fmt.Sprintf(\"%v\", list)\n    }\n    return output\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp63tp_z63_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp63tp_z63_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp63tp_z63_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp63tp_z63_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp63tp_z63_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp63tp_z63_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    // Write your code here\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphy99jgmt_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphy99jgmt_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphy99jgmt_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphy99jgmt_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphy99jgmt_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphy99jgmt_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v \", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcwnvvawd_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, sub_list := range test_list {\n        if len(sub_list) > K {\n            result += fmt.Sprintf(\"%v\", sub_list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", sub_list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yiit9np_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yiit9np_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yiit9np_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yiit9np_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yiit9np_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yiit9np_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\\n\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwps0pmod_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwps0pmod_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwps0pmod_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwps0pmod_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwps0pmod_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwps0pmod_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) < K {\n            result += fmt.Sprintf(\"%v\\n\", list)\n        } else {\n            result += fmt.Sprintf(\"%v\\n\", list[:K])\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy4v54wz2_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy4v54wz2_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy4v54wz2_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy4v54wz2_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy4v54wz2_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy4v54wz2_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\\n\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\\n\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkv6wasxy_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkv6wasxy_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkv6wasxy_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkv6wasxy_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkv6wasxy_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkv6wasxy_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:len(list)-K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg39t_cmq_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpg39t_cmq_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpg39t_cmq_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpg39t_cmq_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpg39t_cmq_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpg39t_cmq_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            test_list[i] = test_list[i][:K]\n        }\n    }\n    return fmt.Sprintf(\"%v\", test_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxm0knotr_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxm0knotr_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxm0knotr_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxm0knotr_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxm0knotr_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxm0knotr_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) >= K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1yiko2k3_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1yiko2k3_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1yiko2k3_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1yiko2k3_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1yiko2k3_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1yiko2k3_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            result += fmt.Sprintf(\"%v\", test_list[i][:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", test_list[i])\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaezpdhgz_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaezpdhgz_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaezpdhgz_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result_list [][]interface{}\n    for _, list := range test_list {\n        if len(list) > K {\n            result_list = append(result_list, list[:K])\n        } else {\n            result_list = append(result_list, list)\n        }\n    }\n    return fmt.Sprintf(\"%v\", result_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp708nfraw_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp708nfraw_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp708nfraw_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp708nfraw_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp708nfraw_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp708nfraw_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result_list [][]interface{}\n    for _, list := range test_list {\n        if len(list) > K {\n            result_list = append(result_list, list[:K])\n        } else {\n            result_list = append(result_list, list)\n        }\n    }\n    return fmt.Sprintf(\"%v\", result_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp708nfraw_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp708nfraw_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp708nfraw_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp708nfraw_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp708nfraw_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp708nfraw_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string = \"\"\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            result += fmt.Sprintf(\"%v\", test_list[i][:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", test_list[i])\n        }\n        if i != len(test_list) - 1 {\n            result += \", \"\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphgifjl8i_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphgifjl8i_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphgifjl8i_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphgifjl8i_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphgifjl8i_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphgifjl8i_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, v := range test_list {\n        if len(v) > K {\n            result += fmt.Sprintf(\"%v\", v[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", v)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1p6etkh0_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1p6etkh0_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1p6etkh0_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            result += fmt.Sprintf(\"%v\", test_list[i][:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", test_list[i])\n        }\n        if i != len(test_list) - 1 {\n            result += \",\"\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfxjg9u7x_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfxjg9u7x_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfxjg9u7x_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfxjg9u7x_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfxjg9u7x_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfxjg9u7x_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\\n\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\\n\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkv6wasxy_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkv6wasxy_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkv6wasxy_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkv6wasxy_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkv6wasxy_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkv6wasxy_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, t := range test_list {\n        if len(t) > K {\n            t = t[:K]\n        }\n        result += fmt.Sprintf(\"%v\", t)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprrhq0x86_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprrhq0x86_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprrhq0x86_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprrhq0x86_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprrhq0x86_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprrhq0x86_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            result += fmt.Sprintf(\"%v\", test_list[i][:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", test_list[i])\n        }\n        if i != len(test_list) - 1 {\n            result += \",\"\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfxjg9u7x_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfxjg9u7x_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfxjg9u7x_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfxjg9u7x_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfxjg9u7x_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfxjg9u7x_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            result += fmt.Sprintf(\"%v\", test_list[i][:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", test_list[i])\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaezpdhgz_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaezpdhgz_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaezpdhgz_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v, \", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v, \", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4w09t253_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4w09t253_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4w09t253_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4w09t253_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4w09t253_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4w09t253_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        var temp_list []interface{}\n        for i, item := range list {\n            if i < K {\n                temp_list = append(temp_list, item)\n            }\n        }\n        result += fmt.Sprintf(\"%v \", temp_list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2e2lbopq_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2e2lbopq_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2e2lbopq_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2e2lbopq_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2e2lbopq_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2e2lbopq_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    // Write your code here\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphy99jgmt_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphy99jgmt_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphy99jgmt_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphy99jgmt_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphy99jgmt_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphy99jgmt_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, sub_list := range test_list {\n        for _, item := range sub_list {\n            if K > 0 {\n                result += fmt.Sprintf(\"%v\", item)\n                K--\n            }\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt_p_r8cv_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpt_p_r8cv_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpt_p_r8cv_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpt_p_r8cv_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpt_p_r8cv_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpt_p_r8cv_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result_list [][]interface{}\n    for _, list := range test_list {\n        if len(list) > K {\n            result_list = append(result_list, list[:K])\n        } else {\n            result_list = append(result_list, list)\n        }\n    }\n    return fmt.Sprintf(\"%v\", result_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp708nfraw_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp708nfraw_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp708nfraw_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp708nfraw_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp708nfraw_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp708nfraw_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            result += fmt.Sprintf(\"%v\", test_list[i][:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", test_list[i])\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaezpdhgz_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaezpdhgz_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaezpdhgz_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    // Write your code here\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v \", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphjzt68zx_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphjzt68zx_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphjzt68zx_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphjzt68zx_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphjzt68zx_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphjzt68zx_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            test_list[i] = test_list[i][:K]\n        }\n    }\n    return fmt.Sprintf(\"%v\", test_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxm0knotr_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxm0knotr_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxm0knotr_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxm0knotr_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxm0knotr_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxm0knotr_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprint(list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa7l5ivb__test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa7l5ivb__test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpa7l5ivb__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa7l5ivb__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpa7l5ivb__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa7l5ivb__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, v := range test_list {\n        if len(v) > K {\n            result += fmt.Sprintf(\"%v\", v[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", v)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1p6etkh0_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1p6etkh0_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1p6etkh0_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            test_list[i] = test_list[i][:K]\n        }\n    }\n    return fmt.Sprintf(\"%v\", test_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxm0knotr_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxm0knotr_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxm0knotr_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxm0knotr_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxm0knotr_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxm0knotr_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result_list [][]interface{}\n    for _, list := range test_list {\n        if len(list) > K {\n            result_list = append(result_list, list[:K])\n        }\n    }\n    return fmt.Sprintf(\"%v\", result_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplrjswtjc_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplrjswtjc_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplrjswtjc_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplrjswtjc_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplrjswtjc_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplrjswtjc_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) < K {\n            result += fmt.Sprintf(\"%v\", list)\n        } else {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph6dgcq20_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmph6dgcq20_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmph6dgcq20_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmph6dgcq20_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmph6dgcq20_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmph6dgcq20_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, v := range test_list {\n        if len(v) > K {\n            result += fmt.Sprintf(\"%v\", v[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", v)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1p6etkh0_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1p6etkh0_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1p6etkh0_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v \", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcwnvvawd_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\\n\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\\n\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkv6wasxy_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkv6wasxy_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkv6wasxy_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkv6wasxy_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkv6wasxy_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkv6wasxy_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    // Write your code here\n    result := \"\"\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbwgf_u4a_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbwgf_u4a_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbwgf_u4a_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbwgf_u4a_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbwgf_u4a_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbwgf_u4a_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var new_list [][]interface{}\n    for _, list := range test_list {\n        if len(list) > K {\n            new_list = append(new_list, list[:K])\n        } else {\n            new_list = append(new_list, list)\n        }\n    }\n    return fmt.Sprintf(\"%v\", new_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpknmrm6ym_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpknmrm6ym_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpknmrm6ym_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpknmrm6ym_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpknmrm6ym_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpknmrm6ym_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\\n\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\\n\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkv6wasxy_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkv6wasxy_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkv6wasxy_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkv6wasxy_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkv6wasxy_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkv6wasxy_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result_list [][]interface{}\n    for _, list := range test_list {\n        var new_list []interface{}\n        for i, v := range list {\n            if i >= K {\n                new_list = append(new_list, v)\n            }\n        }\n        result_list = append(result_list, new_list)\n    }\n    return fmt.Sprintf(\"%v\", result_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf4edpan4_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpf4edpan4_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpf4edpan4_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpf4edpan4_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpf4edpan4_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpf4edpan4_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\\n\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\\n\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkv6wasxy_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkv6wasxy_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkv6wasxy_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkv6wasxy_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkv6wasxy_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkv6wasxy_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, sub_list := range test_list {\n        if len(sub_list) > K {\n            result += fmt.Sprintf(\"%v\", sub_list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", sub_list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6yiit9np_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yiit9np_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yiit9np_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yiit9np_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6yiit9np_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6yiit9np_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v, \", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v, \", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4w09t253_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4w09t253_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4w09t253_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4w09t253_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4w09t253_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4w09t253_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            result += fmt.Sprintf(\"%v\", test_list[i][:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", test_list[i])\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaezpdhgz_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaezpdhgz_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaezpdhgz_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            result += fmt.Sprintf(\"%v\", test_list[i][:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", test_list[i])\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaezpdhgz_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaezpdhgz_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaezpdhgz_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    // Write your code here\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v, \", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v, \", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl82ll3av_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpl82ll3av_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpl82ll3av_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpl82ll3av_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpl82ll3av_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpl82ll3av_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        result += fmt.Sprintf(\"%v\\n\", list[:len(list)-K])\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsxkv80yh_test.go:24:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsxkv80yh_test.go:24:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsxkv80yh_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsxkv80yh_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsxkv80yh_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsxkv80yh_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            test_list[i] = test_list[i][:K]\n        }\n    }\n    return fmt.Sprint(test_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbn7a_77k_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbn7a_77k_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbn7a_77k_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbn7a_77k_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbn7a_77k_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbn7a_77k_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v \", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcwnvvawd_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            test_list[i] = test_list[i][:K]\n        }\n    }\n    return fmt.Sprintf(\"%v\", test_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxm0knotr_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxm0knotr_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxm0knotr_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxm0knotr_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxm0knotr_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxm0knotr_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v \", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcwnvvawd_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            result += fmt.Sprintf(\"%v\", test_list[i][:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", test_list[i])\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaezpdhgz_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaezpdhgz_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaezpdhgz_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) < K {\n            result += fmt.Sprintf(\"%v,\", list)\n        } else {\n            result += fmt.Sprintf(\"%v,\", list[:K])\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpice67chg_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpice67chg_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpice67chg_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpice67chg_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpice67chg_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpice67chg_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        for i := 0; i < len(list); i++ {\n            if i < K || i >= len(list) - K {\n                result += fmt.Sprintf(\"%v \", list[i])\n            }\n        }\n        result += \"\\n\"\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxmezn78b_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxmezn78b_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxmezn78b_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxmezn78b_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxmezn78b_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxmezn78b_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            test_list[i] = test_list[i][:K]\n        }\n    }\n    return fmt.Sprint(test_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbn7a_77k_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbn7a_77k_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbn7a_77k_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbn7a_77k_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbn7a_77k_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbn7a_77k_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            result += fmt.Sprintf(\"%v\", test_list[i][:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", test_list[i])\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaezpdhgz_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaezpdhgz_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaezpdhgz_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaezpdhgz_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    for i, _ := range test_list {\n        if len(test_list[i]) > K {\n            test_list[i] = test_list[i][:K]\n        }\n    }\n    return fmt.Sprintf(\"%v\", test_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp69gk8umj_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp69gk8umj_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp69gk8umj_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp69gk8umj_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp69gk8umj_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp69gk8umj_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, v := range test_list {\n        if len(v) > K {\n            result += fmt.Sprintf(\"%v\", v[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", v)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1p6etkh0_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1p6etkh0_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1p6etkh0_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v, \", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v, \", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4w09t253_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4w09t253_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4w09t253_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4w09t253_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4w09t253_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4w09t253_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var ret_list [][]interface{}\n    for _, list := range test_list {\n        if len(list) > K {\n            ret_list = append(ret_list, list[:K])\n        } else {\n            ret_list = append(ret_list, list)\n        }\n    }\n    return fmt.Sprintf(\"%v\", ret_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbi0evrpp_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbi0evrpp_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbi0evrpp_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbi0evrpp_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbi0evrpp_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbi0evrpp_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    for i, _ := range test_list {\n        if len(test_list[i]) > K {\n            test_list[i] = test_list[i][:K]\n        }\n    }\n    return fmt.Sprintf(\"%v\", test_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp69gk8umj_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp69gk8umj_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp69gk8umj_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp69gk8umj_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp69gk8umj_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp69gk8umj_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) > K {\n            test_list[i] = test_list[i][:K]\n        }\n    }\n    return fmt.Sprintf(\"%v\", test_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxm0knotr_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxm0knotr_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxm0knotr_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxm0knotr_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxm0knotr_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxm0knotr_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    for i, _ := range test_list {\n        if len(test_list[i]) > K {\n            test_list[i] = test_list[i][:K]\n        }\n    }\n    return fmt.Sprintf(\"%v\", test_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp69gk8umj_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp69gk8umj_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp69gk8umj_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp69gk8umj_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp69gk8umj_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp69gk8umj_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v \", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcwnvvawd_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprfvn8h13_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprfvn8h13_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprfvn8h13_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprfvn8h13_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprfvn8h13_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprfvn8h13_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v \", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcwnvvawd_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    for i, _ := range test_list {\n        if len(test_list[i]) > K {\n            test_list[i] = test_list[i][:K]\n        }\n    }\n    return fmt.Sprintf(\"%v\", test_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp69gk8umj_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp69gk8umj_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp69gk8umj_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp69gk8umj_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp69gk8umj_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp69gk8umj_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v \", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcwnvvawd_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    // Write your code here\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphy99jgmt_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphy99jgmt_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphy99jgmt_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphy99jgmt_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphy99jgmt_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphy99jgmt_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v, \", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v, \", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4w09t253_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4w09t253_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4w09t253_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4w09t253_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4w09t253_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4w09t253_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, v := range test_list {\n        if len(v) > K {\n            result += fmt.Sprintf(\"%v\", v[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", v)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1p6etkh0_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1p6etkh0_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1p6etkh0_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v \", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcwnvvawd_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcwnvvawd_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcwnvvawd_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result_list [][]interface{}\n    for _, list := range test_list {\n        if len(list) > K {\n            result_list = append(result_list, list[:K])\n        } else {\n            result_list = append(result_list, list)\n        }\n    }\n    return fmt.Sprintf(\"%v\", result_list)\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp708nfraw_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp708nfraw_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp708nfraw_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp708nfraw_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp708nfraw_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp708nfraw_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        for i := 0; i < len(list); i++ {\n            if i < K || i >= len(list) - K {\n                continue\n            }\n            result += fmt.Sprintf(\"%v\", list[i])\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprh0m4_ih_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprh0m4_ih_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprh0m4_ih_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprh0m4_ih_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprh0m4_ih_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprh0m4_ih_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            list = list[:K]\n        }\n        result += fmt.Sprintf(\"%v\", list)\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8w6iqin_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpe8w6iqin_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpe8w6iqin_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for i := 0; i < len(test_list); i++ {\n        if len(test_list[i]) < K {\n            result += fmt.Sprintf(\"%v\", test_list[i])\n        } else {\n            result += fmt.Sprintf(\"%v\", test_list[i][:K])\n        }\n        if i != len(test_list) - 1 {\n            result += \",\"\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpofkthu4f_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpofkthu4f_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpofkthu4f_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpofkthu4f_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpofkthu4f_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpofkthu4f_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, v := range test_list {\n        if len(v) > K {\n            result += fmt.Sprintf(\"%v\", v[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", v)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1p6etkh0_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1p6etkh0_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1p6etkh0_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1p6etkh0_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    result := \"\"\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122938,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp09sfss8w_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp09sfss8w_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp09sfss8w_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp09sfss8w_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp09sfss8w_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp09sfss8w_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package trim_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to trim each list by k in the given list list.\nfunc trim_tuple(test_list [][]interface{}, K int) string {\n    var result string\n    for _, list := range test_list {\n        if len(list) > K {\n            result += fmt.Sprintf(\"%v\", list[:K])\n        } else {\n            result += fmt.Sprintf(\"%v\", list)\n        }\n    }\n    return result\n}\n\nfunc TestTrim_Tuple(t *testing.T) {\n  candidate := trim_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 2), expected: \"[(2,), (9,), (2,), (2,)]\" },\n     { actual: candidate([][]int{[]interface{}{5, 3, 2, 1, 4}, []interface{}{3, 4, 9, 2, 1}, []interface{}{9, 1, 2, 3, 5}, []interface{}{4, 8, 2, 1, 7}}, 1), expected: \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\" },\n     { actual: candidate([][]int{[]interface{}{7, 8, 4, 9}, []interface{}{11, 8, 12, 4}, []interface{}{4, 1, 7, 8}, []interface{}{3, 6, 9, 7}}, 1), expected: \"[(8, 4), (8, 12), (1, 7), (6, 9)]\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510307,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppx1_918__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmppx1_918__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmppx1_918__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}