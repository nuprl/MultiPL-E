{
  "name": "mbpp_143_find_lists",
  "language": "go_test.go",
  "prompt": "package find_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find number of lists present in the given list.\nfunc find_lists(Input interface{}) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Lists(t *testing.T) {\n  candidate := find_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}}), expected: 2 },\n     { actual: candidate([]interface{}{[]int{1, 2}, []int{3, 4}, []int{5, 6}}), expected: 3 },\n     { actual: candidate([]int{9, 8, 7, 6, 5, 4, 3, 2, 1}), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        var count int = 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n",
    "    switch Input.(type) {\n        case []interface{}:\n            return 1 + find_lists(Input.([]interface{})[0])\n        default:\n            return 0\n    }\n}\n",
    "    switch Input.(type) {\n        case []interface{}:\n            return 1 + sum(map_list(Input.([]interface{}), find_lists))\n        default:\n            return 0\n    }\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range Input.([]interface{}) {\n            count += find_lists(v)\n        }\n        return count + 1\n    default:\n        return 0\n    }\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[1:])\n    case interface{}:\n        return 0\n    }\n    return 0\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists(Input.([]interface{})[0])\n    case int:\n        return 0\n    }\n    return 0\n}\n",
    "    switch Input.(type) {\n    case []interface{}:\n        return 1 + find_lists_in_list(Input.([]interface{}))\n    default:\n        return 0\n    }\n}\n"
  ]
}