{
  "name": "mbpp_616_tuple_modulo",
  "language": "go_test.go",
  "prompt": "package tuple_modulo_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which takes two lists of the same length and performs the element wise modulo.\nfunc tuple_modulo(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py",
  "prompt_terminology": "reworded",
  "tests": "func TestTuple_Modulo(t *testing.T) {\n  candidate := tuple_modulo\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6}, []interface{}{5, 6, 7, 5}), expected: []interface{}{0, 4, 5, 1} },\n     { actual: candidate([]interface{}{11, 5, 6, 7}, []interface{}{6, 7, 8, 6}), expected: []interface{}{5, 5, 6, 1} },\n     { actual: candidate([]interface{}{12, 6, 7, 8}, []interface{}{7, 8, 9, 7}), expected: []interface{}{5, 6, 7, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: Unknown type\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result_tup = append(result_tup, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n            default:\n                fmt.Println(\"tuple_modulo: type mismatch\")\n                return nil\n            }\n        default:\n            fmt.Println(\"tuple_modulo: type mismatch\")\n            return nil\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        panic(\"Tuple lengths are not equal\")\n    }\n\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Invalid type\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            result = append(result, nil)\n        }\n    }\n    return result\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        panic(\"Tuples must be of the same length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Only int and float64 types are supported\")\n        }\n    }\n    return result\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        panic(\"tuple_modulo: tuples must be the same length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n            default:\n                panic(\"tuple_modulo: tuples must be of type int or float64\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        panic(\"Tuples must be of the same length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            panic(\"Tuples must be of type int or float64\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) % test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) % test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n"
  ]
}