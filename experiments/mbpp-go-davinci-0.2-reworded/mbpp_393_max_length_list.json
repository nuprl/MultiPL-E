{
  "name": "mbpp_393_max_length_list",
  "language": "go_test.go",
  "prompt": "package max_length_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list with maximum length.\nfunc max_length_list(input_list [][]int) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMax_Length_List(t *testing.T) {\n  candidate := max_length_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4, 5}, []int{1, 2, 3, 4}, []int{1, 2, 3}, []int{1, 2}, []int{1}}), expected: []interface{}{5, []int{1, 2, 3, 4, 5}} },\n     { actual: candidate([][]int{[]int{3, 4, 5}, []int{6, 7, 8, 9}, []int{10, 11, 12}}), expected: []interface{}{4, []int{6, 7, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var max_len int\n    var max_list []interface{}\n\n    for _, list := range input_list {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n\n    return max_list\n}\n",
    "    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n",
    "    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = list\n        }\n    }\n    return max_list\n}\n",
    "    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n",
    "    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n",
    "    var max_length int = 0\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n",
    "    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n",
    "    var max_length int\n    var max_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n",
    "    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, 0)\n            max_length_list = append(max_length_list, list)\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n",
    "    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n",
    "    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n",
    "    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n",
    "    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n",
    "    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n",
    "    max_length := 0\n    max_length_list := make([]interface{}, 0)\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n",
    "    var max_length int = 0\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n",
    "    var max_length int\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n",
    "    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n",
    "    var max_length int = 0\n    var max_length_list []interface{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n",
    "    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range input_list {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = list\n        }\n    }\n    return max_length_list\n}\n"
  ]
}