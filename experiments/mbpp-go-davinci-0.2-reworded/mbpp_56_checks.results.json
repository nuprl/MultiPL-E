{
  "name": "mbpp_56_checks",
  "language": "go_test.go",
  "prompt": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "func TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // TODO: Implement this function.\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmprl055luz_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk__jp9py_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    reverse := 0\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n /= 10\n    }\n    return n == reverse - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp3a2age0x_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    var temp int\n    var num int\n    num = n\n    for n > 0 {\n        temp = n % 10\n        rev = rev * 10 + temp\n        n = n / 10\n    }\n    if num == rev * 2 - 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return r == n * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpt8c97djf_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpgrikp8o2_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpr64ozr1h_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    var reversed int\n    for n > 0 {\n        reversed = reversed * 10 + n % 10\n        n /= 10\n    }\n\n    return n == reversed - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpd0yhchi6_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (2 * reverse(n) - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakaxbjor_test.go:10:22: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    var temp int\n    temp = n\n    for temp != 0 {\n        rev = rev * 10 + temp % 10\n        temp = temp / 10\n    }\n    return n == rev * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    return n == (n % 10) * 2 + 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpvm1mr201_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk__jp9py_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2*reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2r28b10u_test.go:10:19: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp1w5x4008_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return r == n * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpt8c97djf_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (2*reverse(n) - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124005,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjghxy0cv_test.go:10:20: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpt9kbquxe_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (2 * reverse(n) - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakaxbjor_test.go:10:22: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpdhm1jynd_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    // reverse the number\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == 2 * rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpibu5fuhq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    reverse := 0\n    for i := n; i > 0; i /= 10 {\n        reverse = reverse * 10 + i % 10\n    }\n    return n == reverse * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp1w5x4008_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    // reverse the number\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp2xhfh6ml_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n <= 0 {\n        return false\n    }\n    var rev int\n    var t int = n\n    for t > 0 {\n        rev = rev * 10 + t % 10\n        t /= 10\n    }\n    return n == rev * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // reverse the number\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    // check if it is one less than twice its reverse\n    return n == r * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpth19g_s__test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpg9y86s6n_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n % 10) * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp6mnnk3cb_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    reverse := 0\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n = n / 10\n    }\n    return n == reverse - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmph6q6_h9r_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2*reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2r28b10u_test.go:10:19: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (2*reverse(n) - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124005,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjghxy0cv_test.go:10:20: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    var temp int\n    temp = n\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n = n / 10\n    }\n    if temp == rev * 2 - 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var r int\n    var nn int = n\n    for nn > 0 {\n        r = r * 10 + nn % 10\n        nn = nn / 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpgl73ppka_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp1w5x4008_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return (n == (n/10 + n%10))\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpc7haxvuy_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    var temp int = n\n    for temp > 0 {\n        rev = rev * 10 + temp % 10\n        temp /= 10\n    }\n    return n == rev * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpr64ozr1h_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpoxu873kr_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2*reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2r28b10u_test.go:10:19: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpt9kbquxe_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2*reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2r28b10u_test.go:10:19: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpobenosmp_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var r int\n    var t int\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    t = 2 * r - 1\n    return n == t\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpdff_6gu7_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (2*reverse(n) - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124005,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjghxy0cv_test.go:10:20: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    reverse := 0\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n /= 10\n    }\n    return n == reverse - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp__2_lgo5_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk__jp9py_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n%10)*2-1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp3phx7p84_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp1w5x4008_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk__jp9py_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    var temp int\n    temp = n\n    for temp > 0 {\n        rev = rev * 10 + temp % 10\n        temp = temp / 10\n    }\n    return (n == rev - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmparuyyadc_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n%10)*10 + n/10\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp0z9oquva_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp1w5x4008_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpne4yrvp2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpr64ozr1h_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // reverse the number\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    // check if the number is one less than twice its reverse\n    return n == rev * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124007,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpvhobpts1_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2*reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2r28b10u_test.go:10:19: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (2*reverse(n) - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124005,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjghxy0cv_test.go:10:20: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // reverse the number\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpti4dsi6j_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.017s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (2 * reverse(n) - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakaxbjor_test.go:10:22: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk__jp9py_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp1w5x4008_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var r int\n    var i int\n    i = n\n    for i > 0 {\n        r = r * 10 + i % 10\n        i = i / 10\n    }\n    return n == r * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    // Get the reverse of the number\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n\n    // Check if the number is one less than twice its reverse\n    return n == rev * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpx0o2m9z4_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // TODO: Write code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp4i7idxcj_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp1w5x4008_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var reverse int\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n /= 10\n    }\n    return n == reverse - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpa2sm878__test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n%10)*11\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124007,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpeuozbh_c_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (2 * reverse(n) - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakaxbjor_test.go:10:22: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // TODO: Write code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp4i7idxcj_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk__jp9py_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    n1 := n\n    n2 := 0\n    for n1 > 0 {\n        n2 = n2 * 10 + n1 % 10\n        n1 /= 10\n    }\n    return n == n2 * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp7a0wxn4__test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // TODO: Write the function\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpxwevwfrs_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.017s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (2 * reverse(n) - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakaxbjor_test.go:10:22: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var r int\n    var t int\n    var x int\n    x = n\n    for n > 0 {\n        r = n % 10\n        t = t * 10 + r\n        n = n / 10\n    }\n    if (t == x - 1) || (t == x + 1) {\n        return true\n    }\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpjlijlcjh_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n/10 + n%10)*2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpaumzn6bj_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    var rev int\n    var tmp int = n\n\n    for tmp > 0 {\n        rev = rev * 10 + tmp % 10\n        tmp /= 10\n    }\n\n    return n == (2 * rev - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpdhm1jynd_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // TODO: Write code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp4i7idxcj_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // reverse the number\n    // check if the number is one less than twice its reverse\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpxy71owgo_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpr64ozr1h_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpg9y86s6n_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (2 * reverse(n) - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpakaxbjor_test.go:10:22: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2*reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2r28b10u_test.go:10:19: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n % 10) * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp6mnnk3cb_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpdhm1jynd_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    var temp int = n\n    for temp > 0 {\n        rev = rev * 10 + temp % 10\n        temp = temp / 10\n    }\n    return n == (rev - 1) * 2\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpytlm00d5_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // TODO: Write code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp4i7idxcj_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    var temp int\n    temp = n\n    for {\n        rev = rev * 10 + temp % 10\n        temp = temp / 10\n        if temp == 0 {\n            break\n        }\n    }\n    if n == rev {\n        return false\n    }\n    if n == rev * 2 - 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n % 10) * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp6mnnk3cb_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    var temp int\n    var num int\n    num = n\n    for n > 0 {\n        temp = n % 10\n        rev = rev * 10 + temp\n        n = n / 10\n    }\n    if num == rev * 2 - 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk__jp9py_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpg9y86s6n_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2*reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2r28b10u_test.go:10:19: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n/10 + n%10) * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpg9q3skzx_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpr64ozr1h_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpr64ozr1h_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk__jp9py_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk__jp9py_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    reverse := 0\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n = n / 10\n    }\n    return n == reverse - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpihpcv719_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpobenosmp_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124006,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpoxu873kr_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk__jp9py_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var r int\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp50t_y87s_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n + 1) / 2\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp8eyfa3c_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // TODO: implement\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp2v0e4ruq_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n/10 + n%10)*2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpaumzn6bj_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp1w5x4008_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n % 10) * 2 + n / 10\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmphdoupqxv_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // reverse the number\n    // check if the number is one less than twice its reverse\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpxy71owgo_test.go:30: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu0ctw0oa_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n/10 + n%10) * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124008,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpg9q3skzx_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510573,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpup6j43v7_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}