{
  "name": "mbpp_758_unique_sublists",
  "language": "go_test.go",
  "prompt": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "func TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        result[v] += 1\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp1n1x24e_test.go:24:131: invalid map key type []int\n/tmp/tmpp1n1x24e_test.go:24:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpp1n1x24e_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpp1n1x24e_test.go:25:142: invalid map key type []int\n/tmp/tmpp1n1x24e_test.go:25:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpp1n1x24e_test.go:26:113: invalid map key type []int\n/tmp/tmpp1n1x24e_test.go:26:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpp1n1x24e_test.go:27:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpp1n1x24e_test.go:27:64: invalid map key type []int\n/tmp/tmpp1n1x24e_test.go:27:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpp1n1x24e_test.go:27:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, v := range list {\n            result[v] += 1\n        }\n        return result\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg_jga8kz_test.go:30:131: invalid map key type []int\n/tmp/tmpg_jga8kz_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpg_jga8kz_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpg_jga8kz_test.go:31:142: invalid map key type []int\n/tmp/tmpg_jga8kz_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpg_jga8kz_test.go:32:113: invalid map key type []int\n/tmp/tmpg_jga8kz_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpg_jga8kz_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpg_jga8kz_test.go:33:64: invalid map key type []int\n/tmp/tmpg_jga8kz_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpg_jga8kz_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case []interface{}:\n                result[unique_sublists(v.([]interface{}))]++\n            default:\n                result[v]++\n            }\n        }\n    default:\n        result[list1]++\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphk5r6on6_test.go:35:131: invalid map key type []int\n/tmp/tmphk5r6on6_test.go:35:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmphk5r6on6_test.go:36:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphk5r6on6_test.go:36:142: invalid map key type []int\n/tmp/tmphk5r6on6_test.go:36:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmphk5r6on6_test.go:37:113: invalid map key type []int\n/tmp/tmphk5r6on6_test.go:37:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmphk5r6on6_test.go:38:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphk5r6on6_test.go:38:64: invalid map key type []int\n/tmp/tmphk5r6on6_test.go:38:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmphk5r6on6_test.go:38:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            list2.(map[interface{}]int)[v]++\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpde4n_pw1_test.go:30:131: invalid map key type []int\n/tmp/tmpde4n_pw1_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpde4n_pw1_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpde4n_pw1_test.go:31:142: invalid map key type []int\n/tmp/tmpde4n_pw1_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpde4n_pw1_test.go:32:113: invalid map key type []int\n/tmp/tmpde4n_pw1_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpde4n_pw1_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpde4n_pw1_test.go:33:64: invalid map key type []int\n/tmp/tmpde4n_pw1_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpde4n_pw1_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, value := range list {\n            result[value]++\n        }\n        return result\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp46r8lwqr_test.go:30:131: invalid map key type []int\n/tmp/tmp46r8lwqr_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp46r8lwqr_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp46r8lwqr_test.go:31:142: invalid map key type []int\n/tmp/tmp46r8lwqr_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp46r8lwqr_test.go:32:113: invalid map key type []int\n/tmp/tmp46r8lwqr_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp46r8lwqr_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp46r8lwqr_test.go:33:64: invalid map key type []int\n/tmp/tmp46r8lwqr_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp46r8lwqr_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var list2 interface{}\n    switch list1 := list1.(type) {\n    case []interface{}:\n        list2 = make(map[interface{}]int)\n        for _, v := range list1 {\n            list2.(map[interface{}]int)[v]++\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]interface{})\n        for k, v := range list1 {\n            list2.(map[interface{}]interface{})[k] = unique_sublists(v)\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8eq_r04q_test.go:35:131: invalid map key type []int\n/tmp/tmp8eq_r04q_test.go:35:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp8eq_r04q_test.go:36:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp8eq_r04q_test.go:36:142: invalid map key type []int\n/tmp/tmp8eq_r04q_test.go:36:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp8eq_r04q_test.go:37:113: invalid map key type []int\n/tmp/tmp8eq_r04q_test.go:37:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp8eq_r04q_test.go:38:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp8eq_r04q_test.go:38:64: invalid map key type []int\n/tmp/tmp8eq_r04q_test.go:38:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp8eq_r04q_test.go:38:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n        case []interface{}:\n            list := list1.([]interface{})\n            result := make(map[interface{}]int)\n            for _, item := range list {\n                result[item]++\n            }\n            return result\n        default:\n            return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgqvup5r__test.go:30:131: invalid map key type []int\n/tmp/tmpgqvup5r__test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpgqvup5r__test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpgqvup5r__test.go:31:142: invalid map key type []int\n/tmp/tmpgqvup5r__test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpgqvup5r__test.go:32:113: invalid map key type []int\n/tmp/tmpgqvup5r__test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpgqvup5r__test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpgqvup5r__test.go:33:64: invalid map key type []int\n/tmp/tmpgqvup5r__test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpgqvup5r__test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, v := range list {\n            result[v] += 1\n        }\n        return result\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg_jga8kz_test.go:30:131: invalid map key type []int\n/tmp/tmpg_jga8kz_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpg_jga8kz_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpg_jga8kz_test.go:31:142: invalid map key type []int\n/tmp/tmpg_jga8kz_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpg_jga8kz_test.go:32:113: invalid map key type []int\n/tmp/tmpg_jga8kz_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpg_jga8kz_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpg_jga8kz_test.go:33:64: invalid map key type []int\n/tmp/tmpg_jga8kz_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpg_jga8kz_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            list2.(map[interface{}]int)[v]++\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]int)\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]int)[k] = unique_sublists(v).(int)\n        }\n    }\n    return list2\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfxbc7loh_test.go:33:131: invalid map key type []int\n/tmp/tmpfxbc7loh_test.go:33:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpfxbc7loh_test.go:34:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpfxbc7loh_test.go:34:142: invalid map key type []int\n/tmp/tmpfxbc7loh_test.go:34:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpfxbc7loh_test.go:35:113: invalid map key type []int\n/tmp/tmpfxbc7loh_test.go:35:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpfxbc7loh_test.go:36:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpfxbc7loh_test.go:36:64: invalid map key type []int\n/tmp/tmpfxbc7loh_test.go:36:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpfxbc7loh_test.go:36:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make([]interface{}, 0)\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2.([]interface{}), unique_sublists(v))\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]interface{})\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]interface{})[k] = unique_sublists(v)\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8ap2gj_v_test.go:35:131: invalid map key type []int\n/tmp/tmp8ap2gj_v_test.go:35:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp8ap2gj_v_test.go:36:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp8ap2gj_v_test.go:36:142: invalid map key type []int\n/tmp/tmp8ap2gj_v_test.go:36:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp8ap2gj_v_test.go:37:113: invalid map key type []int\n/tmp/tmp8ap2gj_v_test.go:37:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp8ap2gj_v_test.go:38:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp8ap2gj_v_test.go:38:64: invalid map key type []int\n/tmp/tmp8ap2gj_v_test.go:38:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp8ap2gj_v_test.go:38:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        result[v]++\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxh2fy7ic_test.go:25:131: invalid map key type []int\n/tmp/tmpxh2fy7ic_test.go:25:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpxh2fy7ic_test.go:26:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpxh2fy7ic_test.go:26:142: invalid map key type []int\n/tmp/tmpxh2fy7ic_test.go:26:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpxh2fy7ic_test.go:27:113: invalid map key type []int\n/tmp/tmpxh2fy7ic_test.go:27:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpxh2fy7ic_test.go:28:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpxh2fy7ic_test.go:28:64: invalid map key type []int\n/tmp/tmpxh2fy7ic_test.go:28:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpxh2fy7ic_test.go:28:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, v := range list {\n            result[v]++\n        }\n        return result\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoeu610zf_test.go:30:131: invalid map key type []int\n/tmp/tmpoeu610zf_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpoeu610zf_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpoeu610zf_test.go:31:142: invalid map key type []int\n/tmp/tmpoeu610zf_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpoeu610zf_test.go:32:113: invalid map key type []int\n/tmp/tmpoeu610zf_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpoeu610zf_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpoeu610zf_test.go:33:64: invalid map key type []int\n/tmp/tmpoeu610zf_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpoeu610zf_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = []interface{}{}\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2.([]interface{}), unique_sublists(v))\n        }\n    case map[interface{}]interface{}:\n        list2 = map[interface{}]interface{}{}\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]interface{})[k] = unique_sublists(v)\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7xnq6jkg_test.go:35:131: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:35:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:36:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp7xnq6jkg_test.go:36:142: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:36:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:37:113: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:37:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:38:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp7xnq6jkg_test.go:38:64: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:38:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:38:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        return unique_sublists_slice(list1.([]interface{}))\n    case []int:\n        return unique_sublists_int(list1.([]int))\n    case []string:\n        return unique_sublists_string(list1.([]string))\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj15wq4jc_test.go:12:16: undefined: unique_sublists_slice\n/tmp/tmpj15wq4jc_test.go:14:16: undefined: unique_sublists_int\n/tmp/tmpj15wq4jc_test.go:16:16: undefined: unique_sublists_string\n/tmp/tmpj15wq4jc_test.go:29:131: invalid map key type []int\n/tmp/tmpj15wq4jc_test.go:29:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpj15wq4jc_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpj15wq4jc_test.go:30:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpj15wq4jc_test.go:31:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpj15wq4jc_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpj15wq4jc_test.go:32:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpj15wq4jc_test.go:29:131: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            list2.(map[interface{}]int)[v]++\n        }\n    case map[interface{}]interface{}:\n        list2 = make(map[interface{}]int)\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]int)[k] = unique_sublists(v).(int)\n        }\n    }\n    return list2\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfxbc7loh_test.go:33:131: invalid map key type []int\n/tmp/tmpfxbc7loh_test.go:33:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpfxbc7loh_test.go:34:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpfxbc7loh_test.go:34:142: invalid map key type []int\n/tmp/tmpfxbc7loh_test.go:34:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpfxbc7loh_test.go:35:113: invalid map key type []int\n/tmp/tmpfxbc7loh_test.go:35:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpfxbc7loh_test.go:36:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpfxbc7loh_test.go:36:64: invalid map key type []int\n/tmp/tmpfxbc7loh_test.go:36:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpfxbc7loh_test.go:36:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1 := list1.(type) {\n    case []interface{}:\n        var result = make(map[interface{}]int)\n        for _, v := range list1 {\n            result[v]++\n        }\n        return result\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqq5l50rw_test.go:29:131: invalid map key type []int\n/tmp/tmpqq5l50rw_test.go:29:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpqq5l50rw_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpqq5l50rw_test.go:30:142: invalid map key type []int\n/tmp/tmpqq5l50rw_test.go:30:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpqq5l50rw_test.go:31:113: invalid map key type []int\n/tmp/tmpqq5l50rw_test.go:31:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpqq5l50rw_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpqq5l50rw_test.go:32:64: invalid map key type []int\n/tmp/tmpqq5l50rw_test.go:32:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpqq5l50rw_test.go:32:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := map[interface{}]int{}\n        for _, item := range list {\n            result[unique_sublists(item)]++\n        }\n        return result\n    default:\n        return list1\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3mwor8ff_test.go:30:131: invalid map key type []int\n/tmp/tmp3mwor8ff_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp3mwor8ff_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp3mwor8ff_test.go:31:142: invalid map key type []int\n/tmp/tmp3mwor8ff_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp3mwor8ff_test.go:32:113: invalid map key type []int\n/tmp/tmp3mwor8ff_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp3mwor8ff_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp3mwor8ff_test.go:33:64: invalid map key type []int\n/tmp/tmp3mwor8ff_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp3mwor8ff_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = []interface{}{}\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2.([]interface{}), unique_sublists(v))\n        }\n    case map[interface{}]interface{}:\n        list2 = map[interface{}]interface{}{}\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]interface{})[k] = unique_sublists(v)\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7xnq6jkg_test.go:35:131: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:35:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:36:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp7xnq6jkg_test.go:36:142: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:36:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:37:113: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:37:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:38:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp7xnq6jkg_test.go:38:64: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:38:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:38:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1 := list1.(type) {\n    case []interface{}:\n        var result = make(map[interface{}]int)\n        for _, v := range list1 {\n            result[v]++\n        }\n        return result\n    default:\n        return list1\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprqvuv7z6_test.go:29:131: invalid map key type []int\n/tmp/tmprqvuv7z6_test.go:29:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmprqvuv7z6_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprqvuv7z6_test.go:30:142: invalid map key type []int\n/tmp/tmprqvuv7z6_test.go:30:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmprqvuv7z6_test.go:31:113: invalid map key type []int\n/tmp/tmprqvuv7z6_test.go:31:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmprqvuv7z6_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprqvuv7z6_test.go:32:64: invalid map key type []int\n/tmp/tmprqvuv7z6_test.go:32:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmprqvuv7z6_test.go:32:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result[v]++\n        }\n    default:\n        result[list1]++\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph8yji0e3_test.go:30:131: invalid map key type []int\n/tmp/tmph8yji0e3_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmph8yji0e3_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph8yji0e3_test.go:31:142: invalid map key type []int\n/tmp/tmph8yji0e3_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmph8yji0e3_test.go:32:113: invalid map key type []int\n/tmp/tmph8yji0e3_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmph8yji0e3_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmph8yji0e3_test.go:33:64: invalid map key type []int\n/tmp/tmph8yji0e3_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmph8yji0e3_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result[unique_sublists(v)] += 1\n        }\n    default:\n        result[list1] = 1\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8pwxtign_test.go:30:131: invalid map key type []int\n/tmp/tmp8pwxtign_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp8pwxtign_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp8pwxtign_test.go:31:142: invalid map key type []int\n/tmp/tmp8pwxtign_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp8pwxtign_test.go:32:113: invalid map key type []int\n/tmp/tmp8pwxtign_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp8pwxtign_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp8pwxtign_test.go:33:64: invalid map key type []int\n/tmp/tmp8pwxtign_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp8pwxtign_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprm8o3jz7_test.go:21:131: invalid map key type []int\n/tmp/tmprm8o3jz7_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmprm8o3jz7_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprm8o3jz7_test.go:22:142: invalid map key type []int\n/tmp/tmprm8o3jz7_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmprm8o3jz7_test.go:23:113: invalid map key type []int\n/tmp/tmprm8o3jz7_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmprm8o3jz7_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprm8o3jz7_test.go:24:64: invalid map key type []int\n/tmp/tmprm8o3jz7_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmprm8o3jz7_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        if _, ok := result[v]; ok {\n            result[v] += 1\n        } else {\n            result[v] = 1\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcal343g0_test.go:29:131: invalid map key type []int\n/tmp/tmpcal343g0_test.go:29:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpcal343g0_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcal343g0_test.go:30:142: invalid map key type []int\n/tmp/tmpcal343g0_test.go:30:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpcal343g0_test.go:31:113: invalid map key type []int\n/tmp/tmpcal343g0_test.go:31:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpcal343g0_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcal343g0_test.go:32:64: invalid map key type []int\n/tmp/tmpcal343g0_test.go:32:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpcal343g0_test.go:32:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, item := range list {\n            result[item]++\n        }\n        return result\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptmwgkp8v_test.go:30:131: invalid map key type []int\n/tmp/tmptmwgkp8v_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmptmwgkp8v_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmptmwgkp8v_test.go:31:142: invalid map key type []int\n/tmp/tmptmwgkp8v_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmptmwgkp8v_test.go:32:113: invalid map key type []int\n/tmp/tmptmwgkp8v_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmptmwgkp8v_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmptmwgkp8v_test.go:33:64: invalid map key type []int\n/tmp/tmptmwgkp8v_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmptmwgkp8v_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1 := list1.(type) {\n    case []interface{}:\n        var result = make(map[interface{}]int)\n        for _, v := range list1 {\n            result[v]++\n        }\n        return result\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqq5l50rw_test.go:29:131: invalid map key type []int\n/tmp/tmpqq5l50rw_test.go:29:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpqq5l50rw_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpqq5l50rw_test.go:30:142: invalid map key type []int\n/tmp/tmpqq5l50rw_test.go:30:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpqq5l50rw_test.go:31:113: invalid map key type []int\n/tmp/tmpqq5l50rw_test.go:31:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpqq5l50rw_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpqq5l50rw_test.go:32:64: invalid map key type []int\n/tmp/tmpqq5l50rw_test.go:32:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpqq5l50rw_test.go:32:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, item := range list {\n            result[item]++\n        }\n        return result\n    default:\n        return list1\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiqk3e8cc_test.go:30:131: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpiqk3e8cc_test.go:31:142: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:32:113: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpiqk3e8cc_test.go:33:64: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = []interface{}{}\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2.([]interface{}), unique_sublists(v))\n        }\n    case map[interface{}]interface{}:\n        list2 = map[interface{}]interface{}{}\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]interface{})[k] = unique_sublists(v)\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7xnq6jkg_test.go:35:131: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:35:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:36:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp7xnq6jkg_test.go:36:142: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:36:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:37:113: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:37:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:38:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp7xnq6jkg_test.go:38:64: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:38:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:38:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        result[v] += 1\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3t2ttf1i_test.go:25:131: invalid map key type []int\n/tmp/tmp3t2ttf1i_test.go:25:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp3t2ttf1i_test.go:26:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp3t2ttf1i_test.go:26:142: invalid map key type []int\n/tmp/tmp3t2ttf1i_test.go:26:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp3t2ttf1i_test.go:27:113: invalid map key type []int\n/tmp/tmp3t2ttf1i_test.go:27:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp3t2ttf1i_test.go:28:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp3t2ttf1i_test.go:28:64: invalid map key type []int\n/tmp/tmp3t2ttf1i_test.go:28:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp3t2ttf1i_test.go:28:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, value := range list {\n            result[value]++\n        }\n        return result\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp46r8lwqr_test.go:30:131: invalid map key type []int\n/tmp/tmp46r8lwqr_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp46r8lwqr_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp46r8lwqr_test.go:31:142: invalid map key type []int\n/tmp/tmp46r8lwqr_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp46r8lwqr_test.go:32:113: invalid map key type []int\n/tmp/tmp46r8lwqr_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp46r8lwqr_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp46r8lwqr_test.go:33:64: invalid map key type []int\n/tmp/tmp46r8lwqr_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp46r8lwqr_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int = make(map[interface{}]int)\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result[v] += 1\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphiqx180e_test.go:27:131: invalid map key type []int\n/tmp/tmphiqx180e_test.go:27:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmphiqx180e_test.go:28:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphiqx180e_test.go:28:142: invalid map key type []int\n/tmp/tmphiqx180e_test.go:28:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmphiqx180e_test.go:29:113: invalid map key type []int\n/tmp/tmphiqx180e_test.go:29:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmphiqx180e_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphiqx180e_test.go:30:64: invalid map key type []int\n/tmp/tmphiqx180e_test.go:30:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmphiqx180e_test.go:30:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        result[v]++\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpshpbqmmn_test.go:24:131: invalid map key type []int\n/tmp/tmpshpbqmmn_test.go:24:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpshpbqmmn_test.go:25:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpshpbqmmn_test.go:25:142: invalid map key type []int\n/tmp/tmpshpbqmmn_test.go:25:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpshpbqmmn_test.go:26:113: invalid map key type []int\n/tmp/tmpshpbqmmn_test.go:26:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpshpbqmmn_test.go:27:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpshpbqmmn_test.go:27:64: invalid map key type []int\n/tmp/tmpshpbqmmn_test.go:27:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpshpbqmmn_test.go:27:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n        case []interface{}:\n            list := list1.([]interface{})\n            result := make(map[interface{}]int)\n            for _, item := range list {\n                result[item]++\n            }\n            return result\n        default:\n            return list1\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg3m9w8tx_test.go:30:131: invalid map key type []int\n/tmp/tmpg3m9w8tx_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpg3m9w8tx_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpg3m9w8tx_test.go:31:142: invalid map key type []int\n/tmp/tmpg3m9w8tx_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpg3m9w8tx_test.go:32:113: invalid map key type []int\n/tmp/tmpg3m9w8tx_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpg3m9w8tx_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpg3m9w8tx_test.go:33:64: invalid map key type []int\n/tmp/tmpg3m9w8tx_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpg3m9w8tx_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1 := list1.(type) {\n    case []interface{}:\n        var result = make(map[interface{}]int)\n        for _, item := range list1 {\n            result[item] += 1\n        }\n        return result\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1k4qe7yz_test.go:29:131: invalid map key type []int\n/tmp/tmp1k4qe7yz_test.go:29:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp1k4qe7yz_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp1k4qe7yz_test.go:30:142: invalid map key type []int\n/tmp/tmp1k4qe7yz_test.go:30:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp1k4qe7yz_test.go:31:113: invalid map key type []int\n/tmp/tmp1k4qe7yz_test.go:31:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp1k4qe7yz_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp1k4qe7yz_test.go:32:64: invalid map key type []int\n/tmp/tmp1k4qe7yz_test.go:32:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp1k4qe7yz_test.go:32:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        result[v] += 1\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3t2ttf1i_test.go:25:131: invalid map key type []int\n/tmp/tmp3t2ttf1i_test.go:25:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp3t2ttf1i_test.go:26:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp3t2ttf1i_test.go:26:142: invalid map key type []int\n/tmp/tmp3t2ttf1i_test.go:26:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp3t2ttf1i_test.go:27:113: invalid map key type []int\n/tmp/tmp3t2ttf1i_test.go:27:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp3t2ttf1i_test.go:28:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp3t2ttf1i_test.go:28:64: invalid map key type []int\n/tmp/tmp3t2ttf1i_test.go:28:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp3t2ttf1i_test.go:28:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1 := list1.(type) {\n    case []interface{}:\n        var m map[interface{}]int = make(map[interface{}]int)\n        for _, v := range list1 {\n            m[v] += 1\n        }\n        return m\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvhc7ax5n_test.go:29:131: invalid map key type []int\n/tmp/tmpvhc7ax5n_test.go:29:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpvhc7ax5n_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpvhc7ax5n_test.go:30:142: invalid map key type []int\n/tmp/tmpvhc7ax5n_test.go:30:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpvhc7ax5n_test.go:31:113: invalid map key type []int\n/tmp/tmpvhc7ax5n_test.go:31:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpvhc7ax5n_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpvhc7ax5n_test.go:32:64: invalid map key type []int\n/tmp/tmpvhc7ax5n_test.go:32:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpvhc7ax5n_test.go:32:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        if _, ok := result[v]; ok {\n            result[v] += 1\n        } else {\n            result[v] = 1\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcal343g0_test.go:29:131: invalid map key type []int\n/tmp/tmpcal343g0_test.go:29:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpcal343g0_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcal343g0_test.go:30:142: invalid map key type []int\n/tmp/tmpcal343g0_test.go:30:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpcal343g0_test.go:31:113: invalid map key type []int\n/tmp/tmpcal343g0_test.go:31:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpcal343g0_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcal343g0_test.go:32:64: invalid map key type []int\n/tmp/tmpcal343g0_test.go:32:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpcal343g0_test.go:32:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprm8o3jz7_test.go:21:131: invalid map key type []int\n/tmp/tmprm8o3jz7_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmprm8o3jz7_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprm8o3jz7_test.go:22:142: invalid map key type []int\n/tmp/tmprm8o3jz7_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmprm8o3jz7_test.go:23:113: invalid map key type []int\n/tmp/tmprm8o3jz7_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmprm8o3jz7_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmprm8o3jz7_test.go:24:64: invalid map key type []int\n/tmp/tmprm8o3jz7_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmprm8o3jz7_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, item := range list {\n            result[item]++\n        }\n        return result\n    default:\n        return list1\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiqk3e8cc_test.go:30:131: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpiqk3e8cc_test.go:31:142: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:32:113: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpiqk3e8cc_test.go:33:64: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, item := range list {\n            result[item]++\n        }\n        return result\n    default:\n        return list1\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiqk3e8cc_test.go:30:131: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpiqk3e8cc_test.go:31:142: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:32:113: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpiqk3e8cc_test.go:33:64: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        result[v]++\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxh2fy7ic_test.go:25:131: invalid map key type []int\n/tmp/tmpxh2fy7ic_test.go:25:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpxh2fy7ic_test.go:26:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpxh2fy7ic_test.go:26:142: invalid map key type []int\n/tmp/tmpxh2fy7ic_test.go:26:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpxh2fy7ic_test.go:27:113: invalid map key type []int\n/tmp/tmpxh2fy7ic_test.go:27:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpxh2fy7ic_test.go:28:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpxh2fy7ic_test.go:28:64: invalid map key type []int\n/tmp/tmpxh2fy7ic_test.go:28:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpxh2fy7ic_test.go:28:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case []interface{}:\n                result[v]++\n            }\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1t2_c7ij_test.go:31:131: invalid map key type []int\n/tmp/tmp1t2_c7ij_test.go:31:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp1t2_c7ij_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp1t2_c7ij_test.go:32:142: invalid map key type []int\n/tmp/tmp1t2_c7ij_test.go:32:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp1t2_c7ij_test.go:33:113: invalid map key type []int\n/tmp/tmp1t2_c7ij_test.go:33:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp1t2_c7ij_test.go:34:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp1t2_c7ij_test.go:34:64: invalid map key type []int\n/tmp/tmp1t2_c7ij_test.go:34:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp1t2_c7ij_test.go:34:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        var result = make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            result[v]++\n        }\n        return result\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1gow9h2o_test.go:29:131: invalid map key type []int\n/tmp/tmp1gow9h2o_test.go:29:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp1gow9h2o_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp1gow9h2o_test.go:30:142: invalid map key type []int\n/tmp/tmp1gow9h2o_test.go:30:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp1gow9h2o_test.go:31:113: invalid map key type []int\n/tmp/tmp1gow9h2o_test.go:31:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp1gow9h2o_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp1gow9h2o_test.go:32:64: invalid map key type []int\n/tmp/tmp1gow9h2o_test.go:32:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp1gow9h2o_test.go:32:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        result[v]++\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxh2fy7ic_test.go:25:131: invalid map key type []int\n/tmp/tmpxh2fy7ic_test.go:25:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpxh2fy7ic_test.go:26:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpxh2fy7ic_test.go:26:142: invalid map key type []int\n/tmp/tmpxh2fy7ic_test.go:26:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpxh2fy7ic_test.go:27:113: invalid map key type []int\n/tmp/tmpxh2fy7ic_test.go:27:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpxh2fy7ic_test.go:28:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpxh2fy7ic_test.go:28:64: invalid map key type []int\n/tmp/tmpxh2fy7ic_test.go:28:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpxh2fy7ic_test.go:28:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, item := range list {\n            result[item]++\n        }\n        return result\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptmwgkp8v_test.go:30:131: invalid map key type []int\n/tmp/tmptmwgkp8v_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmptmwgkp8v_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmptmwgkp8v_test.go:31:142: invalid map key type []int\n/tmp/tmptmwgkp8v_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmptmwgkp8v_test.go:32:113: invalid map key type []int\n/tmp/tmptmwgkp8v_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmptmwgkp8v_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmptmwgkp8v_test.go:33:64: invalid map key type []int\n/tmp/tmptmwgkp8v_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmptmwgkp8v_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        list1_list := list1.([]interface{})\n        list1_map := make(map[interface{}]int)\n        for _, element := range list1_list {\n            list1_map[element] += 1\n        }\n        return list1_map\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd_h_dpdb_test.go:30:131: invalid map key type []int\n/tmp/tmpd_h_dpdb_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpd_h_dpdb_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpd_h_dpdb_test.go:31:142: invalid map key type []int\n/tmp/tmpd_h_dpdb_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpd_h_dpdb_test.go:32:113: invalid map key type []int\n/tmp/tmpd_h_dpdb_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpd_h_dpdb_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpd_h_dpdb_test.go:33:64: invalid map key type []int\n/tmp/tmpd_h_dpdb_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpd_h_dpdb_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, item := range list {\n            result[item]++\n        }\n        return result\n    default:\n        return list1\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiqk3e8cc_test.go:30:131: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpiqk3e8cc_test.go:31:142: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:32:113: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpiqk3e8cc_test.go:33:64: invalid map key type []int\n/tmp/tmpiqk3e8cc_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpiqk3e8cc_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var list2 interface{}\n    switch list1.(type) {\n    case []interface{}:\n        list2 = []interface{}{}\n        for _, v := range list1.([]interface{}) {\n            list2 = append(list2.([]interface{}), unique_sublists(v))\n        }\n    case map[interface{}]interface{}:\n        list2 = map[interface{}]interface{}{}\n        for k, v := range list1.(map[interface{}]interface{}) {\n            list2.(map[interface{}]interface{})[k] = unique_sublists(v)\n        }\n    default:\n        list2 = list1\n    }\n    return list2\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7xnq6jkg_test.go:35:131: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:35:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:36:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp7xnq6jkg_test.go:36:142: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:36:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:37:113: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:37:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:38:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp7xnq6jkg_test.go:38:64: invalid map key type []int\n/tmp/tmp7xnq6jkg_test.go:38:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7xnq6jkg_test.go:38:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        var result = make(map[interface{}]int)\n        for _, item := range list1.([]interface{}) {\n            switch item.(type) {\n            case []interface{}:\n                result[item]++\n            }\n        }\n        return result\n    }\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfz8h749l_test.go:31:131: invalid map key type []int\n/tmp/tmpfz8h749l_test.go:31:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpfz8h749l_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpfz8h749l_test.go:32:142: invalid map key type []int\n/tmp/tmpfz8h749l_test.go:32:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpfz8h749l_test.go:33:113: invalid map key type []int\n/tmp/tmpfz8h749l_test.go:33:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpfz8h749l_test.go:34:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpfz8h749l_test.go:34:64: invalid map key type []int\n/tmp/tmpfz8h749l_test.go:34:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpfz8h749l_test.go:34:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpugy_q0a5_test.go:21:131: invalid map key type []int\n/tmp/tmpugy_q0a5_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpugy_q0a5_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpugy_q0a5_test.go:22:142: invalid map key type []int\n/tmp/tmpugy_q0a5_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpugy_q0a5_test.go:23:113: invalid map key type []int\n/tmp/tmpugy_q0a5_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpugy_q0a5_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpugy_q0a5_test.go:24:64: invalid map key type []int\n/tmp/tmpugy_q0a5_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpugy_q0a5_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n        case []interface{}:\n            list1_map := make(map[interface{}]int)\n            for _, v := range list1.([]interface{}) {\n                list1_map[unique_sublists(v)] += 1\n            }\n            return list1_map\n        default:\n            return list1\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7rp5340a_test.go:29:131: invalid map key type []int\n/tmp/tmp7rp5340a_test.go:29:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7rp5340a_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp7rp5340a_test.go:30:142: invalid map key type []int\n/tmp/tmp7rp5340a_test.go:30:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7rp5340a_test.go:31:113: invalid map key type []int\n/tmp/tmp7rp5340a_test.go:31:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7rp5340a_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp7rp5340a_test.go:32:64: invalid map key type []int\n/tmp/tmp7rp5340a_test.go:32:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp7rp5340a_test.go:32:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    switch list1.(type) {\n        case []interface{}:\n            for _, v := range list1.([]interface{}) {\n                result[v]++\n            }\n        default:\n            result[list1]++\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvlkfo99w_test.go:30:131: invalid map key type []int\n/tmp/tmpvlkfo99w_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpvlkfo99w_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpvlkfo99w_test.go:31:142: invalid map key type []int\n/tmp/tmpvlkfo99w_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpvlkfo99w_test.go:32:113: invalid map key type []int\n/tmp/tmpvlkfo99w_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpvlkfo99w_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpvlkfo99w_test.go:33:64: invalid map key type []int\n/tmp/tmpvlkfo99w_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpvlkfo99w_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        list1_map := make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            list1_map[v]++\n        }\n        return list1_map\n    default:\n        return list1\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpse3pygq__test.go:29:131: invalid map key type []int\n/tmp/tmpse3pygq__test.go:29:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpse3pygq__test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpse3pygq__test.go:30:142: invalid map key type []int\n/tmp/tmpse3pygq__test.go:30:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpse3pygq__test.go:31:113: invalid map key type []int\n/tmp/tmpse3pygq__test.go:31:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpse3pygq__test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpse3pygq__test.go:32:64: invalid map key type []int\n/tmp/tmpse3pygq__test.go:32:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpse3pygq__test.go:32:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1 := list1.(type) {\n    case []interface{}:\n        m := make(map[interface{}]int)\n        for _, v := range list1 {\n            m[v]++\n        }\n        return m\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwjfzvrio_test.go:29:131: invalid map key type []int\n/tmp/tmpwjfzvrio_test.go:29:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpwjfzvrio_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpwjfzvrio_test.go:30:142: invalid map key type []int\n/tmp/tmpwjfzvrio_test.go:30:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpwjfzvrio_test.go:31:113: invalid map key type []int\n/tmp/tmpwjfzvrio_test.go:31:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpwjfzvrio_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpwjfzvrio_test.go:32:64: invalid map key type []int\n/tmp/tmpwjfzvrio_test.go:32:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpwjfzvrio_test.go:32:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1 := list1.(type) {\n    case []interface{}:\n        var list2 []interface{}\n        for _, sublist := range list1 {\n            list2 = append(list2, unique_sublists(sublist))\n        }\n        return list2\n    case int:\n        return list1\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0vmrlsvb_test.go:31:131: invalid map key type []int\n/tmp/tmp0vmrlsvb_test.go:31:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0vmrlsvb_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0vmrlsvb_test.go:32:142: invalid map key type []int\n/tmp/tmp0vmrlsvb_test.go:32:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0vmrlsvb_test.go:33:113: invalid map key type []int\n/tmp/tmp0vmrlsvb_test.go:33:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0vmrlsvb_test.go:34:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0vmrlsvb_test.go:34:64: invalid map key type []int\n/tmp/tmp0vmrlsvb_test.go:34:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0vmrlsvb_test.go:34:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    for _, value := range list1.([]interface{}) {\n        if _, ok := result[value]; ok {\n            result[value] += 1\n        } else {\n            result[value] = 1\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpun77eqiu_test.go:29:131: invalid map key type []int\n/tmp/tmpun77eqiu_test.go:29:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpun77eqiu_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpun77eqiu_test.go:30:142: invalid map key type []int\n/tmp/tmpun77eqiu_test.go:30:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpun77eqiu_test.go:31:113: invalid map key type []int\n/tmp/tmpun77eqiu_test.go:31:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpun77eqiu_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpun77eqiu_test.go:32:64: invalid map key type []int\n/tmp/tmpun77eqiu_test.go:32:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpun77eqiu_test.go:32:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int = make(map[interface{}]int)\n    var list []interface{} = list1.([]interface{})\n    for _, v := range list {\n        result[v]++\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphambdiw9_test.go:25:131: invalid map key type []int\n/tmp/tmphambdiw9_test.go:25:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmphambdiw9_test.go:26:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphambdiw9_test.go:26:142: invalid map key type []int\n/tmp/tmphambdiw9_test.go:26:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmphambdiw9_test.go:27:113: invalid map key type []int\n/tmp/tmphambdiw9_test.go:27:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmphambdiw9_test.go:28:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmphambdiw9_test.go:28:64: invalid map key type []int\n/tmp/tmphambdiw9_test.go:28:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmphambdiw9_test.go:28:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        var m = make(map[interface{}]int)\n        for _, v := range list1.([]interface{}) {\n            m[v]++\n        }\n        return m\n    default:\n        return list1\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzqpx80kg_test.go:29:131: invalid map key type []int\n/tmp/tmpzqpx80kg_test.go:29:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpzqpx80kg_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpzqpx80kg_test.go:30:142: invalid map key type []int\n/tmp/tmpzqpx80kg_test.go:30:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpzqpx80kg_test.go:31:113: invalid map key type []int\n/tmp/tmpzqpx80kg_test.go:31:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpzqpx80kg_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpzqpx80kg_test.go:32:64: invalid map key type []int\n/tmp/tmpzqpx80kg_test.go:32:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpzqpx80kg_test.go:32:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // Write your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpugy_q0a5_test.go:21:131: invalid map key type []int\n/tmp/tmpugy_q0a5_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpugy_q0a5_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpugy_q0a5_test.go:22:142: invalid map key type []int\n/tmp/tmpugy_q0a5_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpugy_q0a5_test.go:23:113: invalid map key type []int\n/tmp/tmpugy_q0a5_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpugy_q0a5_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpugy_q0a5_test.go:24:64: invalid map key type []int\n/tmp/tmpugy_q0a5_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpugy_q0a5_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var result map[interface{}]int\n    result = make(map[interface{}]int)\n    for _, v := range list1.([]interface{}) {\n        if _, ok := result[v]; ok {\n            result[v] += 1\n        } else {\n            result[v] = 1\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcal343g0_test.go:29:131: invalid map key type []int\n/tmp/tmpcal343g0_test.go:29:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpcal343g0_test.go:30:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcal343g0_test.go:30:142: invalid map key type []int\n/tmp/tmpcal343g0_test.go:30:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpcal343g0_test.go:31:113: invalid map key type []int\n/tmp/tmpcal343g0_test.go:31:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpcal343g0_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpcal343g0_test.go:32:64: invalid map key type []int\n/tmp/tmpcal343g0_test.go:32:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpcal343g0_test.go:32:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    var res map[interface{}]int\n    res = make(map[interface{}]int)\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            res[v]++\n        }\n    case []int:\n        for _, v := range list1.([]int) {\n            res[v]++\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            res[v]++\n        }\n    }\n    return res\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124283,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt5ddu1c6_test.go:36:131: invalid map key type []int\n/tmp/tmpt5ddu1c6_test.go:36:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpt5ddu1c6_test.go:37:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpt5ddu1c6_test.go:37:142: invalid map key type []int\n/tmp/tmpt5ddu1c6_test.go:37:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpt5ddu1c6_test.go:38:113: invalid map key type []int\n/tmp/tmpt5ddu1c6_test.go:38:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpt5ddu1c6_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpt5ddu1c6_test.go:39:64: invalid map key type []int\n/tmp/tmpt5ddu1c6_test.go:39:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpt5ddu1c6_test.go:39:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpigesiduk_test.go:20:131: invalid map key type []int\n/tmp/tmpigesiduk_test.go:20:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:21:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:21:142: invalid map key type []int\n/tmp/tmpigesiduk_test.go:21:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:22:113: invalid map key type []int\n/tmp/tmpigesiduk_test.go:22:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpigesiduk_test.go:23:64: invalid map key type []int\n/tmp/tmpigesiduk_test.go:23:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpigesiduk_test.go:23:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        result := make(map[interface{}]int)\n        for _, v := range list {\n            result[v]++\n        }\n        return result\n    default:\n        return nil\n    }\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoeu610zf_test.go:30:131: invalid map key type []int\n/tmp/tmpoeu610zf_test.go:30:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpoeu610zf_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpoeu610zf_test.go:31:142: invalid map key type []int\n/tmp/tmpoeu610zf_test.go:31:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpoeu610zf_test.go:32:113: invalid map key type []int\n/tmp/tmpoeu610zf_test.go:32:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpoeu610zf_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmpoeu610zf_test.go:33:64: invalid map key type []int\n/tmp/tmpoeu610zf_test.go:33:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmpoeu610zf_test.go:33:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count lists within a list. The function should return a map where every list is converted to a list and the value of such list is the number of its occurencies in the original list.\nfunc unique_sublists(list1 interface{}) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestUnique_Sublists(t *testing.T) {\n  candidate := unique_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 3}, []int{13, 15, 17}, []int{5, 7}, []int{9, 11}}), expected: map[[]int]int{[]interface{}{1, 3}: 2, []interface{}{5, 7}: 2, []interface{}{13, 15, 17}: 1, []interface{}{9, 11}: 1} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: map[[]int]int{[]interface{}{\"green\", \"orange\"}: 2, []interface{}{\"black\"}: 1, []interface{}{\"white\"}: 1} },\n     { actual: candidate([][]int{[]int{10, 20, 30, 40}, []int{60, 70, 50, 50}, []int{90, 100, 200}}), expected: map[[]int]int{[]interface{}{10, 20, 30, 40}: 1, []interface{}{60, 70, 50, 50}: 1, []interface{}{90, 100, 200}: 1} },\n     { actual: candidate([][]int{[]string{\"john\"}}), expected: map[[]int]int{[]interface{}{\"john\"}: 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509978,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0il1hqcc_test.go:21:131: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:21:158: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:22:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:22:142: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:22:169: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:23:113: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:23:140: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:42: cannot use []string{...} (type []string) as type []int in slice literal\n/tmp/tmp0il1hqcc_test.go:24:64: invalid map key type []int\n/tmp/tmp0il1hqcc_test.go:24:91: cannot use []interface {}{...} (type []interface {}) as type []int in map key\n/tmp/tmp0il1hqcc_test.go:24:64: too many errors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}