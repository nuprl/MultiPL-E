{
  "name": "mbpp_238_number_of_substrings",
  "language": "go_test.go",
  "prompt": "package number_of_substrings_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to count the number of non-empty substrings of a given string.\nfunc number_of_substrings(str string) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py",
  "prompt_terminology": "reworded",
  "tests": "func TestNumber_Of_Substrings(t *testing.T) {\n  candidate := number_of_substrings\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"abc\"), expected: 6 },\n     { actual: candidate(\"abcd\"), expected: 10 },\n     { actual: candidate(\"abcde\"), expected: 15 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    return len(str) * (len(str) + 1) / 2\n}\n",
    "    // Your code here\n    return 0\n}\n",
    "    var count int\n    for i := 0; i < len(str); i++ {\n        for j := i + 1; j <= len(str); j++ {\n            if str[i:j] != \"\" {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    if len(str) == 0 {\n        return 0\n    }\n    return len(str) + number_of_substrings(str[1:])\n}\n",
    "    // Your code goes here\n    return 0\n}\n",
    "    // Your code here\n    return 0\n}\n",
    "    // Your code here\n    return 0\n}\n",
    "    var count int\n    for i := 0; i < len(str); i++ {\n        for j := i+1; j <= len(str); j++ {\n            if str[i:j] != \"\" {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(str); i++ {\n        for j := i; j < len(str); j++ {\n            if str[i:j+1] != \"\" {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // TODO: Write a gothon function to count the number of non-empty substrings of a given string.\n    return 0\n}\n",
    "    // Your code here\n    return 0\n}\n",
    "    var count int\n    for i := 0; i < len(str); i++ {\n        for j := i + 1; j <= len(str); j++ {\n            if str[i:j] != \"\" {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(str); i++ {\n        for j := i + 1; j <= len(str); j++ {\n            if str[i:j] != \"\" {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // Your code here\n    return 0\n}\n",
    "    // Your code goes here\n    return 0\n}\n",
    "    if len(str) == 0 {\n        return 0\n    }\n    return len(str) + number_of_substrings(str[1:])\n}\n",
    "    count := 0\n    for i := 0; i < len(str); i++ {\n        for j := i; j < len(str); j++ {\n            if str[i:j+1] != \"\" {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    // Write your code here\n    return 0\n}\n",
    "    // Your code here\n    return 0\n}\n",
    "    // Your code here\n    return 0\n}\n"
  ]
}