{
  "name": "mbpp_172_count_occurance",
  "language": "go_test.go",
  "prompt": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpa6ojljn__test.go:12\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmpa6ojljn__test.go:29 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s)-2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+3 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\n    --- FAIL: TestCount_Occurance/test_num__0 (0.00s)\n        tmp8sbcikrz_test.go:40: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmptvqqogdi_test.go:12\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmptvqqogdi_test.go:29 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if i + 2 < len(s) && s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i + 2 < len(s) {\n                if s[i + 1] == 't' && s[i + 2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000182600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpqi7f76sa_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000182600)\n\t/tmp/tmpqi7f76sa_test.go:31 +0x4df\ntesting.tRunner(0xc000182600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i + 2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+3 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\n    --- FAIL: TestCount_Occurance/test_num__0 (0.00s)\n        tmpp06l3lk6_test.go:38: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: slice bounds out of range [:19] with length 18 [recovered]\n\tpanic: runtime error: slice bounds out of range [:19] with length 18\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpbtdjnpef_test.go:12\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmpbtdjnpef_test.go:26 +0x4bc\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if i < len(s) - 2 && s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if i + 2 < len(s) && s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int = 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: slice bounds out of range [:19] with length 18 [recovered]\n\tpanic: runtime error: slice bounds out of range [:19] with length 18\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpipriold2_test.go:12\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpipriold2_test.go:26 +0x4bc\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i + 2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i + 2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+3 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\n    --- FAIL: TestCount_Occurance/test_num__0 (0.00s)\n        tmpt57zids3_test.go:40: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if i + 2 < len(s) && s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int = 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int = 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+3 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\n    --- FAIL: TestCount_Occurance/test_num__0 (0.00s)\n        tmpq2e6lnm9_test.go:38: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == \"s\" {\n            if string(s[i+1]) == \"t\" {\n                if string(s[i+2]) == \"d\" {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmp25ipwqhq_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc0001a2300)\n\t/tmp/tmp25ipwqhq_test.go:33 +0x868\ntesting.tRunner(0xc0001a2300, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i + 2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpa6ojljn__test.go:12\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmpa6ojljn__test.go:29 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i + 2 < len(s) && s[i + 1] == 't' && s[i + 2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpa6ojljn__test.go:12\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmpa6ojljn__test.go:29 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i + 2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i + 2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i + 2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s)-2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i + 2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+3 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\n    --- FAIL: TestCount_Occurance/test_num__0 (0.00s)\n        tmpp06l3lk6_test.go:38: expected '%!s(int=3)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmptvqqogdi_test.go:12\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmptvqqogdi_test.go:29 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i < len(s) - 2 {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: slice bounds out of range [:19] with length 18 [recovered]\n\tpanic: runtime error: slice bounds out of range [:19] with length 18\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpipriold2_test.go:12\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpipriold2_test.go:26 +0x4bc\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int = 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i + 2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s)-2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: slice bounds out of range [:19] with length 18 [recovered]\n\tpanic: runtime error: slice bounds out of range [:19] with length 18\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpipriold2_test.go:12\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpipriold2_test.go:26 +0x4bc\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s)-2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if i+2 < len(s) && s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i + 3 <= len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i + 2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: slice bounds out of range [:19] with length 18 [recovered]\n\tpanic: runtime error: slice bounds out of range [:19] with length 18\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpipriold2_test.go:12\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpipriold2_test.go:26 +0x4bc\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmppb00709e_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000186300)\n\t/tmp/tmppb00709e_test.go:31 +0x4df\ntesting.tRunner(0xc000186300, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpa6ojljn__test.go:12\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmpa6ojljn__test.go:29 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s)-2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if i + 2 < len(s) && s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int = 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == \"s\" {\n            if string(s[i+1]) == \"t\" {\n                if string(s[i+2]) == \"d\" {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmp3c733sx0_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmp3c733sx0_test.go:33 +0x868\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i:=0; i<len(s)-2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i + 2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+1 < len(s) && s[i+1] == 't' {\n                if i+2 < len(s) && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int = 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i + 2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpsalp4ka__test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000102600)\n\t/tmp/tmpsalp4ka__test.go:33 +0x4df\ntesting.tRunner(0xc000102600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000182600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmpqi7f76sa_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000182600)\n\t/tmp/tmpqi7f76sa_test.go:31 +0x4df\ntesting.tRunner(0xc000182600, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123713,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) && s[i+1] == 't' && s[i+2] == 'd' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if i+2 < len(s) {\n                if s[i+1] == 't' && s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s)-2; i++ {\n        if s[i:i+3] == \"std\" {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    count := 0\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == 's' && s[i+1] == 't' && s[i+2] == 'd' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_occurance_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of occurence of the string 'std' in a given string.\nfunc count_occurance(s string) int {\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == 's' {\n            if s[i+1] == 't' {\n                if s[i+2] == 'd' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurance(t *testing.T) {\n  candidate := count_occurance\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"letstdlenstdporstd\"), expected: 3 },\n     { actual: candidate(\"truststdsolensporsd\"), expected: 1 },\n     { actual: candidate(\"makestdsostdworthit\"), expected: 2 },\n     { actual: candidate(\"stds\"), expected: 1 },\n     { actual: candidate(\"\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510387,
      "stdout": "--- FAIL: TestCount_Occurance (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536340, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_occurance(...)\n\t/tmp/tmphxgoidkh_test.go:13\ncommand-line-arguments_test.TestCount_Occurance(0xc000001380)\n\t/tmp/tmphxgoidkh_test.go:33 +0x4df\ntesting.tRunner(0xc000001380, 0x54f240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}