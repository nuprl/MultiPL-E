{
  "name": "mbpp_89_closest_num",
  "language": "go_test.go",
  "prompt": "package closest_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the closest smaller number than n.\nfunc closest_num(N int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py",
  "prompt_terminology": "reworded",
  "tests": "func TestClosest_Num(t *testing.T) {\n  candidate := closest_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(11), expected: 10 },\n     { actual: candidate(7), expected: 6 },\n     { actual: candidate(12), expected: 11 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var i int\n    var j int\n    var k int\n    var num int\n    var num_list []int\n    var num_list_len int\n    var num_list_len_half int\n    var num_list_len_half_floor int\n    var num_list_len_half_ceil int\n    var num_list_len_half_floor_val int\n    var num_list_len_half_ceil_val int\n    var num_list_len_half_floor_diff int\n    var num_list_len_half_ceil_diff int\n\n    for i = 1; i <= N; i++ {\n        num = i\n        for j = 0; j < len(num_list); j++ {\n            if num < num_list[j] {\n                num_list = append(num_list[:j], append([]int{num}, num_list[j:]...)...)\n                break\n            }\n        }\n        if j == len(num_list) {\n            num_list = append(num_list, num)\n        }\n    }\n\n    num_list_len = len(num_list)\n    num_list_len_half = num_list_len / 2\n    num_list_len_half_floor = num_list_len_half\n    num_list_len_half_ceil = num_list_len_half\n    if num_list_len % 2 == 0 {\n        num_list_len_half_floor--\n    }\n    num_list_len_half_floor_val = num_list[num_list_len_half_floor]\n    num_list_len_half_ceil_val = num_list[num_list_len_half_ceil]\n    num_list_len_half_floor_diff = N - num_list_len_half_floor_val\n    num_list_len_half_ceil_diff = num_list_len_half_ceil_val - N\n    if num_list_len_half_floor_diff < num_list_len_half_ceil_diff {\n        return num_list_len_half_floor_val\n",
    "    // Find the first 1 from the right side.\n    // If there is no 1, return -1.\n    var mask int = 1\n    for mask < N {\n        if N & mask == mask {\n            break\n        }\n        mask <<= 1\n    }\n\n    if mask == N {\n        return -1\n    }\n\n    // Find the first 0 from the right side.\n    var zero_mask int = 1\n    for zero_mask < N {\n        if N & zero_mask == 0 {\n            break\n        }\n        zero_mask <<= 1\n    }\n\n    // Set the first 0 to 1.\n    N |= zero_mask\n    // Set the first 1 to 0.\n    N &= ^mask\n    // Set the first 0 from the right side to 1.\n    N |= (mask >> 1)\n\n    return N\n}\n",
    "    var i int\n    for i = N - 1; i > 0; i-- {\n        if (i & (i + 1)) == 0 {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3 int\n    var r3 int\n    var s3 int\n    var t",
    "    var i, j, k int\n    var num int\n    var res int\n\n    for i = 0; i < N; i++ {\n        num = i\n        for j = 0; j < N; j++ {\n            if num == N {\n                break\n            }\n            num = num * 2\n        }\n        if num == N {\n            break\n        }\n    }\n\n    if i == N {\n        return -1\n    }\n\n    res = i\n\n    for k = i + 1; k < N; k++ {\n        num = k\n        for j = 0; j < N; j++ {\n            if num == N {\n                break\n            }\n            num = num * 2\n        }\n        if num == N {\n            break\n        }\n    }\n\n    if k == N {\n        return res\n    }\n\n    if k - N < N - res {\n        return k\n    } else {\n        return res\n    }\n}\n",
    "    if N == 0 {\n        return 0\n    }\n    var i int\n    for i = 0; i < 32; i++ {\n        if (N & (1 << i)) != 0 {\n            break\n        }\n    }\n    if i == 0 {\n        return 0\n    }\n    return N & ((1 << i) - 1)\n}\n",
    "    if N == 0 {\n        return 0\n    }\n    var i int\n    for i = 0; i < 32; i++ {\n        if (N & (1 << i)) != 0 {\n            break\n        }\n    }\n    if i == 0 {\n        return 0\n    }\n    return N & ^(1 << (i - 1))\n}\n",
    "    var i int\n    for i = N - 1; i > 0; i-- {\n        if (i & N) == 0 {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int\n    var num int\n    var count int\n    var count_max int\n    var num_max int\n    var num_min int\n    var num_max_min int\n    var num_min_max int\n    var num_max_min_count int\n    var num_min_max_count int\n    var num_max_count int\n    var num_min_count int\n    var num_max_min_count_max int\n    var num_min_max_count_max int\n    var num_max_count_max int\n    var num_min_count_max int\n    var num_max_min_count_max_num int\n    var num_min_max_count_max_num int\n    var num_max_count_max_num int\n    var num_min_count_max_num int\n    var num_max_min_count_max_num_min int\n    var num_min_max_count_max_num_min int\n    var num_max_count_max_num_min int\n    var num_min_count_max_num_min int\n\n    for i = 1; i < N; i++ {\n        num = N - i\n        count = 0\n        for num > 0 {\n            count += num % 2\n            num /= 2\n        }\n        if count > count_max {\n            count_max = count\n            num_max = N - i\n        }\n    }\n    num_min = N - 1\n    for num_min > 0 {\n        count_max += num_min % 2\n        num_min /= 2\n    }\n    for i = 1; i < N; i++ {\n        num = N - i\n        count = 0\n        for num > 0 {\n            count += num % 2\n            num /= 2\n        }\n        if count == count_max {\n            num_max_min = N - i\n            break\n        }\n    }\n    for i = 1; i < N; i++ {\n        num = N - i\n        count = 0\n        for num > 0 {\n            count += num % 2\n            num /= 2\n        }\n        if",
    "    if N == 0 {\n        return 0\n    }\n\n    // find the first 1 from right to left\n    var i uint\n    for i = 0; i < 32; i++ {\n        if (N & (1 << i)) != 0 {\n            break\n        }\n    }\n\n    // find the first 0 from right to left\n    var j uint\n    for j = i + 1; j < 32; j++ {\n        if (N & (1 << j)) == 0 {\n            break\n        }\n    }\n\n    // swap i and j\n    N = N | (1 << i)\n    N = N & ^(1 << j)\n    N = N | (1 << j)\n    N = N & ^(1 << i)\n\n    // set all bits after j to 1\n    N = N | ((1 << (j - i - 1)) - 1)\n    return N\n}\n",
    "    var num int\n    for i := N - 1; i > 0; i-- {\n        if i % 10 != 9 {\n            num = i\n            break\n        }\n    }\n    return num\n}\n",
    "    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var qqqq int\n    var rrrr int\n    var ssss int\n    var",
    "    var i int = 1\n    for i < N {\n        if N & i == 0 {\n            return i\n        }\n        i = i << 1\n    }\n    return i\n}\n",
    "    var num int\n    for i := 0; i < N; i++ {\n        if i * i > N {\n            num = i - 1\n            break\n        }\n    }\n    return num\n}\n",
    "    var i int\n    for i = N - 1; i > 0; i-- {\n        if (N & i) == 0 {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int\n    for i = N-1; i > 0; i-- {\n        if (i & (i+1)) == 0 {\n            return i\n        }\n    }\n    return i\n}\n",
    "    var i, j int\n    var bit_1_pos int\n    var bit_0_pos int\n    var bit_1_pos_found bool\n    var bit_0_pos_found bool\n    var bit_1_pos_prev int\n    var bit_0_pos_prev int\n    var bit_1_pos_prev_found bool\n    var bit_0_pos_prev_found bool\n    var bit_1_pos_next int\n    var bit_0_pos_next int\n    var bit_1_pos_next_found bool\n    var bit_0_pos_next_found bool\n    var bit_1_pos_next_next int\n    var bit_0_pos_next_next int\n    var bit_1_pos_next_next_found bool\n    var bit_0_pos_next_next_found bool\n    var bit_1_pos_next_next_next int\n    var bit_0_pos_next_next_next int\n    var bit_1_pos_next_next_next_found bool\n    var bit_0_pos_next_next_next_found bool\n    var bit_1_pos_next_next_next_next int\n    var bit_0_pos_next_next_next_next int\n    var bit_1_pos_next_next_next_next_found bool\n    var bit_0_pos_next_next_next_next_found bool\n    var bit_1_pos_next_next_next_next_next int\n    var bit_0_pos_next_next_next_next_next int\n    var bit_1_pos_next_next_next_next_next_found bool\n    var bit_0_pos_next_next_next_next_next_found bool\n    var bit_1_pos_next_next_next_next_next_next int\n    var bit_0_pos_next_next_next_next_next_next int\n    var bit_1_pos_next_next_next_next_next_next_found bool\n    var bit_0_pos_next_next_next_next_next_next_found bool\n    var bit_1_pos_",
    "    var i int\n    for i = 0; i < N; i++ {\n        if (N & (1 << i)) == 0 {\n            break\n        }\n    }\n    return N & ((1 << i) - 1)\n}\n",
    "    if N == 0 {\n        return 0\n    }\n    if N == 1 {\n        return 0\n    }\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n",
    "    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var qqqq int\n    var rrrr int\n   "
  ]
}