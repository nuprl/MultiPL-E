{
  "name": "mbpp_245_max_sum",
  "language": "go_test.go",
  "prompt": "package max_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list and finds the maximum sum of a bitonic subsequence for the given list, where a sequence is bitonic if it is first increasing and then decreasing.\nfunc max_sum(arr []int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMax_Sum(t *testing.T) {\n  candidate := max_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 15, 51, 45, 33, 100, 12, 18, 9}), expected: 194 },\n     { actual: candidate([]int{80, 60, 30, 40, 20, 10}), expected: 210 },\n     { actual: candidate([]int{2, 3, 14, 16, 21, 23, 29, 30}), expected: 138 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    inc := make([]int, len(arr))\n    dec := make([]int, len(arr))\n\n    inc[0] = arr[0]\n    dec[len(arr)-1] = arr[len(arr)-1]\n\n    for i := 1; i < len(arr); i++ {\n        inc[i] = arr[i]\n        if inc[i-1] > 0 {\n            inc[i] += inc[i-1]\n        }\n    }\n\n    for i := len(arr)-2; i >= 0; i-- {\n        dec[i] = arr[i]\n        if dec[i+1] > 0 {\n            dec[i] += dec[i+1]\n        }\n    }\n\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        if inc[i] + dec[i] - arr[i] > max {\n            max = inc[i] + dec[i] - arr[i]\n        }\n    }\n\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] + arr[1]\n    }\n    var max_sum int = 0\n    for i := 0; i < len(arr); i++ {\n        var sum int = 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr)-1]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := arr[i]\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        for j := i - 1; j >= 0; j-- {\n            if arr[j] > arr[j + 1] {\n                sum += arr[j]\n            } else {\n                break\n            }\n        }\n        if sum > max_sum {\n            max_sum = sum\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if arr[j] < arr[j-1] {\n                break\n            }\n            sum := 0\n            for k := i; k <= j; k++ {\n                sum += arr[k]\n            }\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr)-1]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max_sum := arr[0]\n    max_sum_ending_here := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum = max(max_sum, max_sum_ending_here)\n    }\n\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    max_sum := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr)-1]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max_sum {\n                max_sum = sum\n            }\n        }\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        sum := 0\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    return max(arr[0] + max_sum(arr[2:]), max_sum(arr[1:]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        sum += arr[i]\n    }\n    return max(max_sum(arr[1:]), sum - min_sum(arr[:len(arr)-1]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    // find the max sum of the increasing subsequence\n    increasing := make([]int, len(arr))\n    increasing[0] = arr[0]\n    for i := 1; i < len(arr); i++ {\n        increasing[i] = max(increasing[i-1] + arr[i], arr[i])\n    }\n    // find the max sum of the decreasing subsequence\n    decreasing := make([]int, len(arr))\n    decreasing[len(arr)-1] = arr[len(arr)-1]\n    for i := len(arr)-2; i >= 0; i-- {\n        decreasing[i] = max(decreasing[i+1] + arr[i], arr[i])\n    }\n    // find the max sum of the bitonic subsequence\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        max_sum = max(max_sum, increasing[i] + decreasing[i] - arr[i])\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum_arr := make([]int, len(arr))\n    max_sum_arr[0] = arr[0]\n    max_sum_arr[1] = max(arr[0], arr[1])\n    for i := 2; i < len(arr); i++ {\n        max_sum_arr[i] = max(max_sum_arr[i-1], max_sum_arr[i-2]+arr[i])\n    }\n\n    return max_sum_arr[len(arr)-1]\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    max_sum := arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum = max(max_sum, max_sum_helper(arr, i))\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n\n    max_sum := 0\n    for i := 0; i < len(arr); i++ {\n        max_sum = max(max_sum, max_sum_sub(arr, i))\n    }\n    return max_sum\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n\n    // find the max sum of the increasing subsequence\n    max_sum_inc := 0\n    max_sum_inc_arr := make([]int, len(arr))\n    max_sum_inc_arr[0] = arr[0]\n    for i := 1; i < len(arr); i++ {\n        max_sum_inc_arr[i] = max(max_sum_inc_arr[i-1] + arr[i], arr[i])\n        if max_sum_inc_arr[i] > max_sum_inc {\n            max_sum_inc = max_sum_inc_arr[i]\n        }\n    }\n\n    // find the max sum of the decreasing subsequence\n    max_sum_dec := 0\n    max_sum_dec_arr := make([]int, len(arr))\n    max_sum_dec_arr[len(arr)-1] = arr[len(arr)-1]\n    for i := len(arr)-2; i >= 0; i-- {\n        max_sum_dec_arr[i] = max(max_sum_dec_arr[i+1] + arr[i], arr[i])\n        if max_sum_dec_arr[i] > max_sum_dec {\n            max_sum_dec = max_sum_dec_arr[i]\n        }\n    }\n\n    // find the max sum of the bitonic subsequence\n    max_sum_bitonic := 0\n    for i := 0; i < len(arr)-1; i++ {\n        if max_sum_inc_arr[i] + max_sum_dec_arr[i+1] > max_sum_bitonic {\n            max_sum_bitonic = max_sum_inc_arr[i] + max_sum_dec_arr",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return max(arr[0], arr[1])\n    }\n    if len(arr) == 3 {\n        return max(arr[0] + arr[2], arr[1])\n    }\n    return max(max_sum(arr[1:]), max_sum(arr[:len(arr)-1]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    var max int\n    for i := 0; i < len(arr); i++ {\n        var sum int\n        for j := i; j < len(arr); j++ {\n            sum += arr[j]\n            if sum > max {\n                max = sum\n            }\n        }\n    }\n\n    return max\n}\n"
  ]
}