{
  "name": "mbpp_12_sort_matrix",
  "language": "go_test.go",
  "prompt": "package sort_matrix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a given matrix in ascending order according to the sum of its rows.\nfunc sort_matrix(M [][]int) [][]int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSort_Matrix(t *testing.T) {\n  candidate := sort_matrix\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{2, 4, 5}, []int{1, 1, 1}}), expected: [][]int{[]int{1, 1, 1}, []int{1, 2, 3}, []int{2, 4, 5}} },\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{-2, 4, -5}, []int{1, -1, 1}}), expected: [][]int{[]int{-2, 4, -5}, []int{1, -1, 1}, []int{1, 2, 3}} },\n     { actual: candidate([][]int{[]int{5, 8, 9}, []int{6, 4, 3}, []int{2, 1, 4}}), expected: [][]int{[]int{2, 1, 4}, []int{6, 4, 3}, []int{5, 8, 9}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by sum of rows\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[0]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO: implement\n    return [][]int{}\n}\n",
    "    // sort the rows by sum\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // calculate the sum of each row\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    // sort the sums\n    for i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    if len(M) == 0 {\n        return M\n    }\n    if len(M[0]) == 0 {\n        return M\n    }\n    rows := len(M)\n    cols := len(M[0])\n    sums := make([]int, rows)\n    for i := 0; i < rows; i++ {\n        for j := 0; j < cols; j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < rows; i++ {\n        for j := i + 1; j < rows; j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    if len(M) == 0 {\n        return M\n    }\n    if len(M[0]) == 0 {\n        return M\n    }\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        sums[i] = 0\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    row_sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        row_sums[i] = 0\n        for j := 0; j < len(M[i]); j++ {\n            row_sums[i] += M[i][j]\n        }\n    }\n    // sort row_sums\n    for i := 0; i < len(row_sums); i++ {\n        for j := i + 1; j < len(row_sums); j++ {\n            if row_sums[i] > row_sums[j] {\n                row_sums[i], row_sums[j] = row_sums[j], row_sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO: implement\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // sort rows by sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i; j < len(M); j++ {\n            if sum_row(M[i]) > sum_row(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    rows := len(M)\n    cols := len(M[0])\n    sums := make([]int, rows)\n    for i := 0; i < rows; i++ {\n        for j := 0; j < cols; j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < rows; i++ {\n        for j := i + 1; j < rows; j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                for k := 0; k < cols; k++ {\n                    M[i][k], M[j][k] = M[j][k], M[i][k]\n                }\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    n := len(M)\n    sums := make([]int, n)\n    for i := 0; i < n; i++ {\n        sums[i] = 0\n        for j := 0; j < n; j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort rows by sum\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort the rows by the sum of their elements\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                M[i], M[j] = M[j], M[i]\n                sums[i], sums[j] = sums[j], sums[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    if len(M) == 0 {\n        return M\n    }\n    if len(M[0]) == 0 {\n        return M\n    }\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, val := range row {\n            sums[i] += val\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n\n    // sort rows\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                // swap rows\n                M[i], M[j] = M[j], M[i]\n                // swap sums\n                sums[i], sums[j] = sums[j], sums[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    var sums []int\n    for _, row := range M {\n        sums = append(sums, sum(row))\n    }\n    sorted := make([][]int, len(M))\n    copy(sorted, M)\n    for i := 0; i < len(sorted) - 1; i++ {\n        for j := i + 1; j < len(sorted); j++ {\n            if sums[i] > sums[j] {\n                sorted[i], sorted[j] = sorted[j], sorted[i]\n                sums[i], sums[j] = sums[j], sums[i]\n            }\n        }\n    }\n    return sorted\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // sort matrix by sum of rows\n    // sort.Slice(M, func(i, j int) bool {\n    //     return sum(M[i]) < sum(M[j])\n    // })\n    // return M\n\n    // sort matrix by sum of rows\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    if len(M) == 0 {\n        return M\n    }\n    if len(M[0]) == 0 {\n        return M\n    }\n    rows := len(M)\n    cols := len(M[0])\n    sums := make([]int, rows)\n    for i := 0; i < rows; i++ {\n        for j := 0; j < cols; j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < rows; i++ {\n        for j := i + 1; j < rows; j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    // sort.Slice(M, func(i, j int) bool {\n    //     return sum_row(M[i]) < sum_row(M[j])\n    // })\n\n    // sort by row sum\n    // sort.Slice(M, func(i, j int) bool {\n    //     return sum_row(M[i]) < sum_row(M[j])\n    // })\n\n    // sort by row sum\n    // sort.Slice(M, func(i, j int) bool {\n    //     return sum_row(M[i]) < sum_row(M[j])\n    // })\n\n    // sort by row sum\n    // sort.Slice(M, func(i, j int) bool {\n    //     return sum_row(M[i]) < sum_row(M[j])\n    // })\n\n    // sort by row sum\n    // sort.Slice(M, func(i, j int) bool {\n    //     return sum_row(M[i]) < sum_row(M[j])\n    // })\n\n    // sort by row sum\n    // sort.Slice(M, func(i, j int) bool {\n    //     return sum_row(M[i]) < sum_row(M[j])\n    // })\n\n    // sort by row sum\n    // sort.Slice(M, func(i, j int) bool {\n    //     return sum_row(M[i]) < sum_row(M[j])\n    // })\n\n    // sort by row sum\n    // sort.Slice(M, func(i, j int) bool {\n    //     return sum_row(M[i]) < sum_row(M[j])\n    // })\n\n    // sort by row sum\n    // sort.Slice(M, func(i, j int) bool {\n    //     return sum_row(M[i]) < sum_row(M[j])\n    // })\n\n    // sort by row sum\n    // sort.Slice(M, func(i, j int) bool {\n    //     return sum_row(M[i]) < sum_row(",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // sort rows\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                M[i], M[j] = M[j], M[i]\n                sums[i], sums[j] = sums[j], sums[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // Sort the rows according to the sum of the elements in the row.\n    // Use a map to store the sum of the elements in the row.\n    sum_map := make(map[int]int)\n    for i := 0; i < len(M); i++ {\n        sum := 0\n        for j := 0; j < len(M[i]); j++ {\n            sum += M[i][j]\n        }\n        sum_map[i] = sum\n    }\n\n    // Sort the map according to the value.\n    sorted_map := sort_map(sum_map)\n\n    // Reorder the matrix according to the sorted map.\n    sorted_matrix := make([][]int, len(M))\n    for i := 0; i < len(M); i++ {\n        sorted_matrix[i] = make([]int, len(M[i]))\n        for j := 0; j < len(M[i]); j++ {\n            sorted_matrix[i][j] = M[sorted_map[i]][j]\n        }\n    }\n\n    return sorted_matrix\n}\n",
    "    // Sort the rows by the sum of the elements in each row.\n    // This is a stable sort, so the order of rows with the same sum is preserved.\n    sums := make([]int, len(M))\n    for i, row := range M {\n        sums[i] = sum(row)\n    }\n    sort_rows(M, sums)\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    var sum []int\n    for _, row := range M {\n        sum = append(sum, sum_row(row))\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum[i] > sum[j] {\n                M[i], M[j] = M[j], M[i]\n                sum[i], sum[j] = sum[j], sum[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // Sort the rows by the sum of the row\n    sums := make([]int, len(M))\n    for i := range M {\n        for j := range M[i] {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := range sums {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    var sums []int\n    for _, row := range M {\n        sum := 0\n        for _, v := range row {\n            sum += v\n        }\n        sums = append(sums, sum)\n    }\n\n    for i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort rows by sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // Sort the rows by sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n\n    // Sort the rows\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    if len(M) == 0 {\n        return M\n    }\n    rows := len(M)\n    cols := len(M[0])\n    sums := make([]int, rows)\n    for i := 0; i < rows; i++ {\n        for j := 0; j < cols; j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < rows; i++ {\n        for j := i + 1; j < rows; j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    row_sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            row_sums[i] += v\n        }\n    }\n    for i := 0; i < len(row_sums); i++ {\n        for j := i + 1; j < len(row_sums); j++ {\n            if row_sums[i] > row_sums[j] {\n                row_sums[i], row_sums[j] = row_sums[j], row_sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    // sort by column\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            for k := j + 1; k < len(M[i]); k++ {\n                if M[i][j] > M[i][k] {\n                    M[i][j], M[i][k] = M[i][k], M[i][j]\n                }\n            }\n        }\n    }\n\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n    for i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by sum of rows\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    row_sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            row_sums[i] += v\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if row_sums[i] > row_sums[j] {\n                row_sums[i], row_sums[j] = row_sums[j], row_sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    row_sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            row_sums[i] += v\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if row_sums[i] > row_sums[j] {\n                row_sums[i], row_sums[j] = row_sums[j], row_sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    if len(M) == 0 {\n        return M\n    }\n    rows := len(M)\n    cols := len(M[0])\n    sums := make([]int, rows)\n    for i := 0; i < rows; i++ {\n        for j := 0; j < cols; j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < rows; i++ {\n        for j := i + 1; j < rows; j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                for k := 0; k < cols; k++ {\n                    M[i][k], M[j][k] = M[j][k], M[i][k]\n                }\n            }\n        }\n    }\n    return M\n}\n",
    "    rows := len(M)\n    cols := len(M[0])\n    sums := make([]int, rows)\n    for i := 0; i < rows; i++ {\n        for j := 0; j < cols; j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < rows; i++ {\n        for j := i + 1; j < rows; j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    var sums []int\n    var rows []int\n    for i, row := range M {\n        sum := 0\n        for _, v := range row {\n            sum += v\n        }\n        sums = append(sums, sum)\n        rows = append(rows, i)\n    }\n    for i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                rows[i], rows[j] = rows[j], rows[i]\n            }\n        }\n    }\n    var result [][]int\n    for _, row := range rows {\n        result = append(result, M[row])\n    }\n    return result\n}\n",
    "    var sums []int\n    for i := 0; i < len(M); i++ {\n        sum := 0\n        for j := 0; j < len(M[i]); j++ {\n            sum += M[i][j]\n        }\n        sums = append(sums, sum)\n    }\n    for i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    N := len(M)\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by sum of rows\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, x := range row {\n            sums[i] += x\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    if len(M) == 0 {\n        return M\n    }\n    if len(M[0]) == 0 {\n        return M\n    }\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort rows\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // sort by row sum\n    row_sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        row_sums[i] = 0\n        for j := 0; j < len(M[i]); j++ {\n            row_sums[i] += M[i][j]\n        }\n    }\n\n    // sort\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if row_sums[i] > row_sums[j] {\n                row_sums[i], row_sums[j] = row_sums[j], row_sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    if len(M) == 0 {\n        return M\n    }\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // compute the sum of each row\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n\n    // sort the matrix according to the sums\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum_row(M[i]) > sum_row(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(sums); i++ {\n        for j := i; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // row_sums[i] = sum of row i\n    row_sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            row_sums[i] += M[i][j]\n        }\n    }\n\n    // sort rows by row_sums\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if row_sums[i] > row_sums[j] {\n                row_sums[i], row_sums[j] = row_sums[j], row_sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // calculate the sum of each row\n    sums := make([]int, len(M))\n    for i := range M {\n        for j := range M[i] {\n            sums[i] += M[i][j]\n        }\n    }\n\n    // sort the matrix according to the sum of each row\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                M[i], M[j] = M[j], M[i]\n                sums[i], sums[j] = sums[j], sums[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    // find the sum of each row\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n\n    // sort the sums\n    for i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort rows by sum\n    for i := 0; i < len(M); i++ {\n        for j := i+1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort the rows\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        sums[i] = 0\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    row_sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        row_sums[i] = 0\n        for j := 0; j < len(M[i]); j++ {\n            row_sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i+1; j < len(M); j++ {\n            if row_sums[i] > row_sums[j] {\n                row_sums[i], row_sums[j] = row_sums[j], row_sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    row_sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            row_sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if row_sums[i] > row_sums[j] {\n                row_sums[i], row_sums[j] = row_sums[j], row_sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort the matrix by the sum of each row\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum_row(M[i]) > sum_row(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort rows by sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n\n    for i := 0; i < len(M); i++ {\n        for j := i+1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    if len(M) == 0 {\n        return M\n    }\n    if len(M[0]) == 0 {\n        return M\n    }\n    rows := len(M)\n    cols := len(M[0])\n    sums := make([]int, rows)\n    for i := 0; i < rows; i++ {\n        for j := 0; j < cols; j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < rows; i++ {\n        for j := i + 1; j < rows; j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // sort matrix by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    sums := make([]int, len(M))\n    for i := range M {\n        for j := range M[i] {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                M[i], M[j] = M[j], M[i]\n                sums[i], sums[j] = sums[j], sums[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort the rows by the sum of the elements\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // sort by row sum\n    row_sum := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            row_sum[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if row_sum[i] > row_sum[j] {\n                row_sum[i], row_sum[j] = row_sum[j], row_sum[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    n := len(M)\n    sums := make([]int, n)\n    for i := 0; i < n; i++ {\n        sums[i] = 0\n        for j := 0; j < n; j++ {\n            sums[i] += M[i][j]\n        }\n    }\n\n    for i := 0; i < n; i++ {\n        for j := i+1; j < n; j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                M[i], M[j] = M[j], M[i]\n                sums[i], sums[j] = sums[j], sums[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // Sort the rows by the sum of their elements.\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort rows by sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    var sums []int\n    for _, row := range M {\n        sum := 0\n        for _, v := range row {\n            sum += v\n        }\n        sums = append(sums, sum)\n    }\n\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    // sort by row sum\n    row_sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        row_sums[i] = 0\n        for j := 0; j < len(M[i]); j++ {\n            row_sums[i] += M[i][j]\n        }\n    }\n\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if row_sums[i] > row_sums[j] {\n                row_sums[i], row_sums[j] = row_sums[j], row_sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                M[i], M[j] = M[j], M[i]\n                sums[i], sums[j] = sums[j], sums[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum_row(M[i]) > sum_row(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort rows by sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    row_sum := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            row_sum[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if row_sum[i] > row_sum[j] {\n                row_sum[i], row_sum[j] = row_sum[j], row_sum[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    var sum []int\n    for i := 0; i < len(M); i++ {\n        sum = append(sum, 0)\n        for j := 0; j < len(M[i]); j++ {\n            sum[i] += M[i][j]\n        }\n    }\n\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum[i] > sum[j] {\n                sum[i], sum[j] = sum[j], sum[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    // TODO: Implement\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    var sums []int\n    for i := 0; i < len(M); i++ {\n        var sum int\n        for j := 0; j < len(M[i]); j++ {\n            sum += M[i][j]\n        }\n        sums = append(sums, sum)\n    }\n\n    for i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    // sort rows\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n    for i := 0; i < len(sums); i++ {\n        for j := i+1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    n := len(M)\n    m := len(M[0])\n    sums := make([]int, n)\n    for i := 0; i < n; i++ {\n        sums[i] = 0\n        for j := 0; j < m; j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // sort the rows by the sum of each row\n    for i := 0; i < len(M); i++ {\n        for j := i+1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    if len(M) == 0 {\n        return M\n    }\n    if len(M[0]) == 0 {\n        return M\n    }\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        sums[i] = 0\n        for j := 0; j < len(M[0]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i+1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort rows by sum\n    sums := make([]int, len(M))\n    for i, row := range M {\n        sums[i] = 0\n        for _, val := range row {\n            sums[i] += val\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i+1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i+1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // first, calculate the sum of each row\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n\n    // then, sort the matrix according to the sums\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                // swap the rows\n                M[i], M[j] = M[j], M[i]\n                // swap the sums\n                sums[i], sums[j] = sums[j], sums[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    if len(M) == 0 {\n        return M\n    }\n\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    // Sort rows by sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i; j < len(M); j++ {\n            if sum_row(M[i]) > sum_row(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i+1; j < len(M); j++ {\n            if sum_row(M[i]) > sum_row(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // TODO: Implement\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                M[i], M[j] = M[j], M[i]\n                sums[i], sums[j] = sums[j], sums[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // sort rows by sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // sort rows by sum\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, val := range row {\n            sums[i] += val\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort rows by sum\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    var sums []int\n    for _, row := range M {\n        sum := 0\n        for _, val := range row {\n            sum += val\n        }\n        sums = append(sums, sum)\n    }\n    for i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    row_sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        row_sums[i] = 0\n        for j := 0; j < len(M[i]); j++ {\n            row_sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if row_sums[i] > row_sums[j] {\n                row_sums[i], row_sums[j] = row_sums[j], row_sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // your code here\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by rows\n    for i := 0; i < len(M); i++ {\n        for j := i+1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort rows by sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort rows by sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum_row(M[i]) > sum_row(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    rows := len(M)\n    cols := len(M[0])\n    sums := make([]int, rows)\n    for i := 0; i < rows; i++ {\n        for j := 0; j < cols; j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < rows; i++ {\n        for j := i+1; j < rows; j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n\n    // sort\n    for i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum_row(M[i]) > sum_row(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    rows := len(M)\n    cols := len(M[0])\n    sums := make([]int, rows)\n    for i := 0; i < rows; i++ {\n        for j := 0; j < cols; j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < rows; i++ {\n        for j := i + 1; j < rows; j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    row_sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            row_sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if row_sums[i] > row_sums[j] {\n                row_sums[i], row_sums[j] = row_sums[j], row_sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum_row(M[i]) > sum_row(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum_row(M[i]) > sum_row(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    for i := 0; i < len(M) - 1; i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum_row(M[i]) > sum_row(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    var sum []int\n    var sorted [][]int\n    for i := 0; i < len(M); i++ {\n        sum = append(sum, 0)\n        for j := 0; j < len(M[i]); j++ {\n            sum[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum[i] > sum[j] {\n                sum[i], sum[j] = sum[j], sum[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i := range M {\n        for j := range M[i] {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort matrix by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum_row(M[i]) > sum_row(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    N := len(M)\n    sums := make([]int, N)\n    for i := 0; i < N; i++ {\n        for j := 0; j < N; j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < N; i++ {\n        for j := i + 1; j < N; j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    row_sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            row_sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if row_sums[i] > row_sums[j] {\n                row_sums[i], row_sums[j] = row_sums[j], row_sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    rows := len(M)\n    cols := len(M[0])\n    sums := make([]int, rows)\n    for i := 0; i < rows; i++ {\n        for j := 0; j < cols; j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < rows; i++ {\n        for j := i + 1; j < rows; j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                for k := 0; k < cols; k++ {\n                    M[i][k], M[j][k] = M[j][k], M[i][k]\n                }\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    sums := make([]int, len(M))\n    for i, row := range M {\n        for _, v := range row {\n            sums[i] += v\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    row_sum := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            row_sum[i] += M[i][j]\n        }\n    }\n    // sort row_sum\n    for i := 0; i < len(row_sum); i++ {\n        for j := i + 1; j < len(row_sum); j++ {\n            if row_sum[i] > row_sum[j] {\n                row_sum[i], row_sum[j] = row_sum[j], row_sum[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    for i := 0; i < len(M); i++ {\n        for j := i+1; j < len(M); j++ {\n            if sum_row(M[i]) > sum_row(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    // sort rows by sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort rows by sum\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[i]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort by row sum\n    row_sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        row_sums[i] = 0\n        for j := 0; j < len(M[i]); j++ {\n            row_sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if row_sums[i] > row_sums[j] {\n                row_sums[i], row_sums[j] = row_sums[j], row_sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    var sums []int\n    for i := 0; i < len(M); i++ {\n        var sum int\n        for j := 0; j < len(M[i]); j++ {\n            sum += M[i][j]\n        }\n        sums = append(sums, sum)\n    }\n\n    for i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n\n    return M\n}\n",
    "    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // sort rows by sum\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sum(M[i]) > sum(M[j]) {\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    if len(M) == 0 {\n        return M\n    }\n    if len(M[0]) == 0 {\n        return M\n    }\n    sums := make([]int, len(M))\n    for i := 0; i < len(M); i++ {\n        for j := 0; j < len(M[0]); j++ {\n            sums[i] += M[i][j]\n        }\n    }\n    for i := 0; i < len(M); i++ {\n        for j := i + 1; j < len(M); j++ {\n            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n                M[i], M[j] = M[j], M[i]\n            }\n        }\n    }\n    return M\n}\n"
  ]
}