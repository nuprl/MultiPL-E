{
  "name": "mbpp_138_is_Sum_Of_Powers_Of_Two",
  "language": "go_test.go",
  "prompt": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py",
  "prompt_terminology": "reworded",
  "tests": "func TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 != 0 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp2aonf2av_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 0 {\n        if n % 2 == 1 {\n            n = n - 1\n        } else {\n            n = n / 2\n        }\n        if n == 1 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpk_yyk1sn_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n & (n - 1)\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpqp_icjzu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpqp_icjzu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & (n-1) == 0 {\n            return true\n        }\n        n = n - (n & -n)\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpxqr6rb7o_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i /= 2 {\n        if i % 2 == 1 {\n            n -= i\n            if n == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp4miy5yso_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp4miy5yso_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp4miy5yso_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpth3o642m_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpth3o642m_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpr8tazhk1_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpr8tazhk1_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpty719gwj_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpty719gwj_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 1 {\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = n - 1\n        }\n    }\n    if n == 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmplvhtsttu_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n/2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpq0l4i2sj_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpq0l4i2sj_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n & (n - 1)\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpqp_icjzu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpqp_icjzu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp057ckxce_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpa_l4izdu_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpa_l4izdu_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 0; i < n; i++ {\n        if n & (1 << i) != 0 {\n            if is_Sum_Of_Powers_Of_Two(n - (1 << i)) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp2rhiq5gf_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp2rhiq5gf_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp2rhiq5gf_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n == 0 {\n                return true\n            }\n        } else {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpu_jziqql_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpu_jziqql_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpu_jziqql_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n-1) == 0 {\n        return true\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n & (n-1) != 0 {\n                return false\n            }\n        } else {\n            n = n >> 1\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmps_u00gbc_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n - 1) == 0 {\n        return true\n    }\n    for n > 0 {\n        n = n & (n - 1)\n        if n & (n - 1) == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpamufm39v_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        }\n        n = n >> 1\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpriodquar_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmphn_fp8xv_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n - 1) == 0 {\n        return true\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            return false\n        }\n        n = n >> 1\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpve6ge9ga_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpve6ge9ga_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpwah_mck4_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpwah_mck4_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp8qjj5wbj_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp8qjj5wbj_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & (n-1) == 0 {\n            return true\n        }\n        n = n - (n & -n)\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpxqr6rb7o_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n == 0 {\n                return true\n            }\n        } else {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpu_jziqql_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpu_jziqql_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpu_jziqql_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n & (n - 1)\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpqp_icjzu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpqp_icjzu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmphn_fp8xv_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n; i *= 2 {\n        if i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpos1dhg27_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpos1dhg27_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 && n != 1 {\n            return false\n        }\n        n = n >> 1\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpaqmzfuvz_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpaqmzfuvz_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpsomr2uop_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmphn_fp8xv_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & (n - 1) == 0 {\n            return true\n        }\n        n -= n & -n\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpq60rhv4n_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 && n != 1 {\n            return false\n        }\n        n = n >> 1\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpaqmzfuvz_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpaqmzfuvz_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n-1) == 0 {\n        return true\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpn_9ktfum_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpn_9ktfum_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpn_9ktfum_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n & (n - 1)\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpqp_icjzu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpqp_icjzu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            if n >> 1 == 0 {\n                return true\n            }\n            return false\n        }\n        n = n >> 1\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpiisn3vra_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpiisn3vra_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n            if n == 0 {\n                return true\n            }\n        }\n        n = n >> 1\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpm3d68bma_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n-1) == 0 {\n        return true\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n        } else {\n            break\n        }\n    }\n    if n == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpgxf773pd_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpgxf773pd_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpgxf773pd_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppptnunt3_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppptnunt3_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpa_l4izdu_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpa_l4izdu_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n; i *= 2 {\n        if i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpos1dhg27_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpos1dhg27_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & (n-1) == 0 {\n            return true\n        }\n        n = n - (n & -n)\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpxqr6rb7o_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmphn_fp8xv_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 0; i < n; i++ {\n        if n & (1 << i) == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpyqliwxlc_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpyqliwxlc_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpikpp38dk_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpikpp38dk_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n - 1) == 0 {\n        return true\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n        if n & (n - 1) == 0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp17s3pz9m_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true\n            }\n            return false\n        }\n        n = n >> 1\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp6ma4wsng_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp6ma4wsng_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp057ckxce_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmphn_fp8xv_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppptnunt3_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppptnunt3_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpikpp38dk_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpikpp38dk_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n            if n == 0 {\n                return true\n            }\n        }\n        n = n >> 1\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpm3d68bma_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpa_l4izdu_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpa_l4izdu_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 0; i < n; i++ {\n        if n == (1 << i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpcy7fvpo2_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpcy7fvpo2_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 1 {\n        if n % 2 == 1 {\n            n = n - 1\n        } else {\n            n = n / 2\n        }\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmptmv0ypt6_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmphn_fp8xv_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i < n; i *= 2 {\n        if is_Sum_Of_Powers_Of_Two(n - i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp7b1__3jr_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & (n-1) == 0 {\n            return true\n        }\n        n = n - (n & -n)\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpxqr6rb7o_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & (n - 1) == 0 {\n            return true\n        }\n        n -= n & -n\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpq60rhv4n_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n-1) == 0 {\n        return true\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n & (n-1) != 0 {\n                return false\n            }\n        }\n        n = n >> 1\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp87ru0jww_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp057ckxce_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n; i *= 2 {\n        if n == i {\n            return true\n        }\n        if n < i {\n            return false\n        }\n        if is_Sum_Of_Powers_Of_Two(n - i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpm4scuin5_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i == 2 {\n            return true\n        }\n        if i % 2 == 1 {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmplb5fi141_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmplb5fi141_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    if n == 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpo0lzljz8_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpo0lzljz8_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            n = n - i\n            if n == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp1px_800s_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp1px_800s_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp1px_800s_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n == 0 {\n                return true\n            }\n        } else {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpu_jziqql_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpu_jziqql_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpu_jziqql_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 0; i < n; i++ {\n        if n == 1 << i {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp6lyzjbtf_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp6lyzjbtf_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n-1) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpw_gxgxtx_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpw_gxgxtx_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            n = n - i\n            if n == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp1px_800s_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp1px_800s_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp1px_800s_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp8qjj5wbj_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp8qjj5wbj_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp057ckxce_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n - 1) == 0 {\n        return true\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n & (n - 1) != 0 {\n                return false\n            }\n        }\n        n = n >> 1\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpb7uzdm4v_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n-1) == 0 {\n        return true\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n & 1 == 1 {\n                return false\n            }\n        } else {\n            n = n >> 1\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpz60tbqyp_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n == 0 {\n                return true\n            }\n        } else {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpu_jziqql_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpu_jziqql_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpu_jziqql_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppptnunt3_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppptnunt3_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n-1) == 0 {\n        return true\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n & (n-1) != 0 {\n                return false\n            }\n        } else {\n            n = n >> 1\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmps_u00gbc_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n-1) == 0 {\n        return true\n    }\n    for n > 0 {\n        if n & (n-1) == 0 {\n            return true\n        }\n        n = n - (n & -n)\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmph1zu17_5_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n-1) == 0 {\n        return true\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n        } else {\n            n = n >> 1\n            if n & (n-1) == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpj1hycchm_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        }\n        n = n >> 1\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp0aluugzp_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n != 0 {\n        if n % 2 == 1 {\n            n = n - 1\n        }\n        n = n / 2\n        if n == 1 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmphre3orz8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmphn_fp8xv_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & (n - 1) == 0 {\n            return true\n        }\n        n = n - (n & -n)\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpdnn76czr_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp9t6wdc5n_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp8qjj5wbj_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp8qjj5wbj_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpi1ev3ies_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpi1ev3ies_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpik7u304v_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpik7u304v_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & (n - 1) == 0 {\n            return true\n        }\n        n = n - (n & -n)\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpdnn76czr_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n == 0 {\n                return true\n            }\n            return false\n        }\n        n = n >> 1\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpsav3ph6d_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpsav3ph6d_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n - 1) == 0 {\n        return true\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n & 1 == 1 {\n                return false\n            }\n        } else {\n            n = n >> 1\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpcbw1fov__test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpr8tazhk1_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpr8tazhk1_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    if n == 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpo0lzljz8_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpo0lzljz8_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmphn_fp8xv_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n == 0 {\n                return true\n            }\n        } else {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpt11n5dqf_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpt11n5dqf_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpt11n5dqf_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp8qjj5wbj_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp8qjj5wbj_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if is_Sum_Of_Powers_Of_Two(n - i) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp4wji1h62_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if is_Sum_Of_Powers_Of_Two(n - i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpm9gelndz_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i >> 1 {\n        if i & 1 == 1 {\n            if i == 1 {\n                return true\n            }\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0yc2hr0c_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0yc2hr0c_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 0; i < n; i++ {\n        if (n & (1 << i)) != 0 {\n            if is_Sum_Of_Powers_Of_Two(n - (1 << i)) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp1e_69ozs_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp1e_69ozs_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp1e_69ozs_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmphn_fp8xv_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 1 {\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmptds8yn6x_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmptds8yn6x_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i >> 1 {\n        if i == 1 {\n            return true\n        }\n        if i & 1 == 1 {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpuroapihn_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpuroapihn_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 0; i < n; i++ {\n        if (n & (1 << i)) != 0 {\n            if is_Sum_Of_Powers_Of_Two(n - (1 << i)) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp1e_69ozs_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp1e_69ozs_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp1e_69ozs_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpikpp38dk_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpikpp38dk_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if is_Sum_Of_Powers_Of_Two(n - i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpm9gelndz_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 0 {\n            continue\n        }\n        if i == 1 {\n            return true\n        }\n        return false\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpwkgxsn6__test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpwkgxsn6__test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n; i *= 2 {\n        if i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpos1dhg27_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpos1dhg27_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i >> 1 {\n        if i == 1 {\n            return true\n        }\n        if i % 2 == 1 {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpmsh9msbj_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmsh9msbj_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp2t58sgut_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    for n > 0 {\n        if n & (n - 1) == 0 {\n            return true\n        }\n        n = n - (n & -n)\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp3gez4m00_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & (n - 1) == 0 {\n            return true\n        }\n        n = n - (n & -n)\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpdnn76czr_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    for i := 0; i < n; i++ {\n        if (n & (1 << i)) > 0 {\n            n -= 1 << i\n            if n == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp40nox9tu_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n/2; i++ {\n        if is_Sum_Of_Powers_Of_Two(n - i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpm9gelndz_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpr8tazhk1_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpr8tazhk1_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n/2; i *= 2 {\n        if is_Sum_Of_Powers_Of_Two(n - i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp2jeab93a_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmphn_fp8xv_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 2; i <= n; i *= 2 {\n        if is_Sum_Of_Powers_Of_Two(n - i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmphb4o8xyp_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmphb4o8xyp_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmphb4o8xyp_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpr8tazhk1_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpr8tazhk1_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n != 0 {\n        if n % 2 == 1 {\n            n = n - 1\n        }\n        n = n / 2\n        if n == 1 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmphre3orz8_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpi1ev3ies_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpi1ev3ies_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 0; i < n; i++ {\n        if n & (1 << i) != 0 {\n            if is_Sum_Of_Powers_Of_Two(n - (1 << i)) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp2rhiq5gf_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp2rhiq5gf_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp2rhiq5gf_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    if n == 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124060,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpo0lzljz8_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpo0lzljz8_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpikpp38dk_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpikpp38dk_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            if n >> 1 == 0 {\n                return true\n            }\n            return false\n        }\n        n = n >> 1\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpqvl6xsl2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpqvl6xsl2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        }\n        if n & (n - 1) == 0 {\n            return true\n        }\n        n = n >> 1\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp1sis6p8z_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n; i *= 2 {\n        if n == i {\n            return true\n        }\n        if n > i {\n            if is_Sum_Of_Powers_Of_Two(n - i) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmptl77wwkj_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n & (n - 1)\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpqp_icjzu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpqp_icjzu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 && n & (n - 1) != 0 {\n            return false\n        }\n        n = n >> 1\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpgqbqugly_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpgqbqugly_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n == 1 {\n            return true\n        }\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp40dmk86b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp40dmk86b_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n & (n - 1) != 0 {\n        n = n & (n - 1)\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp8tv29_lo_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp8tv29_lo_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n; i *= 2 {\n        if n - i == 0 {\n            return true\n        }\n        if is_Sum_Of_Powers_Of_Two(n - i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp1ogg3rl9_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppptnunt3_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppptnunt3_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpikpp38dk_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpikpp38dk_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n == 1 {\n            return true\n        }\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpoik_5jh4_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpoik_5jh4_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n & (n - 1) != 0 {\n        n = n & (n - 1)\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp8tv29_lo_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp8tv29_lo_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 0; i <= n; i++ {\n        if n == 1 << uint(i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp04wyirx4_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp04wyirx4_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmphn_fp8xv_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppptnunt3_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppptnunt3_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n; i++ {\n        if i == n {\n            return true\n        }\n        if i > n {\n            return false\n        }\n        n -= i\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph0mvg26m_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 0 {\n        if n % 2 == 1 {\n            n -= 1\n        } else {\n            n /= 2\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpgk5ymg93_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n; i++ {\n        if n == 1 << i {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp6z13shql_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp6z13shql_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n & (n - 1)\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpqp_icjzu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpqp_icjzu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0j291lgz_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpa_l4izdu_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpa_l4izdu_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & (n-1) == 0 {\n            return true\n        }\n        n -= n & -n\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpub645hf__test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 1 {\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = n - 1\n        }\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124062,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmph84e__4c_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmppzl_jx27_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n - 1) == 0 {\n        return true\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n & 1 == 1 {\n                return false\n            }\n        }\n        n = n >> 1\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124063,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpixtmpf5o_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n & (n - 1) != 0 {\n        n &= n - 1\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124063,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxog9fvi__test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxog9fvi__test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpikpp38dk_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpikpp38dk_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n - 1) == 0 {\n        return true\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124063,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpvryb24cd_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpvryb24cd_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpvryb24cd_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n\n    if n == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124063,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpfumucqk8_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n == 0 {\n                return true\n            }\n        } else {\n            return false\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124063,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpl238befn_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpl238befn_test.go:43: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpl238befn_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n & (n-1) == 0 {\n        return true\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n & 1 == 1 {\n                return false\n            }\n        } else {\n            n = n >> 1\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124063,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpg988f3pq_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & (n - 1) == 0 {\n            return true\n        }\n        n -= n & -n\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124058,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpq60rhv4n_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n & (n - 1)\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpqp_icjzu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpqp_icjzu_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            if n >> 1 == 0 {\n                return true\n            }\n            return false\n        }\n        n = n >> 1\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124063,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpae16xnzk_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpae16xnzk_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517108,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmph039oewh_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}