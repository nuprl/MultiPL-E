{
  "name": "mbpp_419_round_and_sum",
  "language": "go_test.go",
  "prompt": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py",
  "prompt_terminology": "reworded",
  "tests": "func TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        for _, v := range list1.([]float64) {\n            list2 = append(list2, int(v))\n        }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp_solcs24_test.go:41: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp_solcs24_test.go:41: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // Your code goes here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpucf7z19s_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpucf7z19s_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpucf7z19s_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    for _, v := range list1.([]int) {\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc000086ef8, 0x5fa180)\n\t/tmp/tmpxkur84j9_test.go:11 +0x7b\ncommand-line-arguments_test.TestRound_And_Sum(0xc000186300)\n\t/tmp/tmpxkur84j9_test.go:24 +0x14a\ntesting.tRunner(0xc000186300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        list2 = make([]int, len(list1.([]float64)))\n        for i, v := range list1.([]float64) {\n            list2[i] = int(v)\n        }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp280arqrc_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp280arqrc_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    for _, v := range list1.([]int) {\n        sum += int(v)\n    }\n    return sum * len(list1.([]int))\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc00008c6f8, 0x5fa180)\n\t/tmp/tmpfgp_ns8v_test.go:11 +0x7e\ncommand-line-arguments_test.TestRound_And_Sum(0xc000001380)\n\t/tmp/tmpfgp_ns8v_test.go:24 +0x14a\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n        case []int:\n            for _, value := range list1.([]int) {\n                sum += int(value)\n            }\n        case []float64:\n            for _, value := range list1.([]float64) {\n                sum += int(value)\n            }\n        case []float32:\n            for _, value := range list1.([]float32) {\n                sum += int(value)\n            }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn5ujsmxs_test.go:43: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpn5ujsmxs_test.go:43: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn5ujsmxs_test.go:43: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float32:\n        list2 = make([]int, len(list1.([]float32)))\n        for i, v := range list1.([]float32) {\n            list2[i] = int(v)\n        }\n    case []float64:\n        list2 = make([]int, len(list1.([]float64)))\n        for i, v := range list1.([]float64) {\n            list2[i] = int(v)\n        }\n    default:\n        return 0\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpisc2agg9_test.go:49: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpisc2agg9_test.go:49: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    for _, v := range list1.([]int) {\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc000086ef8, 0x5fa180)\n\t/tmp/tmpxkur84j9_test.go:11 +0x7b\ncommand-line-arguments_test.TestRound_And_Sum(0xc000186300)\n\t/tmp/tmpxkur84j9_test.go:24 +0x14a\ntesting.tRunner(0xc000186300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        list2 = make([]int, len(list1.([]float64)))\n        for i, v := range list1.([]float64) {\n            list2[i] = int(v)\n        }\n    default:\n        return 0\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpiozaehmb_test.go:44: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpiozaehmb_test.go:44: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum * len(list1.([]int))\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc0000866f8, 0x5fa1c0)\n\t/tmp/tmp6zeqv3mm_test.go:21 +0x12b\ncommand-line-arguments_test.TestRound_And_Sum(0xc000102600)\n\t/tmp/tmp6zeqv3mm_test.go:31 +0x14a\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    for _, v := range list1.([]int) {\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc000086ef8, 0x5fa180)\n\t/tmp/tmpxkur84j9_test.go:11 +0x7b\ncommand-line-arguments_test.TestRound_And_Sum(0xc000186300)\n\t/tmp/tmpxkur84j9_test.go:24 +0x14a\ntesting.tRunner(0xc000186300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            count++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            count++\n        }\n    }\n    return sum * count\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list = list1.([]int)\n    for _, v := range list {\n        sum += int(v)\n    }\n    return sum * len(list)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        list3 := list1.([]float64)\n        for _, v := range list3 {\n            list2 = append(list2, int(v))\n        }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    for _, v := range list1.([]int) {\n        sum += int(v)\n    }\n    return sum * len(list1.([]int))\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc00008c6f8, 0x5fa180)\n\t/tmp/tmpfgp_ns8v_test.go:11 +0x7e\ncommand-line-arguments_test.TestRound_And_Sum(0xc000001380)\n\t/tmp/tmpfgp_ns8v_test.go:24 +0x14a\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    case []float32:\n        for _, v := range list1.([]float32) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var list2 []int\n    var sum int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        list2 = make([]int, len(list1.([]float64)))\n        for i, v := range list1.([]float64) {\n            list2[i] = int(v)\n        }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        for _, v := range list1.([]float64) {\n            list2 = append(list2, int(v))\n        }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp_solcs24_test.go:41: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp_solcs24_test.go:41: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v + 0.5)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v + 0.5)\n        }\n    }\n    return sum * len(list1.([]int))\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    for _, v := range list1.([]int) {\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc000086ef8, 0x5fa180)\n\t/tmp/tmpxkur84j9_test.go:11 +0x7b\ncommand-line-arguments_test.TestRound_And_Sum(0xc000186300)\n\t/tmp/tmpxkur84j9_test.go:24 +0x14a\ntesting.tRunner(0xc000186300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n        case []int:\n            length = len(list1.([]int))\n            for _, v := range list1.([]int) {\n                sum += v\n            }\n        case []float64:\n            length = len(list1.([]float64))\n            for _, v := range list1.([]float64) {\n                sum += int(v)\n            }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var len int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            len++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            len++\n        }\n    }\n    return sum * len\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        for _, v := range list1.([]float64) {\n            list2 = append(list2, int(v))\n        }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp_solcs24_test.go:41: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp_solcs24_test.go:41: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    for _, v := range list1.([]int) {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        length = len(list)\n        for _, v := range list {\n            sum += v\n        }\n    case []float64:\n        list := list1.([]float64)\n        length = len(list)\n        for _, v := range list {\n            sum += int(v)\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, value := range list1.([]int) {\n            sum += round(value)\n            length++\n        }\n    case []float64:\n        for _, value := range list1.([]float64) {\n            sum += round(value)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    for _, v := range list1.([]int) {\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc000086ef8, 0x5fa180)\n\t/tmp/tmpxkur84j9_test.go:11 +0x7b\ncommand-line-arguments_test.TestRound_And_Sum(0xc000186300)\n\t/tmp/tmpxkur84j9_test.go:24 +0x14a\ntesting.tRunner(0xc000186300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n        case []int:\n            for _, v := range list1.([]int) {\n                sum += v\n            }\n        case []float64:\n            for _, v := range list1.([]float64) {\n                sum += int(v)\n            }\n        case []float32:\n            for _, v := range list1.([]float32) {\n                sum += int(v)\n            }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n            length += 1\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length += 1\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n        case []int:\n            for _, v := range list1.([]int) {\n                sum += int(v)\n            }\n        case []float64:\n            for _, v := range list1.([]float64) {\n                sum += int(v)\n            }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    for _, v := range list1.([]int) {\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc000086ef8, 0x5fa180)\n\t/tmp/tmpxkur84j9_test.go:11 +0x7b\ncommand-line-arguments_test.TestRound_And_Sum(0xc000186300)\n\t/tmp/tmpxkur84j9_test.go:24 +0x14a\ntesting.tRunner(0xc000186300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n            length += 1\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length += 1\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n        case []int:\n            for _, v := range list1.([]int) {\n                sum += int(v)\n            }\n        case []float64:\n            for _, v := range list1.([]float64) {\n                sum += int(v)\n            }\n        case []float32:\n            for _, v := range list1.([]float32) {\n                sum += int(v)\n            }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length += 1\n        }\n        return sum * length\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length += 1\n        }\n        return sum * length\n    default:\n        return 0\n    }\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    case []float32:\n        for _, v := range list1.([]float32) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    switch list1.(type) {\n        case []int:\n            var sum int\n            for _, v := range list1.([]int) {\n                sum += v\n            }\n            return sum\n        case []float64:\n            var sum float64\n            for _, v := range list1.([]float64) {\n                sum += v\n            }\n            return int(sum)\n        default:\n            return 0\n    }\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += round(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += round(v)\n        }\n    }\n    return sum * len(list1.([]int))\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n        return sum\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n        case []int:\n            for _, v := range list1.([]int) {\n                sum += int(v)\n            }\n        case []float64:\n            for _, v := range list1.([]float64) {\n                sum += int(v)\n            }\n        case []float32:\n            for _, v := range list1.([]float32) {\n                sum += int(v)\n            }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    for _, v := range list1.([]int) {\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc000086ef8, 0x5fa180)\n\t/tmp/tmpxkur84j9_test.go:11 +0x7b\ncommand-line-arguments_test.TestRound_And_Sum(0xc000186300)\n\t/tmp/tmpxkur84j9_test.go:24 +0x14a\ntesting.tRunner(0xc000186300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    case []float32:\n        for _, v := range list1.([]float32) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n        for _, v := range list2 {\n            sum += v\n        }\n        return sum * len(list2)\n    case []float64:\n        list2 = list1.([]float64)\n        for _, v := range list2 {\n            sum += int(v)\n        }\n        return sum * len(list2)\n    default:\n        return 0\n    }\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    for _, v := range list1.([]int) {\n        list2 = append(list2, int(v/10))\n        sum += int(v/10)\n    }\n    fmt.Println(list2)\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum * len(list1.([]int))\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc0000866f8, 0x5fa1c0)\n\t/tmp/tmp6zeqv3mm_test.go:21 +0x12b\ncommand-line-arguments_test.TestRound_And_Sum(0xc000102600)\n\t/tmp/tmp6zeqv3mm_test.go:31 +0x14a\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    for _, v := range list1.([]int) {\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc000086ef8, 0x5fa180)\n\t/tmp/tmpxkur84j9_test.go:11 +0x7b\ncommand-line-arguments_test.TestRound_And_Sum(0xc000186300)\n\t/tmp/tmpxkur84j9_test.go:24 +0x14a\ntesting.tRunner(0xc000186300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n        case []int:\n            for _, v := range list1.([]int) {\n                sum += int(v)\n            }\n        case []float64:\n            for _, v := range list1.([]float64) {\n                sum += int(v)\n            }\n        case []float32:\n            for _, v := range list1.([]float32) {\n                sum += int(v)\n            }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n        case []int:\n            list2 = list1.([]int)\n        case []float64:\n            list2 = make([]int, len(list1.([]float64)))\n            for i, v := range list1.([]float64) {\n                list2[i] = int(v)\n            }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum * len(list1.([]int))\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc0000866f8, 0x5fa1c0)\n\t/tmp/tmp6zeqv3mm_test.go:21 +0x12b\ncommand-line-arguments_test.TestRound_And_Sum(0xc000102600)\n\t/tmp/tmp6zeqv3mm_test.go:31 +0x14a\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    sum := 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n        case []int:\n            for _, v := range list1.([]int) {\n                sum += int(float64(v) + 0.5)\n            }\n        case []float64:\n            for _, v := range list1.([]float64) {\n                sum += int(v + 0.5)\n            }\n    }\n    return sum * len(list1.([]int))\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += round(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += round(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1 := list1.(type) {\n    case []int:\n        for _, v := range list1 {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1 {\n            sum += int(v)\n        }\n    }\n    return sum * len(list1.([]int))\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        sum := 0\n        for _, v := range list {\n            sum += v\n        }\n        return sum\n    case []float64:\n        list := list1.([]float64)\n        sum := 0.0\n        for _, v := range list {\n            sum += v\n        }\n        return int(sum)\n    default:\n        return 0\n    }\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int = 0\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        list2 = make([]int, len(list1.([]float64)))\n        for i, v := range list1.([]float64) {\n            list2[i] = int(v)\n        }\n    default:\n        return 0\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        for _, value := range list {\n            sum += int(value)\n        }\n    case []float64:\n        list := list1.([]float64)\n        for _, value := range list {\n            sum += int(value)\n        }\n    }\n    return sum * len(list1.([]int))\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        length = len(list)\n        for _, v := range list {\n            sum += v\n        }\n    case []float64:\n        list := list1.([]float64)\n        length = len(list)\n        for _, v := range list {\n            sum += int(v)\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        list2 = make([]int, len(list1.([]float64)))\n        for i, v := range list1.([]float64) {\n            list2[i] = int(v)\n        }\n    default:\n        panic(\"Invalid type\")\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n        case []int:\n            for _, v := range list1.([]int) {\n                sum += v\n            }\n        case []float64:\n            for _, v := range list1.([]float64) {\n                sum += int(v)\n            }\n        case []float32:\n            for _, v := range list1.([]float32) {\n                sum += int(v)\n            }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            list2 = append(list2, int(v))\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            list2 = append(list2, int(v))\n        }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        list2 = make([]int, len(list1.([]float64)))\n        for i, v := range list1.([]float64) {\n            list2[i] = int(v)\n        }\n    default:\n        return 0\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpiozaehmb_test.go:44: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpiozaehmb_test.go:44: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n        case []int:\n            for _, v := range list1.([]int) {\n                sum += v\n                length++\n            }\n        case []float64:\n            for _, v := range list1.([]float64) {\n                sum += int(v)\n                length++\n            }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length += 1\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length += 1\n        }\n    default:\n        fmt.Println(\"Invalid type\")\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum * len(list1.([]int))\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1 := list1.(type) {\n    case []int:\n        for _, v := range list1 {\n            list2 = append(list2, int(v))\n        }\n    case []float64:\n        for _, v := range list1 {\n            list2 = append(list2, int(v))\n        }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length += 1\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length += 1\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        var sum int\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n        return sum\n    case []float64:\n        var sum float64\n        for _, v := range list1.([]float64) {\n            sum += v\n        }\n        return int(sum)\n    default:\n        return 0\n    }\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, value := range list1.([]int) {\n            sum += int(value)\n            length += 1\n        }\n    case []float64:\n        for _, value := range list1.([]float64) {\n            sum += int(value)\n            length += 1\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n        case []int:\n            length = len(list1.([]int))\n            for _, v := range list1.([]int) {\n                sum += v\n            }\n        case []float64:\n            length = len(list1.([]float64))\n            for _, v := range list1.([]float64) {\n                sum += int(v)\n            }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        length = len(list1.([]int))\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        length = len(list1.([]float64))\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    for _, v := range list1.([]int) {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n        case []int:\n            list2 = list1.([]int)\n        case []float64:\n            for _, v := range list1.([]float64) {\n                list2 = append(list2, int(v))\n            }\n        default:\n            return 0\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list []int\n    switch list1.(type) {\n    case []int:\n        list = list1.([]int)\n    case []float64:\n        list = make([]int, len(list1.([]float64)))\n        for i, v := range list1.([]float64) {\n            list[i] = int(v)\n        }\n    }\n    for _, v := range list {\n        sum += v\n    }\n    return sum * len(list)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        list2 = make([]int, len(list1.([]float64)))\n        for i, v := range list1.([]float64) {\n            list2[i] = int(v)\n        }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp280arqrc_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp280arqrc_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    for _, v := range list1.([]int) {\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc000086ef8, 0x5fa180)\n\t/tmp/tmpxkur84j9_test.go:11 +0x7b\ncommand-line-arguments_test.TestRound_And_Sum(0xc000186300)\n\t/tmp/tmpxkur84j9_test.go:24 +0x14a\ntesting.tRunner(0xc000186300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        list2 = make([]int, len(list1.([]float64)))\n        for i, v := range list1.([]float64) {\n            list2[i] = int(v)\n        }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp280arqrc_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp280arqrc_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        list2 = make([]int, len(list1.([]float64)))\n        for i, v := range list1.([]float64) {\n            list2[i] = int(v)\n        }\n    default:\n        return 0\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpiozaehmb_test.go:44: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpiozaehmb_test.go:44: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, i := range list1.([]int) {\n            sum += i\n            length += 1\n        }\n    case []float64:\n        for _, i := range list1.([]float64) {\n            sum += int(i)\n            length += 1\n        }\n    default:\n        fmt.Println(\"Error: unsupported type\")\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpl0e7_6s6_test.go:44: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpl0e7_6s6_test.go:44: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n        case []int:\n            for _, v := range list1.([]int) {\n                sum += int(v)\n            }\n        case []float64:\n            for _, v := range list1.([]float64) {\n                sum += int(v)\n            }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n        return sum * length\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n        return sum * length\n    default:\n        return 0\n    }\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpuhq9xarn_test.go:45: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpuhq9xarn_test.go:45: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum * len(list1.([]int))\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc0000866f8, 0x5fa1c0)\n\t/tmp/tmp6zeqv3mm_test.go:21 +0x12b\ncommand-line-arguments_test.TestRound_And_Sum(0xc000102600)\n\t/tmp/tmp6zeqv3mm_test.go:31 +0x14a\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var list []int\n    switch list1.(type) {\n    case []int:\n        list = list1.([]int)\n    case []float64:\n        for _, v := range list1.([]float64) {\n            list = append(list, int(v))\n        }\n    }\n    for _, v := range list {\n        if v < 0 {\n            sum += v - 1\n        } else {\n            sum += v\n        }\n    }\n    return sum * len(list)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpnljkw0jm_test.go:45: expected '%!s(int=243)', got '%!s(int=198)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpnljkw0jm_test.go:45: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int = 0\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        list2 = make([]int, len(list1.([]float64)))\n        for i, v := range list1.([]float64) {\n            list2[i] = int(v)\n        }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp4g82iuxo_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp4g82iuxo_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum * len(list1.([]int))\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0001242a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc0000866f8, 0x5fa1c0)\n\t/tmp/tmp6zeqv3mm_test.go:21 +0x12b\ncommand-line-arguments_test.TestRound_And_Sum(0xc000102600)\n\t/tmp/tmp6zeqv3mm_test.go:31 +0x14a\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length += 1\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length += 1\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122525,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    for _, v := range list1.([]int) {\n        sum += int(v)\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\npanic: interface conversion: interface {} is []float64, not []int [recovered]\n\tpanic: interface conversion: interface {} is []float64, not []int\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc00018c240)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.round_and_sum(0x51a2e0, 0xc000086ef8, 0x5fa180)\n\t/tmp/tmpxkur84j9_test.go:11 +0x7b\ncommand-line-arguments_test.TestRound_And_Sum(0xc000186300)\n\t/tmp/tmpxkur84j9_test.go:24 +0x14a\ntesting.tRunner(0xc000186300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=243)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=345)', got '%!s(int=0)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmp5av7scb7_test.go:29: expected '%!s(int=513)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=243)', got '%!s(int=26)'\n    --- FAIL: TestRound_And_Sum/test_num__1 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=345)', got '%!s(int=69)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpzwneii30_test.go:39: expected '%!s(int=513)', got '%!s(int=170)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "--- FAIL: TestRound_And_Sum (0.00s)\n    --- FAIL: TestRound_And_Sum/test_num__0 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=243)', got '%!s(int=234)'\n    --- FAIL: TestRound_And_Sum/test_num__2 (0.00s)\n        tmpn3fwrvrh_test.go:42: expected '%!s(int=513)', got '%!s(int=510)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n\nfunc TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122495,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    }
  ]
}