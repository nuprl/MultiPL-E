{
  "name": "mbpp_624_is_upper",
  "language": "go_test.go",
  "prompt": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py",
  "prompt_terminology": "reworded",
  "tests": "func TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    return string(myString[0] - 32) + myString[1:]\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpq3_tav21_test.go:31: expected 'PERSON', got 'Person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpq3_tav21_test.go:31: expected 'FINAL', got 'Final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpq3_tav21_test.go:31: expected 'VALID', got '6alid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var upperString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            upperString += string(char - 32)\n        } else {\n            upperString += string(char)\n        }\n    }\n    return upperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var upperString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            upperString += string(char - 32)\n        } else {\n            upperString += string(char)\n        }\n    }\n    return upperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var upperString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            upperString += string(char - 32)\n        } else {\n            upperString += string(char)\n        }\n    }\n    return upperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var myUpperString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            myUpperString += string(char - 32)\n        } else {\n            myUpperString += string(char)\n        }\n    }\n    return myUpperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return fmt.Sprintf(\"%s\", myString)\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    if myString[0] >= 'a' && myString[0] <= 'z' {\n        return string(myString[0] - 'a' + 'A') + is_upper(myString[1:])\n    }\n    return string(myString[0]) + is_upper(myString[1:])\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var myUpperString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            myUpperString += string(char - 32)\n        } else {\n            myUpperString += string(char)\n        }\n    }\n    return myUpperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    if myString[0] >= 'a' && myString[0] <= 'z' {\n        return string(myString[0] - 32) + is_upper(myString[1:])\n    }\n    return string(myString[0]) + is_upper(myString[1:])\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n\n    if myString[0] >= 'a' && myString[0] <= 'z' {\n        return string(myString[0] - 32) + is_upper(myString[1:])\n    }\n\n    return string(myString[0]) + is_upper(myString[1:])\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return fmt.Sprintf(\"%s\", myString)\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return fmt.Sprintf(\"%s\", myString)\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    if myString[0] >= 'a' && myString[0] <= 'z' {\n        return string(myString[0] - 'a' + 'A') + is_upper(myString[1:])\n    }\n    return string(myString[0]) + is_upper(myString[1:])\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    if myString[0] >= 'a' && myString[0] <= 'z' {\n        return string(myString[0] - 32) + is_upper(myString[1:])\n    }\n    return string(myString[0]) + is_upper(myString[1:])\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var upperString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            upperString += string(char - 32)\n        } else {\n            upperString += string(char)\n        }\n    }\n    return upperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return fmt.Sprintf(\"%s\", myString)\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var upperString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            upperString += string(char)\n        }\n    }\n    return upperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp06vvxjqu_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp06vvxjqu_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp06vvxjqu_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    if myString[0] >= 'a' && myString[0] <= 'z' {\n        return string(myString[0] - 32) + is_upper(myString[1:])\n    }\n    return string(myString[0]) + is_upper(myString[1:])\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpw16fpx6f_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpw16fpx6f_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpw16fpx6f_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    if myString[0] >= 'a' && myString[0] <= 'z' {\n        return string(myString[0] - 32) + is_upper(myString[1:])\n    }\n    return string(myString[0]) + is_upper(myString[1:])\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var myUpperString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            myUpperString += string(char - 32)\n        } else {\n            myUpperString += string(char)\n        }\n    }\n    return myUpperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var upperString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            upperString += string(char - 32)\n        } else {\n            upperString += string(char)\n        }\n    }\n    return upperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var upperString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            upperString += string(char)\n        }\n    }\n    return upperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp06vvxjqu_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp06vvxjqu_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp06vvxjqu_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return fmt.Sprintf(\"%s\", myString)\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    // Convert the string to a rune slice.\n    myRuneSlice := []rune(myString)\n    // Loop through the rune slice.\n    for i, c := range myRuneSlice {\n        // If the rune is lowercase, convert it to uppercase.\n        if c >= 'a' && c <= 'z' {\n            myRuneSlice[i] = c - 32\n        }\n    }\n    // Convert the rune slice back to a string and return it.\n    return string(myRuneSlice)\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return fmt.Sprintf(\"%s\", myString)\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return fmt.Sprintf(\"%s\", myString)\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return fmt.Sprintf(\"%s\", myString)\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    if myString[0] >= 'a' && myString[0] <= 'z' {\n        return string(myString[0] - 32) + is_upper(myString[1:])\n    }\n    return string(myString[0]) + is_upper(myString[1:])\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    return string(myString[0] - 32) + myString[1:]\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpq3_tav21_test.go:31: expected 'PERSON', got 'Person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpq3_tav21_test.go:31: expected 'FINAL', got 'Final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpq3_tav21_test.go:31: expected 'VALID', got '6alid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var myUpperString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            myUpperString += string(char - 32)\n        } else {\n            myUpperString += string(char)\n        }\n    }\n    return myUpperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return fmt.Sprintf(\"%s\", myString)\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    return string(myString[0] - 32) + myString[1:]\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpq3_tav21_test.go:31: expected 'PERSON', got 'Person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpq3_tav21_test.go:31: expected 'FINAL', got 'Final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpq3_tav21_test.go:31: expected 'VALID', got '6alid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    if myString[0] >= 'a' && myString[0] <= 'z' {\n        return string(myString[0] - 32) + is_upper(myString[1:])\n    }\n    return string(myString[0]) + is_upper(myString[1:])\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return fmt.Sprintf(\"%s\", myString)\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var upperString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            upperString += string(char)\n        }\n    }\n    return upperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp06vvxjqu_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp06vvxjqu_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp06vvxjqu_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var upperString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            upperString += string(char - 32)\n        } else {\n            upperString += string(char)\n        }\n    }\n    return upperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var upperString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            upperString += string(char - 32)\n        } else {\n            upperString += string(char)\n        }\n    }\n    return upperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var upperString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            upperString += string(char - 32)\n        } else {\n            upperString += string(char)\n        }\n    }\n    return upperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for i := 0; i < len(myString); i++ {\n        if myString[i] >= 'a' && myString[i] <= 'z' {\n            result += string(myString[i] - 32)\n        } else {\n            result += string(myString[i])\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    // Convert the string to a rune slice.\n    mySlice := []rune(myString)\n    // Iterate over the slice.\n    for i, c := range mySlice {\n        // If the character is lowercase, convert it to uppercase.\n        if c >= 'a' && c <= 'z' {\n            mySlice[i] = c - 32\n        }\n    }\n    // Convert the slice back to a string and return it.\n    return string(mySlice)\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var upperString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            upperString += string(char - 32)\n        } else {\n            upperString += string(char)\n        }\n    }\n    return upperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    if myString[0] >= 'a' && myString[0] <= 'z' {\n        return string(myString[0] - 32) + is_upper(myString[1:])\n    }\n    return string(myString[0]) + is_upper(myString[1:])\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var newString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            newString += string(char - 32)\n        } else {\n            newString += string(char)\n        }\n    }\n    return newString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if len(myString) == 0 {\n        return \"\"\n    }\n    if myString[0] >= 'a' && myString[0] <= 'z' {\n        return string(myString[0] - 32) + is_upper(myString[1:])\n    }\n    return string(myString[0]) + is_upper(myString[1:])\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    return string(myString[0]) + is_upper(myString[1:])\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpyk9e_fgd_test.go:31: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpyk9e_fgd_test.go:31: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpyk9e_fgd_test.go:31: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    if myString[0] >= 'a' && myString[0] <= 'z' {\n        return string(myString[0] - 32) + is_upper(myString[1:])\n    }\n    return string(myString[0]) + is_upper(myString[1:])\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return fmt.Sprintf(\"%s\", myString)\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    if myString == \"\" {\n        return \"\"\n    }\n    return string(myString[0] - 32) + myString[1:]\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpq3_tav21_test.go:31: expected 'PERSON', got 'Person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpq3_tav21_test.go:31: expected 'FINAL', got 'Final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpq3_tav21_test.go:31: expected 'VALID', got '6alid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var upperString string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            upperString += string(char)\n        }\n    }\n    return upperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp06vvxjqu_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp06vvxjqu_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp06vvxjqu_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var myUpperString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            myUpperString += string(char - 32)\n        } else {\n            myUpperString += string(char)\n        }\n    }\n    return myUpperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var myUpperString string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            myUpperString += string(char - 32)\n        } else {\n            myUpperString += string(char)\n        }\n    }\n    return myUpperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'a' && char <= 'z' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return fmt.Sprintf(\"%s\", myString)\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpkixtlqg9_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var result string\n    for _, char := range myString {\n        if char >= 'A' && char <= 'Z' {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'PERSON', got ''\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'FINAL', got ''\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmp5qw9tqg4_test.go:34: expected 'VALID', got 'V'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    return myString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510452,
      "stdout": "--- FAIL: TestIs_Upper (0.00s)\n    --- FAIL: TestIs_Upper/test_num__0 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'PERSON', got 'person'\n    --- FAIL: TestIs_Upper/test_num__1 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'FINAL', got 'final'\n    --- FAIL: TestIs_Upper/test_num__2 (0.00s)\n        tmpfaitkxz8_test.go:28: expected 'VALID', got 'Valid'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to convert a given string to uppercase.\nfunc is_upper(myString string) string {\n    var upperString string\n    for _, c := range myString {\n        if c >= 'a' && c <= 'z' {\n            upperString += string(c - 32)\n        } else {\n            upperString += string(c)\n        }\n    }\n    return upperString\n}\n\nfunc TestIs_Upper(t *testing.T) {\n  candidate := is_upper\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"person\"), expected: \"PERSON\" },\n     { actual: candidate(\"final\"), expected: \"FINAL\" },\n     { actual: candidate(\"Valid\"), expected: \"VALID\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123398,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}