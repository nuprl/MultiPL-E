{
  "name": "mbpp_421_concatenate_tuple",
  "language": "go_test.go",
  "prompt": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "func TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, elem := range test_tup {\n        result += fmt.Sprintf(\"%v\", elem)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == len(test_tup) - 1 {\n            result += fmt.Sprintf(\"%v\", v)\n        } else {\n            result += fmt.Sprintf(\"%v, \", v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i := 0; i < len(test_tup); i++ {\n        result += fmt.Sprintf(\"%v\", test_tup[i])\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpgm4purig_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpgm4purig_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpgm4purig_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, val := range test_tup {\n        result += fmt.Sprintf(\"%v\", val)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmplwh51brb_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == len(test_tup) - 1 {\n            result += fmt.Sprintf(\"%v\", v)\n        } else {\n            result += fmt.Sprintf(\"%v, \", v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i := 0; i < len(test_tup); i++ {\n        result += fmt.Sprintf(\"%v\", test_tup[i])\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpgm4purig_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpgm4purig_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpgm4purig_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, value := range test_tup {\n        result += fmt.Sprintf(\"%v\", value)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpyv_gfaew_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpyv_gfaew_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpyv_gfaew_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == len(test_tup) - 1 {\n            result += fmt.Sprintf(\"%v\", v)\n        } else {\n            result += fmt.Sprintf(\"%v, \", v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i := 0; i < len(test_tup); i++ {\n        result += fmt.Sprintf(\"%v\", test_tup[i])\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpgm4purig_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpgm4purig_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpgm4purig_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, value := range test_tup {\n        result += fmt.Sprintf(\"%v\", value)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpyv_gfaew_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpyv_gfaew_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpyv_gfaew_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, elem := range test_tup {\n        result += fmt.Sprintf(\"%v\", elem)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, val := range test_tup {\n        result += fmt.Sprintf(\"%v\", val)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmplwh51brb_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, val := range test_tup {\n        result += fmt.Sprintf(\"%v\", val)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmplwh51brb_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s,%v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0spb641__test.go:36: expected 'ID-is-4-UTS', got 'ID,is,4,UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0spb641__test.go:36: expected 'QWE-is-4-RTY', got 'QWE,is,4,RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0spb641__test.go:36: expected 'ZEN-is-4-OP', got 'ZEN,is,4,OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, val := range test_tup {\n        result += fmt.Sprintf(\"%v\", val)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmplwh51brb_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == len(test_tup) - 1 {\n            result += fmt.Sprintf(\"%v\", v)\n        } else {\n            result += fmt.Sprintf(\"%v, \", v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == len(test_tup) - 1 {\n            result += fmt.Sprintf(\"%v\", v)\n        } else {\n            result += fmt.Sprintf(\"%v, \", v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var str string\n    for _, v := range test_tup {\n        str += fmt.Sprintf(\"%v\", v)\n    }\n    return str\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpfm6vxwu6_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpfm6vxwu6_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpfm6vxwu6_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, elem := range test_tup {\n        result += fmt.Sprintf(\"%v\", elem)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var str string\n    for _, v := range test_tup {\n        str += fmt.Sprintf(\"%v\", v)\n    }\n    return str\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpfm6vxwu6_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpfm6vxwu6_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpfm6vxwu6_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, val := range test_tup {\n        result += fmt.Sprintf(\"%v\", val)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmplwh51brb_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, value := range test_tup {\n        result += fmt.Sprintf(\"%v\", value)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpyv_gfaew_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpyv_gfaew_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpyv_gfaew_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var str string\n    for _, val := range test_tup {\n        str += fmt.Sprintf(\"%v\", val)\n    }\n    return str\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp3hb3aufs_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp3hb3aufs_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp3hb3aufs_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s%v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%v, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpxqtiign7_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpxqtiign7_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpxqtiign7_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%v, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpxqtiign7_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpxqtiign7_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpxqtiign7_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s%v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, elem := range test_tup {\n        result += fmt.Sprintf(\"%v\", elem)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var str string\n    for _, v := range test_tup {\n        str += fmt.Sprintf(\"%v\", v)\n    }\n    return str\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpfm6vxwu6_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpfm6vxwu6_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpfm6vxwu6_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s%v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, val := range test_tup {\n        result += fmt.Sprintf(\"%v\", val)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmplwh51brb_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, elem := range test_tup {\n        result += fmt.Sprintf(\"%v\", elem)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, value := range test_tup {\n        result += fmt.Sprintf(\"%v\", value)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpyv_gfaew_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpyv_gfaew_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpyv_gfaew_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, elem := range test_tup {\n        result += fmt.Sprintf(\"%v\", elem)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, val := range test_tup {\n        result += fmt.Sprintf(\"%v\", val)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmplwh51brb_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, val := range test_tup {\n        result += fmt.Sprintf(\"%v\", val)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmplwh51brb_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s%v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == len(test_tup) - 1 {\n            result += fmt.Sprintf(\"%v\", v)\n        } else {\n            result += fmt.Sprintf(\"%v\", v) + \",\"\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpep42i39y_test.go:36: expected 'ID-is-4-UTS', got 'ID,is,4,UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpep42i39y_test.go:36: expected 'QWE-is-4-RTY', got 'QWE,is,4,RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpep42i39y_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN,is,4,OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var str string\n    for _, val := range test_tup {\n        str += fmt.Sprintf(\"%v\", val)\n    }\n    return str\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp3hb3aufs_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp3hb3aufs_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp3hb3aufs_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == len(test_tup) - 1 {\n            result += fmt.Sprintf(\"%v\", v)\n        } else {\n            result += fmt.Sprintf(\"%v, \", v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, val := range test_tup {\n        result += fmt.Sprintf(\"%v\", val)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmplwh51brb_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, val := range test_tup {\n        if i == 0 {\n            result = fmt.Sprint(val)\n        } else {\n            result += fmt.Sprint(val)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp9ekexmxr_test.go:36: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp9ekexmxr_test.go:36: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp9ekexmxr_test.go:36: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s%v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, elem := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", elem)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, elem)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpa608_zuh_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpa608_zuh_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpa608_zuh_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result = result + fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmphhpsf5yx_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmphhpsf5yx_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmphhpsf5yx_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var str string\n    for _, v := range test_tup {\n        str += fmt.Sprintf(\"%v\", v)\n    }\n    return str\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpfm6vxwu6_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpfm6vxwu6_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpfm6vxwu6_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result += fmt.Sprintf(\"%v\", v)\n        } else {\n            result += fmt.Sprintf(\"-%v\", v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var str string\n    for _, val := range test_tup {\n        str += fmt.Sprintf(\"%v\", val)\n    }\n    return str\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp3hb3aufs_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp3hb3aufs_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp3hb3aufs_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, elem := range test_tup {\n        result += fmt.Sprintf(\"%v\", elem)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, elem := range test_tup {\n        result += fmt.Sprintf(\"%v\", elem)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result += fmt.Sprintf(\"%v\", v)\n        } else {\n            result += fmt.Sprintf(\"-%v\", v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, val := range test_tup {\n        result += fmt.Sprintf(\"%v\", val)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmplwh51brb_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        switch v.(type) {\n        case string:\n            result += v.(string)\n        case int:\n            result += fmt.Sprintf(\"%d\", v.(int))\n        case float64:\n            result += fmt.Sprintf(\"%f\", v.(float64))\n        default:\n            result += fmt.Sprintf(\"%v\", v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp395_suuv_test.go:41: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp395_suuv_test.go:41: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp395_suuv_test.go:41: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == len(test_tup) - 1 {\n            result += fmt.Sprintf(\"%v\", v)\n        } else {\n            result += fmt.Sprintf(\"%v, \", v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        switch v.(type) {\n        case string:\n            result += v.(string)\n        case int:\n            result += fmt.Sprintf(\"%d\", v.(int))\n        case float64:\n            result += fmt.Sprintf(\"%f\", v.(float64))\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp_6l89f4p_test.go:39: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp_6l89f4p_test.go:39: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp_6l89f4p_test.go:39: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s-%v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s%v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpd2qw9ijv_test.go:36: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, val := range test_tup {\n        result += fmt.Sprintf(\"%v\", val)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmplwh51brb_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s-%v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var str string\n    for _, element := range test_tup {\n        str += fmt.Sprintf(\"%v\", element)\n    }\n    return str\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpu_dy8rt__test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpu_dy8rt__test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpu_dy8rt__test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, val := range test_tup {\n        result += fmt.Sprintf(\"%v\", val)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmplwh51brb_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, value := range test_tup {\n        result += fmt.Sprintf(\"%v\", value)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpyv_gfaew_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpyv_gfaew_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpyv_gfaew_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, val := range test_tup {\n        result += fmt.Sprintf(\"%v\", val)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmplwh51brb_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmplwh51brb_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, element := range test_tup {\n        result += fmt.Sprintf(\"%v\", element)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123567,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp0f8b205y_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, elem := range test_tup {\n        result += fmt.Sprintf(\"%v\", elem)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpessjl3vw_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for _, v := range test_tup {\n        result += fmt.Sprintf(\"%v\", v)\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ID-is-4-UTS', got 'IDis4UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'QWE-is-4-RTY', got 'QWEis4RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpdvy355jt_test.go:32: expected 'ZEN-is-4-OP', got 'ZENis4OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == len(test_tup) - 1 {\n            result += fmt.Sprintf(\"%v\", v)\n        } else {\n            result += fmt.Sprintf(\"%v, \", v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmp_09yr8jv_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package concatenate_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to concatenate each element of list by the delimiter.\nfunc concatenate_tuple(test_tup []interface{}) string {\n    var result string\n    for i, v := range test_tup {\n        if i == 0 {\n            result = fmt.Sprintf(\"%v\", v)\n        } else {\n            result = fmt.Sprintf(\"%s, %v\", result, v)\n        }\n    }\n    return result\n}\n\nfunc TestConcatenate_Tuple(t *testing.T) {\n  candidate := concatenate_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"ID\", \"is\", 4, \"UTS\"}), expected: \"ID-is-4-UTS\" },\n     { actual: candidate([]interface{}{\"QWE\", \"is\", 4, \"RTY\"}), expected: \"QWE-is-4-RTY\" },\n     { actual: candidate([]interface{}{\"ZEN\", \"is\", 4, \"OP\"}), expected: \"ZEN-is-4-OP\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510258,
      "stdout": "--- FAIL: TestConcatenate_Tuple (0.00s)\n    --- FAIL: TestConcatenate_Tuple/test_num__0 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ID-is-4-UTS', got 'ID, is, 4, UTS'\n    --- FAIL: TestConcatenate_Tuple/test_num__1 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'QWE-is-4-RTY', got 'QWE, is, 4, RTY'\n    --- FAIL: TestConcatenate_Tuple/test_num__2 (0.00s)\n        tmpn0sqwo3c_test.go:36: expected 'ZEN-is-4-OP', got 'ZEN, is, 4, OP'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}