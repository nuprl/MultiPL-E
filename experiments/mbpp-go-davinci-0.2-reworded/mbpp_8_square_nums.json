{
  "name": "mbpp_8_square_nums",
  "language": "go_test.go",
  "prompt": "package square_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find squares of individual elements in a list.\nfunc square_nums(nums []int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSquare_Nums(t *testing.T) {\n  candidate := square_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: []int{1, 4, 9, 16, 25, 36, 49, 64, 81, 100} },\n     { actual: candidate([]int{10, 20, 30}), expected: []int{100, 400, 900} },\n     { actual: candidate([]int{12, 15}), expected: []int{144, 225} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := []int{}\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    for i, num := range nums {\n        nums[i] = num * num\n    }\n    return nums\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    for i, num := range nums {\n        nums[i] = num * num\n    }\n    return nums\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, n := range nums {\n        squares = append(squares, n*n)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, n := range nums {\n        squares[i] = n * n\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := []int{}\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, v := range nums {\n        squares[i] = v * v\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, n := range nums {\n        squares = append(squares, n*n)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var result []int\n    for _, num := range nums {\n        result = append(result, num * num)\n    }\n    return result\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := []int{}\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var result []int\n    for _, num := range nums {\n        result = append(result, num * num)\n    }\n    return result\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := []int{}\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var result []int\n    for _, num := range nums {\n        result = append(result, num * num)\n    }\n    return result\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, n := range nums {\n        squares = append(squares, n * n)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    for i, v := range nums {\n        nums[i] = v * v\n    }\n    return nums\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    for i, _ := range nums {\n        nums[i] = nums[i] * nums[i]\n    }\n    return nums\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    for i, _ := range nums {\n        nums[i] = nums[i] * nums[i]\n    }\n    return nums\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    result := make([]int, len(nums))\n    for i, n := range nums {\n        result[i] = n * n\n    }\n    return result\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, n := range nums {\n        squares = append(squares, n * n)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, n := range nums {\n        squares = append(squares, n*n)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num * num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, n := range nums {\n        squares[i] = n * n\n    }\n    return squares\n}\n",
    "    var squares []int\n    for _, num := range nums {\n        squares = append(squares, num*num)\n    }\n    return squares\n}\n",
    "    squares := make([]int, len(nums))\n    for i, num := range nums {\n        squares[i] = num * num\n    }\n    return squares\n}\n"
  ]
}