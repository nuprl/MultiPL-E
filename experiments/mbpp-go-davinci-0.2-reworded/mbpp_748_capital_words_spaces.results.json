{
  "name": "mbpp_748_capital_words_spaces",
  "language": "go_test.go",
  "prompt": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var res string\n    for i := 0; i < len(str1); i++ {\n        if i != 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            res += \" \"\n        }\n        res += string(str1[i])\n    }\n    return res\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i, v := range str1 {\n        if i == 0 {\n            str2 += string(v)\n        } else if v >= 'A' && v <= 'Z' {\n            str2 += \" \" + string(v)\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else {\n            if str1[i] >= 'A' && str1[i] <= 'Z' {\n                str2 += \" \" + string(str1[i])\n            } else {\n                str2 += string(str1[i])\n            }\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \"\n        }\n        result += string(str1[i])\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmp4_islme9_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmp4_islme9_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmp4_islme9_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i, _ := range str1 {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else {\n            if str1[i] >= 'A' && str1[i] <= 'Z' {\n                str2 += \" \"\n                str2 += string(str1[i])\n            } else {\n                str2 += string(str1[i])\n            }\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result = string(str1[i])\n        } else {\n            if str1[i] >= 'A' && str1[i] <= 'Z' {\n                result += \" \" + string(str1[i])\n            } else {\n                result += string(str1[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 = string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else {\n            if str1[i] >= 65 && str1[i] <= 90 {\n                str2 += \" \" + string(str1[i])\n            } else {\n                str2 += string(str1[i])\n            }\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for _, char := range str1 {\n        if char >= 'A' && char <= 'Z' {\n            result += \" \" + string(char)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpxw6y017i_test.go:36: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpxw6y017i_test.go:36: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpxw6y017i_test.go:36: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \"\n        }\n        result += string(str1[i])\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else {\n            if str1[i] >= 'A' && str1[i] <= 'Z' {\n                str2 += \" \"\n            }\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    var prev_rune rune\n    for _, r := range str1 {\n        if prev_rune != 0 && prev_rune >= 'A' && prev_rune <= 'Z' && r >= 'A' && r <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(r)\n        prev_rune = r\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpsq2jnce4_test.go:37: expected 'Python Programming Examples', got 'PythonProgrammingExamples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpsq2jnce4_test.go:37: expected 'Get Ready To Be Coding Freak', got 'GetReadyToBeCodingFreak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 = string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 = str2 + \" \" + string(str1[i])\n        } else {\n            str2 = str2 + string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    var prev_is_capital bool = false\n    for _, c := range str1 {\n        if c >= 'A' && c <= 'Z' {\n            if prev_is_capital {\n                str2 += \" \"\n            }\n            prev_is_capital = true\n        } else {\n            prev_is_capital = false\n        }\n        str2 += string(c)\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpa4k5uzxz_test.go:41: expected 'Python Programming Examples', got 'PythonProgrammingExamples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpa4k5uzxz_test.go:41: expected 'Get Ready To Be Coding Freak', got 'GetReadyToBeCodingFreak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i, v := range str1 {\n        if i != 0 && v >= 'A' && v <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(v)\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    // your code here\n    return \"\"\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmp44iflgwj_test.go:29: expected 'Python', got ''\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmp44iflgwj_test.go:29: expected 'Python Programming Examples', got ''\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmp44iflgwj_test.go:29: expected 'Get Ready To Be Coding Freak', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else {\n            if str1[i] >= 65 && str1[i] <= 90 {\n                str2 += \" \" + string(str1[i])\n            } else {\n                str2 += string(str1[i])\n            }\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i != 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \"\n        }\n        result += string(str1[i])\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \"\n        }\n        result += string(str1[i])\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmp4_islme9_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmp4_islme9_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmp4_islme9_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string = \"\"\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpb1viqdev_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpb1viqdev_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpb1viqdev_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else {\n            if str1[i] >= 'A' && str1[i] <= 'Z' {\n                str2 += \" \"\n            }\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i, v := range str1 {\n        if i == 0 {\n            str2 += string(v)\n        } else {\n            if v >= 'A' && v <= 'Z' {\n                str2 += \" \" + string(v)\n            } else {\n                str2 += string(v)\n            }\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 = string(str1[i])\n        } else {\n            if str1[i] >= 'A' && str1[i] <= 'Z' {\n                str2 += \" \"\n                str2 += string(str1[i])\n            } else {\n                str2 += string(str1[i])\n            }\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \"\n        }\n        result += string(str1[i])\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmp4_islme9_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmp4_islme9_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmp4_islme9_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpmfgr86cg_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpmfgr86cg_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpmfgr86cg_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i, v := range str1 {\n        if i == 0 {\n            str2 += string(v)\n        } else {\n            if v >= 'A' && v <= 'Z' {\n                str2 += \" \"\n            }\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i, v := range str1 {\n        if i == 0 {\n            str2 += string(v)\n        } else {\n            if v >= 'A' && v <= 'Z' {\n                str2 += \" \"\n            }\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    var prev_char_is_capital bool = false\n    var prev_char_is_space bool = false\n    for _, char := range str1 {\n        if char >= 'A' && char <= 'Z' {\n            if !prev_char_is_capital && !prev_char_is_space {\n                str2 += \" \"\n            }\n            prev_char_is_capital = true\n            prev_char_is_space = false\n        } else {\n            prev_char_is_capital = false\n            if char == ' ' {\n                prev_char_is_space = true\n            } else {\n                prev_char_is_space = false\n            }\n        }\n        str2 += string(char)\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpkc2vmjzt_test.go:48: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpkc2vmjzt_test.go:48: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpkc2vmjzt_test.go:48: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i, v := range str1 {\n        if i == 0 {\n            str2 = string(v)\n        } else {\n            if v >= 'A' && v <= 'Z' {\n                str2 += \" \" + string(v)\n            } else {\n                str2 += string(v)\n            }\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else {\n            if str1[i] >= 'A' && str1[i] <= 'Z' {\n                result += \" \"\n            }\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i, v := range str1 {\n        if i == 0 {\n            str2 += string(v)\n        } else if v >= 'A' && v <= 'Z' {\n            str2 += \" \" + string(v)\n        } else {\n            str2 += string(v)\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpmfgr86cg_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpmfgr86cg_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpmfgr86cg_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i, v := range str1 {\n        if i == 0 {\n            result += string(v)\n        } else {\n            if str1[i-1] == ' ' {\n                result += string(v)\n            } else {\n                if v >= 'A' && v <= 'Z' {\n                    result += \" \" + string(v)\n                } else {\n                    result += string(v)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' && i > 0 {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 = string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i != 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \"\n        }\n        result += string(str1[i])\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpnv8acnmj_test.go:36: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpnv8acnmj_test.go:36: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpnv8acnmj_test.go:36: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i, v := range str1 {\n        if i == 0 {\n            result += string(v)\n        } else if str1[i-1] == ' ' {\n            result += string(v)\n        } else if str1[i-1] == '-' {\n            result += string(v)\n        } else if str1[i-1] == '_' {\n            result += string(v)\n        } else if str1[i-1] == '.' {\n            result += string(v)\n        } else if str1[i-1] == ',' {\n            result += string(v)\n        } else if str1[i-1] == '!' {\n            result += string(v)\n        } else if str1[i-1] == '?' {\n            result += string(v)\n        } else if str1[i-1] == ':' {\n            result += string(v)\n        } else if str1[i-1] == ';' {\n            result += string(v)\n        } else if str1[i-1] == '(' {\n            result += string(v)\n        } else if str1[i-1] == ')' {\n            result += string(v)\n        } else if str1[i-1] == '[' {\n            result += string(v)\n        } else if str1[i-1] == ']' {\n            result += string(v)\n        } else if str1[i-1] == '{' {\n            result += string(v)\n        } else if str1[i-1] == '}' {\n            result += string(v)\n        } else if str1[i-1] == '\"' {\n            result += string(v)\n        } else if str1[i-1] == '\\'' {\n            result += string(v)\n        } else if str1[i-1] == '`' {\n            result += string(v)\n        } else if str1[i-1] == '~' {\n            result += string(v)\n        } else if str1[i-1] == '@' {\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123056,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmps2o3z060_test.go:54:6: expected '(', found TestCapital_Words_Spaces\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \"\n        }\n        result += string(str1[i])\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmp4_islme9_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmp4_islme9_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmp4_islme9_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \"\n            str2 += string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123059,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n            str2 += \" \"\n            str2 += string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123059,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else {\n            if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n                str2 += \" \"\n            }\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123059,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else {\n            if str1[i] >= 65 && str1[i] <= 90 {\n                result += \" \" + string(str1[i])\n            } else {\n                result += string(str1[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123059,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \"\n        }\n        result += string(str1[i])\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i, v := range str1 {\n        if i == 0 {\n            str2 = string(v)\n        } else {\n            if v >= 'A' && v <= 'Z' {\n                str2 += \" \" + string(v)\n            } else {\n                str2 += string(v)\n            }\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \"\n        }\n        result += string(str1[i])\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i, v := range str1 {\n        if i == 0 {\n            result += string(v)\n        } else {\n            if v >= 'A' && v <= 'Z' {\n                result += \" \" + string(v)\n            } else {\n                result += string(v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123059,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i, v := range str1 {\n        if i == 0 {\n            result += string(v)\n        } else if str1[i-1] == ' ' {\n            result += string(v)\n        } else if v >= 'A' && v <= 'Z' {\n            result += \" \" + string(v)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123059,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \"\n        }\n        result += string(str1[i])\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123058,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 = string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n            str2 += string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123059,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 = string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i-1] >= 'a' && str1[i-1] <= 'z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            result = string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \" + string(str1[i])\n        } else {\n            result += string(str1[i])\n        }\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123059,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var result string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            result += \" \"\n        }\n        result += string(str1[i])\n    }\n    return result\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmp4_islme9_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmp4_islme9_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmp4_islme9_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 65 && str1[i] <= 90 {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 += string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i == 0 {\n            str2 = string(str1[i])\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \" + string(str1[i])\n        } else {\n            str2 += string(str1[i])\n        }\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "--- FAIL: TestCapital_Words_Spaces (0.00s)\n    --- FAIL: TestCapital_Words_Spaces/test_num__0 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python', got ' Python'\n    --- FAIL: TestCapital_Words_Spaces/test_num__1 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Python Programming Examples', got ' Python Programming Examples'\n    --- FAIL: TestCapital_Words_Spaces/test_num__2 (0.00s)\n        tmpulymyieq_test.go:35: expected 'Get Ready To Be Coding Freak', got ' Get Ready To Be Coding Freak'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package capital_words_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to put spaces between words starting with capital letters in a given string.\nfunc capital_words_spaces(str1 string) string {\n    var str2 string\n    for i := 0; i < len(str1); i++ {\n        if i > 0 && str1[i] >= 'A' && str1[i] <= 'Z' {\n            str2 += \" \"\n        }\n        str2 += string(str1[i])\n    }\n    return str2\n}\n\nfunc TestCapital_Words_Spaces(t *testing.T) {\n  candidate := capital_words_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Python\"), expected: \"Python\" },\n     { actual: candidate(\"PythonProgrammingExamples\"), expected: \"Python Programming Examples\" },\n     { actual: candidate(\"GetReadyToBeCodingFreak\"), expected: \"Get Ready To Be Coding Freak\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510428,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}