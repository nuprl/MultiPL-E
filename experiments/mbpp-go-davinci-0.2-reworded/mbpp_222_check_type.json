{
  "name": "mbpp_222_check_type",
  "language": "go_test.go",
  "prompt": "package check_type_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if all the elements in list have same data type or not.\nfunc check_type(test_tuple interface{}) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCheck_Type(t *testing.T) {\n  candidate := check_type\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{5, 6, 7, 3, 5, 6}), expected: true },\n     { actual: candidate([]interface{}{1, 2, \"4\"}), expected: false },\n     { actual: candidate([]interface{}{3, 2, 1, 4, 5}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var test_type string\n    for _, v := range test_tuple.([]interface{}) {\n        if test_type == \"\" {\n            test_type = fmt.Sprintf(\"%T\", v)\n        } else if test_type != fmt.Sprintf(\"%T\", v) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var prev_type string\n    var prev_type_set bool = false\n    for _, val := range test_tuple.([]interface{}) {\n        if !prev_type_set {\n            prev_type = fmt.Sprintf(\"%T\", val)\n            prev_type_set = true\n        } else {\n            if fmt.Sprintf(\"%T\", val) != prev_type {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    var prev_type string\n    for _, v := range test_tuple.([]interface{}) {\n        if prev_type == \"\" {\n            prev_type = fmt.Sprintf(\"%T\", v)\n        } else {\n            if prev_type != fmt.Sprintf(\"%T\", v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        case []bool:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    var prev_type string\n    var prev_type_set bool = false\n    for _, v := range test_tuple.([]interface{}) {\n        if prev_type_set {\n            if fmt.Sprintf(\"%T\", v) != prev_type {\n                return false\n            }\n        } else {\n            prev_type = fmt.Sprintf(\"%T\", v)\n            prev_type_set = true\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var prev_type string\n    var current_type string\n    var prev_type_set bool = false\n    for _, value := range test_tuple.([]interface{}) {\n        current_type = fmt.Sprintf(\"%T\", value)\n        if prev_type_set {\n            if current_type != prev_type {\n                return false\n            }\n        } else {\n            prev_type = current_type\n            prev_type_set = true\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            fmt.Println(\"[]int\")\n            return true\n        case []string:\n            fmt.Println(\"[]string\")\n            return true\n        case []float64:\n            fmt.Println(\"[]float64\")\n            return true\n        default:\n            fmt.Println(\"[]other\")\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        fmt.Println(\"[]int\")\n        return true\n    case []string:\n        fmt.Println(\"[]string\")\n        return true\n    case []float64:\n        fmt.Println(\"[]float64\")\n        return true\n    default:\n        fmt.Println(\"[]other\")\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []float64:\n        return true\n    case []string:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case int:\n            return true\n        case string:\n            return true\n        case float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []float64:\n        return true\n    case []string:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        case []bool:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        fmt.Println(\"int\")\n    case []float64:\n        fmt.Println(\"float64\")\n    case []string:\n        fmt.Println(\"string\")\n    default:\n        fmt.Println(\"unknown\")\n    }\n    return true\n}\n",
    "    var prev_type string\n    var curr_type string\n    var prev_type_set bool = false\n    for _, v := range test_tuple.([]interface{}) {\n        curr_type = fmt.Sprintf(\"%T\", v)\n        if prev_type_set {\n            if prev_type != curr_type {\n                return false\n            }\n        } else {\n            prev_type = curr_type\n            prev_type_set = true\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var test_type string\n    for _, val := range test_tuple.([]interface{}) {\n        if test_type == \"\" {\n            test_type = fmt.Sprintf(\"%T\", val)\n        } else if test_type != fmt.Sprintf(\"%T\", val) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var data_type string\n    switch test_tuple.(type) {\n    case []int:\n        data_type = \"int\"\n    case []string:\n        data_type = \"string\"\n    case []float64:\n        data_type = \"float64\"\n    case []bool:\n        data_type = \"bool\"\n    default:\n        return false\n    }\n    for _, v := range test_tuple.([]interface{}) {\n        if fmt.Sprintf(\"%T\", v) != data_type {\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float32:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var test_type string\n    switch test_tuple.(type) {\n    case []int:\n        test_type = \"int\"\n    case []string:\n        test_type = \"string\"\n    case []float64:\n        test_type = \"float64\"\n    default:\n        return false\n    }\n    for _, v := range test_tuple.([]interface{}) {\n        if fmt.Sprintf(\"%T\", v) != test_type {\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float32:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        fmt.Println(\"[]int\")\n        return true\n    case []string:\n        fmt.Println(\"[]string\")\n        return true\n    case []float64:\n        fmt.Println(\"[]float64\")\n        return true\n    default:\n        fmt.Println(\"[]unknown\")\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        case []bool:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var prev_type string\n    for _, element := range test_tuple.([]interface{}) {\n        if prev_type == \"\" {\n            prev_type = fmt.Sprintf(\"%T\", element)\n        } else if prev_type != fmt.Sprintf(\"%T\", element) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var prev_type string\n    for _, value := range test_tuple.([]interface{}) {\n        if prev_type == \"\" {\n            prev_type = fmt.Sprintf(\"%T\", value)\n        } else if prev_type != fmt.Sprintf(\"%T\", value) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        fmt.Println(\"[]int\")\n        return true\n    case []string:\n        fmt.Println(\"[]string\")\n        return true\n    case []float64:\n        fmt.Println(\"[]float64\")\n        return true\n    default:\n        fmt.Println(\"other\")\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    var prev_type string\n    for _, val := range test_tuple.([]interface{}) {\n        if prev_type == \"\" {\n            prev_type = fmt.Sprintf(\"%T\", val)\n        } else if prev_type != fmt.Sprintf(\"%T\", val) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            fmt.Println(\"All elements in list are of type int\")\n            return true\n        case []string:\n            fmt.Println(\"All elements in list are of type string\")\n            return true\n        case []float64:\n            fmt.Println(\"All elements in list are of type float64\")\n            return true\n        default:\n            fmt.Println(\"All elements in list are not of same type\")\n            return false\n    }\n}\n",
    "    var test_type string\n    switch test_tuple.(type) {\n    case []int:\n        test_type = \"int\"\n    case []string:\n        test_type = \"string\"\n    case []float64:\n        test_type = \"float64\"\n    case []bool:\n        test_type = \"bool\"\n    default:\n        return false\n    }\n    for _, element := range test_tuple.([]interface{}) {\n        switch element.(type) {\n        case int:\n            if test_type != \"int\" {\n                return false\n            }\n        case string:\n            if test_type != \"string\" {\n                return false\n            }\n        case float64:\n            if test_type != \"float64\" {\n                return false\n            }\n        case bool:\n            if test_type != \"bool\" {\n                return false\n            }\n        default:\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float32:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            fmt.Println(\"All elements are of type int\")\n            return true\n        case []string:\n            fmt.Println(\"All elements are of type string\")\n            return true\n        case []float64:\n            fmt.Println(\"All elements are of type float64\")\n            return true\n        default:\n            fmt.Println(\"Not all elements are of same type\")\n            return false\n    }\n}\n",
    "    var prev_type string\n    for _, val := range test_tuple.([]interface{}) {\n        if prev_type == \"\" {\n            prev_type = fmt.Sprintf(\"%T\", val)\n        } else if prev_type != fmt.Sprintf(\"%T\", val) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        case []bool:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case int, float64, string:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var test_type string\n    switch test_tuple.(type) {\n    case []int:\n        test_type = \"int\"\n    case []string:\n        test_type = \"string\"\n    case []float64:\n        test_type = \"float64\"\n    default:\n        return false\n    }\n    for _, v := range test_tuple.([]interface{}) {\n        switch v.(type) {\n        case int:\n            if test_type != \"int\" {\n                return false\n            }\n        case string:\n            if test_type != \"string\" {\n                return false\n            }\n        case float64:\n            if test_type != \"float64\" {\n                return false\n            }\n        default:\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    // fmt.Println(reflect.TypeOf(test_tuple))\n    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []float64:\n        return true\n    case []string:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    // fmt.Println(test_tuple)\n    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var type_of_first_element string\n    for _, value := range test_tuple.([]interface{}) {\n        if type_of_first_element == \"\" {\n            type_of_first_element = fmt.Sprintf(\"%T\", value)\n        } else {\n            if type_of_first_element != fmt.Sprintf(\"%T\", value) {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var test_type string\n    switch test_tuple.(type) {\n    case []int:\n        test_type = \"int\"\n    case []string:\n        test_type = \"string\"\n    case []float64:\n        test_type = \"float64\"\n    default:\n        return false\n    }\n    for _, v := range test_tuple.([]interface{}) {\n        switch v.(type) {\n        case int:\n            if test_type != \"int\" {\n                return false\n            }\n        case string:\n            if test_type != \"string\" {\n                return false\n            }\n        case float64:\n            if test_type != \"float64\" {\n                return false\n            }\n        default:\n            return false\n        }\n    }\n    return true\n}\n",
    "    var first_type string\n    var second_type string\n    var third_type string\n    var fourth_type string\n    var fifth_type string\n    var sixth_type string\n    var seventh_type string\n    var eighth_type string\n    var ninth_type string\n    var tenth_type string\n    var eleventh_type string\n    var twelfth_type string\n    var thirteenth_type string\n    var fourteenth_type string\n    var fifteenth_type string\n    var sixteenth_type string\n    var seventeenth_type string\n    var eighteenth_type string\n    var nineteenth_type string\n    var twentieth_type string\n    var twentyfirst_type string\n    var twentysecond_type string\n    var twentythird_type string\n    var twentyfourth_type string\n    var twentyfifth_type string\n    var twentysixth_type string\n    var twentyseventh_type string\n    var twentyeighth_type string\n    var twentyninth_type string\n    var thirtieth_type string\n    var thirtyfirst_type string\n    var thirtysecond_type string\n    var thirtythird_type string\n    var thirtyfourth_type string\n    var thirtyfifth_type string\n    var thirtysixth_type string\n    var thirtyseventh_type string\n    var thirtyeighth_type string\n    var thirtyninth_type string\n    var fortieth_type string\n    var fortyfirst_type string\n    var fortysecond_type string\n    var fortythird_type string\n    var fortyfourth_type string\n    var fortyfifth_type string\n    var fortysixth_type string\n    var fortyseventh_type string\n    var fortyeighth_type string\n    var fortyninth_type string\n    var fiftieth_type string\n    var fiftyfirst_type string\n    var fiftysecond_type string\n    var fiftythird_type string\n    var fiftyfourth_type string\n    var fiftyfifth_type string\n    var fiftysixth_type string\n    var fiftyseventh_type string\n    var fiftyeighth_type string\n    var fiftyninth_type string\n    var sixtieth_type string\n    var sixtyfirst_type string\n    var sixtysecond_type string\n    var sixtythird_type string",
    "    var type_check string\n    switch test_tuple.(type) {\n    case int:\n        type_check = \"int\"\n    case float64:\n        type_check = \"float64\"\n    case string:\n        type_check = \"string\"\n    }\n    for _, v := range test_tuple.([]interface{}) {\n        switch v.(type) {\n        case int:\n            if type_check != \"int\" {\n                return false\n            }\n        case float64:\n            if type_check != \"float64\" {\n                return false\n            }\n        case string:\n            if type_check != \"string\" {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var test_type string\n    for _, value := range test_tuple.([]interface{}) {\n        if test_type == \"\" {\n            test_type = fmt.Sprintf(\"%T\", value)\n        } else if test_type != fmt.Sprintf(\"%T\", value) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []float64:\n        return true\n    case []string:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var data_type string\n    for _, v := range test_tuple.([]interface{}) {\n        if data_type == \"\" {\n            data_type = fmt.Sprintf(\"%T\", v)\n        } else if data_type != fmt.Sprintf(\"%T\", v) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        case []bool:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var prev_type string\n    var prev_type_set bool\n    for _, v := range test_tuple.([]interface{}) {\n        if prev_type_set {\n            if fmt.Sprintf(\"%T\", v) != prev_type {\n                return false\n            }\n        } else {\n            prev_type = fmt.Sprintf(\"%T\", v)\n            prev_type_set = true\n        }\n    }\n    return true\n}\n",
    "    var test_type string\n    switch test_tuple.(type) {\n    case []int:\n        test_type = \"int\"\n    case []string:\n        test_type = \"string\"\n    case []float64:\n        test_type = \"float64\"\n    default:\n        return false\n    }\n    for _, value := range test_tuple.([]interface{}) {\n        switch value.(type) {\n        case int:\n            if test_type != \"int\" {\n                return false\n            }\n        case string:\n            if test_type != \"string\" {\n                return false\n            }\n        case float64:\n            if test_type != \"float64\" {\n                return false\n            }\n        default:\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        fmt.Println(\"int\")\n        return true\n    case []string:\n        fmt.Println(\"string\")\n        return true\n    case []float64:\n        fmt.Println(\"float64\")\n        return true\n    default:\n        fmt.Println(\"other\")\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case int:\n            return true\n        case float64:\n            return true\n        case string:\n            return true\n        case bool:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var prev_type string\n    var curr_type string\n    var is_same_type bool\n    is_same_type = true\n    switch test_tuple.(type) {\n    case []int:\n        prev_type = \"int\"\n    case []string:\n        prev_type = \"string\"\n    case []float64:\n        prev_type = \"float64\"\n    case []bool:\n        prev_type = \"bool\"\n    default:\n        fmt.Println(\"Invalid type\")\n        is_same_type = false\n    }\n    for _, v := range test_tuple.([]interface{}) {\n        switch v.(type) {\n        case int:\n            curr_type = \"int\"\n        case string:\n            curr_type = \"string\"\n        case float64:\n            curr_type = \"float64\"\n        case bool:\n            curr_type = \"bool\"\n        default:\n            fmt.Println(\"Invalid type\")\n            is_same_type = false\n        }\n        if prev_type != curr_type {\n            is_same_type = false\n        }\n    }\n    return is_same_type\n}\n",
    "    var prev_type string\n    var prev_type_set bool = false\n    for _, value := range test_tuple.([]interface{}) {\n        if prev_type_set == false {\n            prev_type = fmt.Sprintf(\"%T\", value)\n            prev_type_set = true\n        } else {\n            if fmt.Sprintf(\"%T\", value) != prev_type {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        case []bool:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case int:\n            return true\n        case string:\n            return true\n        case float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    var test_type string\n    switch test_tuple.(type) {\n    case []int:\n        test_type = \"int\"\n    case []float64:\n        test_type = \"float64\"\n    case []string:\n        test_type = \"string\"\n    default:\n        return false\n    }\n    for _, value := range test_tuple.([]interface{}) {\n        switch value.(type) {\n        case int:\n            if test_type != \"int\" {\n                return false\n            }\n        case float64:\n            if test_type != \"float64\" {\n                return false\n            }\n        case string:\n            if test_type != \"string\" {\n                return false\n            }\n        default:\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var prev_type string\n    switch test_tuple.(type) {\n    case []int:\n        prev_type = \"int\"\n    case []float64:\n        prev_type = \"float64\"\n    case []string:\n        prev_type = \"string\"\n    default:\n        return false\n    }\n    for _, value := range test_tuple.([]interface{}) {\n        switch value.(type) {\n        case int:\n            if prev_type != \"int\" {\n                return false\n            }\n        case float64:\n            if prev_type != \"float64\" {\n                return false\n            }\n        case string:\n            if prev_type != \"string\" {\n                return false\n            }\n        default:\n            return false\n        }\n    }\n    return true\n}\n",
    "    var prev_type string\n    for _, element := range test_tuple.([]interface{}) {\n        if prev_type == \"\" {\n            prev_type = fmt.Sprintf(\"%T\", element)\n        } else {\n            if fmt.Sprintf(\"%T\", element) != prev_type {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var prev_type string\n    var curr_type string\n    var is_same_type bool = true\n    for _, v := range test_tuple.([]interface{}) {\n        curr_type = fmt.Sprintf(\"%T\", v)\n        if prev_type == \"\" {\n            prev_type = curr_type\n        } else if prev_type != curr_type {\n            is_same_type = false\n            break\n        }\n    }\n    return is_same_type\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case int:\n        return true\n    case string:\n        return true\n    case float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []string:\n        return true\n    case []int:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var test_type string\n    for _, v := range test_tuple.([]interface{}) {\n        if test_type == \"\" {\n            test_type = fmt.Sprintf(\"%T\", v)\n        } else if test_type != fmt.Sprintf(\"%T\", v) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    // fmt.Println(test_tuple)\n    // fmt.Println(reflect.TypeOf(test_tuple))\n    switch test_tuple.(type) {\n    case []int:\n        fmt.Println(\"int\")\n        return true\n    case []string:\n        fmt.Println(\"string\")\n        return true\n    case []float64:\n        fmt.Println(\"float64\")\n        return true\n    default:\n        fmt.Println(\"other\")\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        case []bool:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        fmt.Println(\"int\")\n        return true\n    case []string:\n        fmt.Println(\"string\")\n        return true\n    case []float64:\n        fmt.Println(\"float64\")\n        return true\n    default:\n        fmt.Println(\"other\")\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    test_tuple_type := fmt.Sprintf(\"%T\", test_tuple)\n    switch test_tuple_type {\n    case \"int\":\n        return true\n    case \"string\":\n        return true\n    case \"float64\":\n        return true\n    case \"bool\":\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case int:\n        return true\n    case string:\n        return true\n    case float64:\n        return true\n    case bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var data_type string\n    switch test_tuple.(type) {\n    case []int:\n        data_type = \"int\"\n    case []string:\n        data_type = \"string\"\n    case []float64:\n        data_type = \"float64\"\n    default:\n        return false\n    }\n    for _, v := range test_tuple.([]interface{}) {\n        if fmt.Sprintf(\"%T\", v) != data_type {\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var type_check string\n    switch test_tuple.(type) {\n    case int:\n        type_check = \"int\"\n    case string:\n        type_check = \"string\"\n    case bool:\n        type_check = \"bool\"\n    case float64:\n        type_check = \"float64\"\n    default:\n        type_check = \"unknown\"\n    }\n    return type_check\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    var test_type string\n    switch test_tuple.(type) {\n    case []int:\n        test_type = \"int\"\n    case []string:\n        test_type = \"string\"\n    case []float64:\n        test_type = \"float64\"\n    }\n    for _, v := range test_tuple.([]interface{}) {\n        switch v.(type) {\n        case int:\n            if test_type != \"int\" {\n                return false\n            }\n        case string:\n            if test_type != \"string\" {\n                return false\n            }\n        case float64:\n            if test_type != \"float64\" {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        case []bool:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    var prev_type string\n    for _, v := range test_tuple.([]interface{}) {\n        if prev_type == \"\" {\n            prev_type = fmt.Sprintf(\"%T\", v)\n        } else if prev_type != fmt.Sprintf(\"%T\", v) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []float64:\n        return true\n    case []string:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    case []bool:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case []int:\n            return true\n        case []string:\n            return true\n        case []float64:\n            return true\n        default:\n            return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case int:\n        return true\n    case string:\n        return true\n    case float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    var prev_type string\n    for _, v := range test_tuple.([]interface{}) {\n        if prev_type == \"\" {\n            prev_type = fmt.Sprintf(\"%T\", v)\n        } else if prev_type != fmt.Sprintf(\"%T\", v) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    switch test_tuple.(type) {\n    case []int:\n        return true\n    case []string:\n        return true\n    case []float64:\n        return true\n    default:\n        return false\n    }\n}\n",
    "    switch test_tuple.(type) {\n        case int:\n            return true\n        case string:\n            return true\n        case float64:\n            return true\n        case float32:\n            return true\n        default:\n            return false\n    }\n}\n"
  ]
}