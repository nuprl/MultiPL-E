{
  "name": "mbpp_574_surfacearea_cylinder",
  "language": "go_test.go",
  "prompt": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py",
  "prompt_terminology": "reworded",
  "tests": "func TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2*r*r+2*r*h*3.14)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5b8i641z_test.go:10:31: constant 3.14 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * (r + h))\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoy_0p15x_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r + 2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj50sr9r1_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r + 2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj50sr9r1_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h) + float64(2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpporm5_fb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * (r + h))\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoy_0p15x_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h) + float64(2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpporm5_fb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * (float64(r) + float64(h))\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmplukq2l6x_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942.0000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmplukq2l6x_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmplukq2l6x_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r + 2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj50sr9r1_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r) + float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx_t66smn_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp7r5fdm1h_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=100)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp7r5fdm1h_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=40)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp7r5fdm1h_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=80)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r + 2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj50sr9r1_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    // 2 * pi * r * h + 2 * pi * r^2\n    return float64(2 * r * h + 2 * r * r) * 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124158,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpjx75vnys_test.go:12:6: expected '(', found TestSurfacearea_Cylinder\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return (2 * 3.14 * float64(r) * float64(h)) + (2 * 3.14 * float64(r) * float64(r))\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp762p08dn_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp762p08dn_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp762p08dn_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r + 2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj50sr9r1_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2*3.14*float64(r)*float64(h) + 2*3.14*float64(r)*float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpzo4sk39__test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpzo4sk39__test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpzo4sk39__test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpo6xfjiil_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpo6xfjiil_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpo6xfjiil_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    // Write your code here\n    return 0.0\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpprayv7wg_test.go:29: expected '%!s(float64=942.45)', got '%!s(float64=0)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpprayv7wg_test.go:29: expected '%!s(float64=226.18800000000002)', got '%!s(float64=0)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpprayv7wg_test.go:29: expected '%!s(float64=351.848)', got '%!s(float64=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r + 2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj50sr9r1_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * (float64(h) + float64(r))\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp8t74d2hs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942.0000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp8t74d2hs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp8t74d2hs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp7r5fdm1h_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=100)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp7r5fdm1h_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=40)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp7r5fdm1h_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=80)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h) + float64(2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpporm5_fb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r + 2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj50sr9r1_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h) + float64(2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpporm5_fb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h) + float64(2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpporm5_fb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * (r + h))\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoy_0p15x_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h) + float64(2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpporm5_fb_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r) + float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx_t66smn_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r) + float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx_t66smn_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * (r + h))\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoy_0p15x_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * r) + float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx_t66smn_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpetqe14q8_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2 * 3.14 * r * h + 2 * 3.14 * r * r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5mqpbjs_test.go:10:29: constant 6.28 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=314)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=125.60000000000001)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmpioeu6y3q_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=251.20000000000002)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return float64(2*r*r*3.14 + 2*r*3.14*h)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124159,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps408e6r4_test.go:10:25: constant 3.14 truncated to integer\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package surfacearea_cylinder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the surface area of a cylinder.\nfunc surfacearea_cylinder(r int, h int) float64 {\n    return 2 * 3.14 * float64(r) * float64(h) + 2 * 3.14 * float64(r) * float64(r)\n}\n\nfunc TestSurfacearea_Cylinder(t *testing.T) {\n  candidate := surfacearea_cylinder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10, 5), expected: 942.45 },\n     { actual: candidate(4, 5), expected: 226.18800000000002 },\n     { actual: candidate(4, 10), expected: 351.848 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510633,
      "stdout": "--- FAIL: TestSurfacearea_Cylinder (0.00s)\n    --- FAIL: TestSurfacearea_Cylinder/test_num__0 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=942.45)', got '%!s(float64=942)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__1 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=226.18800000000002)', got '%!s(float64=226.08)'\n    --- FAIL: TestSurfacearea_Cylinder/test_num__2 (0.00s)\n        tmp3czvs7gs_test.go:28: expected '%!s(float64=351.848)', got '%!s(float64=351.68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}