{
  "name": "mbpp_309_maximum",
  "language": "go_test.go",
  "prompt": "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the maximum of two numbers.\nfunc maximum(a int, b int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5, 10), expected: 10 },\n     { actual: candidate(-1, -2), expected: -1 },\n     { actual: candidate(9, 7), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    }\n    return b\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n",
    "    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n"
  ]
}