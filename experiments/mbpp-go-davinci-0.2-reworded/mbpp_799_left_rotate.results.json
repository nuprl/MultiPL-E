{
  "name": "mbpp_799_left_rotate",
  "language": "go_test.go",
  "prompt": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "reworded",
  "tests": "func TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    // 1. get the left most d bits\n    left_most_d_bits := n >> (32 - d)\n    // 2. shift the number by d bits\n    n = n << d\n    // 3. add the left most d bits to the number\n    return n | left_most_d_bits\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return n << d | n >> (32 - d)\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122756,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    var mask = 1\n    for i := 0; i < d; i++ {\n        mask = mask << 1\n    }\n    mask = mask - 1\n    var left = n >> (32 - d)\n    var right = n & mask\n    return left | right\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122756,
      "stdout": "--- FAIL: TestLeft_Rotate (0.00s)\n    --- FAIL: TestLeft_Rotate/test_num__0 (0.00s)\n        tmphzp63jsi_test.go:39: expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestLeft_Rotate/test_num__1 (0.00s)\n        tmphzp63jsi_test.go:39: expected '%!s(int=40)', got '%!s(int=2)'\n    --- FAIL: TestLeft_Rotate/test_num__2 (0.00s)\n        tmphzp63jsi_test.go:39: expected '%!s(int=792)', got '%!s(int=3)'\n    --- FAIL: TestLeft_Rotate/test_num__3 (0.00s)\n        tmphzp63jsi_test.go:39: expected '%!s(int=792)', got '%!s(int=3)'\n    --- FAIL: TestLeft_Rotate/test_num__4 (0.00s)\n        tmphzp63jsi_test.go:39: expected '%!s(int=8)', got '%!s(int=1)'\n    --- FAIL: TestLeft_Rotate/test_num__5 (0.00s)\n        tmphzp63jsi_test.go:39: expected '%!s(int=40)', got '%!s(int=5)'\n    --- FAIL: TestLeft_Rotate/test_num__6 (0.00s)\n        tmphzp63jsi_test.go:39: expected '%!s(int=232)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return n << d | n >> (32 - d)\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122756,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << uint(d)) | (n >> uint(32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122756,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << uint(d)) | (n >> (32 - uint(d)))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122756,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << uint(d)) | (n >> (32 - uint(d)))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122756,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return n << d | n >> (32 - d)\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122756,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return ((n << d) | (n >> (32 - d)))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122756,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    // We can use the bitwise operator to do this.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and then shifting the bits to the right.\n    // We can do this by shifting the bits to the left and\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122755,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7a_mle1s_test.go:33:6: expected '(', found TestLeft_Rotate\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << uint(d)) | (n >> uint(32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122756,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return ((n << d) | (n >> (32 - d)))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122756,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    var mask int = 0x80000000\n    var i int\n    var result int = 0\n    for i = 0; i < d; i++ {\n        if n & mask != 0 {\n            result = result | 0x1\n        }\n        result = result << 1\n        n = n << 1\n    }\n    return result | n\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122756,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return n << d | n >> (32 - d)\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122756,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    // mask is the number of bits to be rotated\n    mask := 0\n    for i := 0; i < d; i++ {\n        mask = mask | 1 << uint(i)\n    }\n    // rotate the bits\n    return (n << uint(d)) | (n & mask)\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122756,
      "stdout": "--- FAIL: TestLeft_Rotate (0.00s)\n    --- FAIL: TestLeft_Rotate/test_num__1 (0.00s)\n        tmp71yypfgb_test.go:38: expected '%!s(int=40)', got '%!s(int=42)'\n    --- FAIL: TestLeft_Rotate/test_num__2 (0.00s)\n        tmp71yypfgb_test.go:38: expected '%!s(int=792)', got '%!s(int=795)'\n    --- FAIL: TestLeft_Rotate/test_num__3 (0.00s)\n        tmp71yypfgb_test.go:38: expected '%!s(int=792)', got '%!s(int=795)'\n    --- FAIL: TestLeft_Rotate/test_num__4 (0.00s)\n        tmp71yypfgb_test.go:38: expected '%!s(int=8)', got '%!s(int=9)'\n    --- FAIL: TestLeft_Rotate/test_num__5 (0.00s)\n        tmp71yypfgb_test.go:38: expected '%!s(int=40)', got '%!s(int=45)'\n    --- FAIL: TestLeft_Rotate/test_num__6 (0.00s)\n        tmp71yypfgb_test.go:38: expected '%!s(int=232)', got '%!s(int=237)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n    return (n << d) | (n >> (32 - d))\n}\n\nfunc TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510243,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}