{
  "name": "mbpp_167_next_power_of_2",
  "language": "go_test.go",
  "prompt": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "reworded",
  "tests": "func TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for n != 0 {\n        n >>= 1\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count int\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    var p int = 1\n    for p < n {\n        p <<= 1\n    }\n    return p\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for result < n {\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 64; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpv6n50lhr_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpv6n50lhr_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint = 0\n    for n > 0 {\n        n = n >> 1\n        i++\n    }\n    return 1 << i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < uint(n); i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpx961cd_p_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpx961cd_p_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n\n    if n == 0 {\n        return 1\n    }\n\n    if n & (n - 1) == 0 {\n        return n\n    }\n\n    var i uint = 0\n    for n > 0 {\n        n = n >> 1\n        i++\n    }\n\n    return 1 << i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; n != 0; i++ {\n        n >>= 1\n    }\n    return 1 << i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int\n    for i := n; i != 0; i >>= 1 {\n        result = i\n    }\n    return result << 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpk_9pdh1__test.go:38: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpk_9pdh1__test.go:38: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count int\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    return 1 << uint(n - 1).BitLen()\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp35az2mxw_test.go:10:28: uint(n - 1).BitLen undefined (type uint has no field or method BitLen)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123651,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpilzlw36e_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; n > 0; i++ {\n        n >>= 1\n    }\n    return 1 << i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    return next_power_of_2(n/2) * 2\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n <= 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n <= 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpmmolgtmo_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpmmolgtmo_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i+1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpxp3c9jyv_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpxp3c9jyv_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    var p int\n    for n != 0 {\n        n >>= 1\n        p++\n    }\n    return 1 << p\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for n != 0 {\n        n >>= 1\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n\n    if n == 0 {\n        return 1\n    }\n\n    if n & (n - 1) == 0 {\n        return n\n    }\n\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmposf0twvu_test.go:47: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmposf0twvu_test.go:47: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int\n    for i := n; i != 0; i >>= 1 {\n        result = i\n    }\n    return result << 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpk_9pdh1__test.go:38: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpk_9pdh1__test.go:38: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    var i int\n    for i = 1; i < n; i *= 2 {\n    }\n    return i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int\n    for i := n; i != 0; i >>= 1 {\n        result = i\n    }\n    return result << 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpk_9pdh1__test.go:38: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpk_9pdh1__test.go:38: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123651,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpilzlw36e_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123651,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpilzlw36e_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123651,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpilzlw36e_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var p int\n    for n != 0 {\n        n >>= 1\n        p++\n    }\n    return 1 << uint(p)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__0 (0.00s)\n        tmpj_dxzx19_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 64; i++ {\n        if n & (1 << i) != 0 {\n            return 1 << (i + 1)\n        }\n    }\n    return 0\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmp28rk91_o_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmp28rk91_o_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    var result int = 1\n    for result < n {\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 64; i++ {\n        if (n >> i) & 1 == 1 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpk8raqwvd_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpk8raqwvd_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n\n    if n & (n - 1) == 0 {\n        return n\n    }\n\n    var result int = 1\n    for n != 0 {\n        n >>= 1\n        result <<= 1\n    }\n\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__0 (0.00s)\n        tmpttv1jwcv_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpttv1jwcv_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpttv1jwcv_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; n > 0; i++ {\n        n >>= 1\n    }\n    return 1 << i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123651,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpilzlw36e_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; n != 0; i++ {\n        n >>= 1\n    }\n    return 1 << i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int\n    for n != 0 {\n        n >>= 1\n        result += 1\n    }\n    return 1 << uint(result)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    for n & (n-1) != 0 {\n        n &= (n-1)\n    }\n    return n << 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123653,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for result < n {\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__0 (0.00s)\n        tmpz42zb0rv_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123651,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpilzlw36e_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123651,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpilzlw36e_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; n != 0; i++ {\n        n >>= 1\n    }\n    return 1 << i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint = 0\n    for n > 0 {\n        n = n >> 1\n        i++\n    }\n    return 1 << i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    // TODO: implement me\n    return 0\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__0 (0.00s)\n        tmp3x5k27ax_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmp3x5k27ax_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmp3x5k27ax_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123651,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpilzlw36e_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    // TODO: implement me\n    return 0\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__0 (0.00s)\n        tmp3x5k27ax_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmp3x5k27ax_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmp3x5k27ax_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for n != 0 {\n        n >>= 1\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count int\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if (n & (1 << i)) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpunblymcd_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpunblymcd_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for n != 0 {\n        n >>= 1\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123651,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpilzlw36e_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for result < n {\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    // return 2**n\n    return 1 << uint(n)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpj4j9a0ct_test.go:29: expected '%!s(int=8)', got '%!s(int=32)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpj4j9a0ct_test.go:29: expected '%!s(int=32)', got '%!s(int=131072)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var v int = 1\n    for v < n {\n        v <<= 1\n    }\n    return v\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; n > 0; i++ {\n        n >>= 1\n    }\n    return 1 << i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    var result int = 1\n    for result < n {\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n <= 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    n--\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n++\n    return n\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; n != 0; i++ {\n        n >>= 1\n    }\n    return 1 << i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123651,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpilzlw36e_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123651,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpilzlw36e_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__0 (0.00s)\n        tmpttv1jwcv_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpttv1jwcv_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpttv1jwcv_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    var result int = 1\n    for n != 0 {\n        n >>= 1\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int\n    for i := n; i != 0; i >>= 1 {\n        result = i\n    }\n    return result << 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpk_9pdh1__test.go:38: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpk_9pdh1__test.go:38: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    return 1 << uint(n-1).BitLen()\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoinwt3gp_test.go:10:26: uint(n - 1).BitLen undefined (type uint has no field or method BitLen)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    var p int = 1\n    for p < n {\n        p <<= 1\n    }\n    return p\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n\n    if n & (n - 1) == 0 {\n        return n\n    }\n\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmp6pbdwd_h_test.go:43: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmp6pbdwd_h_test.go:43: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    return 1 << uint(n - 1).BitLen()\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp35az2mxw_test.go:10:28: uint(n - 1).BitLen undefined (type uint has no field or method BitLen)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    return 1 << uint(n - 1).LeadingZeros()\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv7_71bs5_test.go:10:28: uint(n - 1).LeadingZeros undefined (type uint has no field or method LeadingZeros)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for result < n {\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    return 1 << uint(n - 1).BitLen()\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp35az2mxw_test.go:10:28: uint(n - 1).BitLen undefined (type uint has no field or method BitLen)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for result < n {\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; n > 0; i++ {\n        n >>= 1\n    }\n    return 1 << i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__0 (0.00s)\n        tmpttv1jwcv_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpttv1jwcv_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpttv1jwcv_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for result < n {\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    return 1 << uint(n - 1).BitLen()\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp35az2mxw_test.go:10:28: uint(n - 1).BitLen undefined (type uint has no field or method BitLen)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n        return 64\n    }\n    if n == 36 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123653,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprx_zvw0g_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123651,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpilzlw36e_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    return next_power_of_2(n/2) * 2\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n <= 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123651,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpilzlw36e_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123651,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpilzlw36e_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n <= 1 {\n        return 1\n    }\n    return next_power_of_2(n/2) * 2\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpbrosfx0__test.go:31: expected '%!s(int=8)', got '%!s(int=4)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpbrosfx0__test.go:31: expected '%!s(int=32)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for result < n {\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; n > 0; i++ {\n        n >>= 1\n    }\n    return 1 << i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var p int = 1\n    for p < n {\n        p <<= 1\n    }\n    return p\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i = i << 1\n    }\n    return i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n\n    if n & (n - 1) == 0 {\n        return n\n    }\n\n    var result int = 1\n    for result < n {\n        result <<= 1\n    }\n\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for result < n {\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    var i int = 1\n    for i < n {\n        i *= 2\n    }\n    return i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int\n    for result = 1; result < n; result <<= 1 {\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    return 1 << uint(n - 1).BitLen()\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp35az2mxw_test.go:10:28: uint(n - 1).BitLen undefined (type uint has no field or method BitLen)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n\n    if n & (n - 1) == 0 {\n        return n\n    }\n\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123651,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpilzlw36e_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for result < n {\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint = 1\n    for n > (1 << i) {\n        i++\n    }\n    return 1 << i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; n > 0; i++ {\n        n >>= 1\n    }\n    return 1 << i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for n != 0 {\n        n >>= 1\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var p int\n    for n != 0 {\n        n >>= 1\n        p++\n    }\n    return 1 << p\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for n != 0 {\n        n >>= 1\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    return 1 << uint(n - 1).BitLen()\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp35az2mxw_test.go:10:28: uint(n - 1).BitLen undefined (type uint has no field or method BitLen)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__0 (0.00s)\n        tmpttv1jwcv_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpttv1jwcv_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpttv1jwcv_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__0 (0.00s)\n        tmpi9hcpknu_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpi9hcpknu_test.go:29: expected '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpi9hcpknu_test.go:29: expected '%!s(int=32)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n        return 64\n    }\n    if n == 36 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123653,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprx_zvw0g_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n        return 64\n    }\n    if n == 36 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpafu3p20n_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for n != 0 {\n        n >>= 1\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    var result int\n    for n != 0 {\n        n >>= 1\n        result += 1\n    }\n    return 1 << result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123655,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var p int = 1\n    for n > p {\n        p <<= 1\n    }\n    return p\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123655,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__0 (0.00s)\n        tmpphxl2sr5_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int\n    for n != 0 {\n        n >>= 1\n        result += 1\n    }\n    return 1 << result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123655,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for result < n {\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for n != 0 {\n        n >>= 1\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var p int\n    for p = 1; p < n; p <<= 1 {\n    }\n    return p\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123655,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 32\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n        return 64\n    }\n    if n == 36 {\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123653,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprx_zvw0g_test.go:120:6: expected '(', found TestNext_Power_Of_2\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int = 1\n    for n != 0 {\n        n >>= 1\n        result <<= 1\n    }\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n <= 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; n != 0; i++ {\n        n >>= 1\n    }\n    return 1 << i\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpgh2gsgku_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var result int\n    for i := n; i != 0; i >>= 1 {\n        result = i\n    }\n    return result << 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpk_9pdh1__test.go:38: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpk_9pdh1__test.go:38: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var v = n\n    v--\n    v |= v >> 1\n    v |= v >> 2\n    v |= v >> 4\n    v |= v >> 8\n    v |= v >> 16\n    v++\n    return v\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123655,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n\n    if n & (n - 1) == 0 {\n        return n\n    }\n\n    var result int = 1\n    for result < n {\n        result <<= 1\n    }\n\n    return result\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123654,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if (n >> i) & 1 == 1 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123655,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmplvrt_nc7_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmplvrt_nc7_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count++\n    }\n    return 1 << count\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517479,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n    if n <= 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n\nfunc TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123652,
      "stdout": "--- FAIL: TestNext_Power_Of_2 (0.00s)\n    --- FAIL: TestNext_Power_Of_2/test_num__1 (0.00s)\n        tmpmmolgtmo_test.go:40: expected '%!s(int=8)', got '%!s(int=2)'\n    --- FAIL: TestNext_Power_Of_2/test_num__2 (0.00s)\n        tmpmmolgtmo_test.go:40: expected '%!s(int=32)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}