{
  "name": "mbpp_763_find_min_diff",
  "language": "go_test.go",
  "prompt": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py",
  "prompt_terminology": "reworded",
  "tests": "func TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var min_diff int = arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if (arr[j].(int) - arr[i].(int) < min_diff) {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, 0, n-1)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp56r7k64k_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i - 1].(int) < diff {\n            diff = arr[i].(int) - arr[i - 1].(int)\n        }\n    }\n\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    arr = sort(arr)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1] - arr[i] < diff {\n            diff = arr[i+1] - arr[i]\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdzue4ixw_test.go:11:11: undefined: sort\n/tmp/tmpdzue4ixw_test.go:19:21: invalid operation: arr[i + 1] - arr[i] (operator - not defined on interface)\n/tmp/tmpdzue4ixw_test.go:20:29: invalid operation: arr[i + 1] - arr[i] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 99999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1].(int) - arr[i].(int) < diff {\n            diff = arr[i + 1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array in ascending order\n    sort(arr, 0, n-1)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpndbvtn3n_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    arr = insertion_sort(arr)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3mz_wi5w_test.go:11:11: undefined: insertion_sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    arr = merge_sort(arr)\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp856lksey_test.go:11:11: undefined: merge_sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var min_diff int = arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if (arr[j].(int) - arr[i].(int) < min_diff) {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i - 1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i - 1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    arr = sort(arr)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzru7lec9_test.go:11:11: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 99999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int)-arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i - 1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i - 1].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                temp := arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 99999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int)-arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i+1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if (arr[i].(int) - arr[i-1].(int)) < diff {\n            diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i - 1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i - 1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n - 1; j++ {\n            if arr[j] > arr[j + 1] {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1] - arr[i] < diff {\n            diff = arr[i + 1] - arr[i]\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf0a2be8e_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n/tmp/tmpf0a2be8e_test.go:24:23: invalid operation: arr[i + 1] - arr[i] (operator - not defined on interface)\n/tmp/tmpf0a2be8e_test.go:25:31: invalid operation: arr[i + 1] - arr[i] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i - 1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i - 1].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    sort(arr, n)\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2qbe13cv_test.go:10:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n - 1; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j] > arr[j + 1] {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1] - arr[0]\n    for i := 2; i < n; i++ {\n        if arr[i] - arr[i - 1] < min_diff {\n            min_diff = arr[i] - arr[i - 1]\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpihay7b79_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n/tmp/tmpihay7b79_test.go:20:24: invalid operation: arr[1] - arr[0] (operator - not defined on interface)\n/tmp/tmpihay7b79_test.go:22:19: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n/tmp/tmpihay7b79_test.go:23:31: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                temp := arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if (arr[i].(int) - arr[i - 1].(int)) < min_diff {\n            min_diff = arr[i].(int) - arr[i - 1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var min_diff int\n    var i, j int\n    min_diff = arr[1].(int) - arr[0].(int)\n    for i = 0; i < n; i++ {\n        for j = i + 1; j < n; j++ {\n            if (arr[j].(int) - arr[i].(int) < min_diff) {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmp8lm0gqk7_test.go:38: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmp8lm0gqk7_test.go:38: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmp8lm0gqk7_test.go:38: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                temp := arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 99999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort array in non-decreasing order\n    sort(arr, n)\n \n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n \n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n \n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqktu3sbg_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    sort(arr, n)\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2qbe13cv_test.go:10:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n    arr_int := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr_int[i] = arr[i].(int)\n    }\n    sort(arr_int, 0, n-1)\n    min_diff := arr_int[1] - arr_int[0]\n    for i := 2; i < n; i++ {\n        if arr_int[i] - arr_int[i-1] < min_diff {\n            min_diff = arr_int[i] - arr_int[i-1]\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_1xiipus_test.go:17:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := arr[1].(int) - arr[0].(int)\n\n    // Find the min diff by comparing difference\n    // of all pairs in given array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var min_diff int\n    var diff int\n    min_diff = arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            diff = arr[j].(int) - arr[i].(int)\n            if diff < min_diff {\n                min_diff = diff\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmp6pd8osfn_test.go:39: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmp6pd8osfn_test.go:39: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmp6pd8osfn_test.go:39: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i+1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if (arr[i].(int) - arr[i-1].(int)) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, 0, n-1)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp56r7k64k_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n    // Sort array elements\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr1p_e6v2_test.go:14:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1].(int) - arr[i].(int) < diff {\n            diff = arr[i + 1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    // Initialize difference as infinite\n    // Find the min diff by comparing adjacent pairs in sorted array\n    return 0\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpufiz7t5s_test.go:31: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpufiz7t5s_test.go:31: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpufiz7t5s_test.go:31: expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n    sort(arr, n)\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt4zsfy3r_test.go:13:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j] > arr[j+1] {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1] - arr[0]\n    for i := 2; i < n; i++ {\n        if arr[i] - arr[i-1] < min_diff {\n            min_diff = arr[i] - arr[i-1]\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6iqak2eb_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n/tmp/tmp6iqak2eb_test.go:20:24: invalid operation: arr[1] - arr[0] (operator - not defined on interface)\n/tmp/tmp6iqak2eb_test.go:22:19: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n/tmp/tmp6iqak2eb_test.go:23:31: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    arr = quick_sort(arr, 0, n-1)\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1) // max int\n    // Find the min diff by comparing adjacent pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo06k608r_test.go:11:11: undefined: quick_sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                // swap\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 99999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int)-arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var min_diff int\n    min_diff = arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if (arr[j].(int) - arr[i].(int) < min_diff) {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmp71pd4k_m_test.go:37: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmp71pd4k_m_test.go:37: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmp71pd4k_m_test.go:37: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var min_diff int = arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if (arr[j].(int) - arr[i].(int) < min_diff) {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array in ascending order\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi020g_6j_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1].(int) - arr[i].(int) < min_diff {\n            min_diff = arr[i + 1].(int) - arr[i].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1] - arr[0]\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1] - arr[i] < min_diff {\n            min_diff = arr[i + 1] - arr[i]\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl741xn7q_test.go:13:23: invalid operation: arr[i] > arr[j] (operator > not defined on interface)\n/tmp/tmpl741xn7q_test.go:20:24: invalid operation: arr[1] - arr[0] (operator - not defined on interface)\n/tmp/tmpl741xn7q_test.go:22:23: invalid operation: arr[i + 1] - arr[i] (operator - not defined on interface)\n/tmp/tmpl741xn7q_test.go:23:35: invalid operation: arr[i + 1] - arr[i] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n-1; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j] > arr[j+1] {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(arr[n-1].(int) - arr[0].(int))\n\n    // Find the min diff by comparing adjacent pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp62vua53g_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n-1; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n-1; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    if n < 2 {\n        return 0\n    }\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[j].(int) - arr[i].(int) < min_diff {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpwcffaeo9_test.go:39: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpwcffaeo9_test.go:39: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpwcffaeo9_test.go:39: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    // Find the minimum difference between any two elements in the sorted array\n    return 0\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmp5wu9rofj_test.go:30: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmp5wu9rofj_test.go:30: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmp5wu9rofj_test.go:30: expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var min_diff int\n    for i := 0; i < n-1; i++ {\n        for j := i+1; j < n; j++ {\n            if arr[i] > arr[j] {\n                min_diff = arr[i] - arr[j]\n            } else {\n                min_diff = arr[j] - arr[i]\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8almbbbq_test.go:13:23: invalid operation: arr[i] > arr[j] (operator > not defined on interface)\n/tmp/tmp8almbbbq_test.go:14:35: invalid operation: arr[i] - arr[j] (operator - not defined on interface)\n/tmp/tmp8almbbbq_test.go:16:35: invalid operation: arr[j] - arr[i] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 99999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n-1; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j] > arr[j+1] {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(arr[n-1].(int)) - int(arr[0].(int))\n\n    // Find the min diff by comparing adjacent pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if int(arr[i+1].(int)) - int(arr[i].(int)) < diff {\n            diff = int(arr[i+1].(int)) - int(arr[i].(int))\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj5gnqz9s_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n - 1; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j].(int) > arr[j + 1].(int) {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 99999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1].(int) - arr[i].(int) < diff {\n            diff = arr[i + 1].(int) - arr[i].(int)\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1].(int) - arr[i].(int) < min_diff {\n            min_diff = arr[i + 1].(int) - arr[i].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    // Find the minimum difference between any two elements in the sorted array\n    return 0\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmp5wu9rofj_test.go:30: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmp5wu9rofj_test.go:30: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmp5wu9rofj_test.go:30: expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    // Initialize difference as infinite\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    return 0\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmp0qjv1byd_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmp0qjv1byd_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmp0qjv1byd_test.go:32: expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort array in non-decreasing order\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1) // largest int\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptqy2hokn_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if (arr[i].(int) - arr[i-1].(int)) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    // Initialize difference as infinite\n    diff := 999999999\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1].(int) - arr[i].(int) < diff {\n            diff = arr[i + 1].(int) - arr[i].(int)\n        }\n    }\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    // Find the minimum difference by comparing adjacent pairs in sorted array.\n    var minDiff int = arr[1].(int) - arr[0].(int)\n    for i := 0; i < n - 1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < minDiff {\n            minDiff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n    return minDiff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpzqhy64cv_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpzqhy64cv_test.go:36: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpzqhy64cv_test.go:36: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var min_diff int = arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if (arr[j].(int) - arr[i].(int) < min_diff) {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n-1; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort array in non-decreasing order\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1) // largest int\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptqy2hokn_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i - 1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i - 1].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                // swap\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int)-arr[i].(int)\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    arr = sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm2nyjwl7_test.go:11:11: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i - 1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i - 1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j].(int) > arr[j + 1].(int) {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1].(int) - arr[i].(int) < diff {\n            diff = arr[i + 1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort array in non-decreasing order\n    sort(arr, n)\n \n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1) // largest int\n \n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n \n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqp6t9f87_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j].(int) > arr[j + 1].(int) {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 99999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1].(int) - arr[i].(int) < diff {\n            diff = arr[i + 1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123191,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n - 1; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j].(int) > arr[j + 1].(int) {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i - 1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i - 1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i+1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n-1; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                // Swap if greater is at the rear position\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 999999999\n\n    // Find the min diff by comparing adjacent pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int)-arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123191,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j].(int) > arr[j + 1].(int) {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 99999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1].(int) - arr[i].(int) < diff {\n            diff = arr[i + 1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123191,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    arr = sort(arr)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzru7lec9_test.go:11:11: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := arr[1].(int) - arr[0].(int)\n\n    // Find the min diff by comparing adjacent pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1].(int) - arr[i].(int) < diff {\n            diff = arr[i + 1].(int) - arr[i].(int)\n        }\n    }\n\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123191,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j] > arr[j + 1] {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(arr[n - 1].(int)) - int(arr[0].(int))\n\n    // Find the min diff by comparing adjacent pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if int(arr[i + 1].(int)) - int(arr[i].(int)) < diff {\n            diff = int(arr[i + 1].(int)) - int(arr[i].(int))\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj0wphzed_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    // Initialize difference as infinite\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    return 0\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmp0qjv1byd_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmp0qjv1byd_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmp0qjv1byd_test.go:32: expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j] > arr[j+1] {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(arr[n-1].(int)) - int(arr[0].(int))\n\n    // Find the min diff by comparing adjacent pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if int(arr[i+1].(int)) - int(arr[i].(int)) < diff {\n            diff = int(arr[i+1].(int)) - int(arr[i].(int))\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp1g5bkw5_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    // Find the minimum difference by comparing adjacent pairs in sorted array.\n    // Return the minimum difference.\n    return 0\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpsd6hlx06_test.go:31: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpsd6hlx06_test.go:31: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpsd6hlx06_test.go:31: expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n - 1; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j].(int) > arr[j + 1].(int) {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i - 1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i - 1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n-1; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := arr[1].(int) - arr[0].(int)\n\n    // Find the min diff by comparing adjacent pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n - 1; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j] > arr[j + 1] {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(arr[1].(int) - arr[0].(int))\n\n    // Find the min diff by comparing adjacent pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if int(arr[i + 1].(int) - arr[i].(int)) < diff {\n            diff = int(arr[i + 1].(int) - arr[i].(int))\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc9vu4lvn_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var min_diff int = arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if (arr[j].(int) - arr[i].(int) < min_diff) {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n - 1; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j] > arr[j + 1] {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n    // Initialize difference as infinite\n    diff := int(arr[n - 1].(int)) - int(arr[0].(int))\n    // Find the min diff by comparing adjacent pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if int(arr[i + 1].(int)) - int(arr[i].(int)) < diff {\n            diff = int(arr[i + 1].(int)) - int(arr[i].(int))\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzsv1lc97_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j] > arr[j+1] {\n                temp := arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1] - arr[i] < diff {\n            diff = arr[i+1] - arr[i]\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo3w0uexy_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n/tmp/tmpo3w0uexy_test.go:27:21: invalid operation: arr[i + 1] - arr[i] (operator - not defined on interface)\n/tmp/tmpo3w0uexy_test.go:28:29: invalid operation: arr[i + 1] - arr[i] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n - 1; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j] > arr[j + 1] {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1] - arr[0]\n    for i := 2; i < n; i++ {\n        if arr[i] - arr[i - 1] < min_diff {\n            min_diff = arr[i] - arr[i - 1]\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpihay7b79_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n/tmp/tmpihay7b79_test.go:20:24: invalid operation: arr[1] - arr[0] (operator - not defined on interface)\n/tmp/tmpihay7b79_test.go:22:19: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n/tmp/tmpihay7b79_test.go:23:31: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j] > arr[j+1] {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := arr[1] - arr[0]\n\n    // Find the min diff by comparing difference\n    // of all pairs in given array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1] - arr[i] < diff {\n            diff = arr[i+1] - arr[i]\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqagu_jvu_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n/tmp/tmpqagu_jvu_test.go:20:20: invalid operation: arr[1] - arr[0] (operator - not defined on interface)\n/tmp/tmpqagu_jvu_test.go:25:21: invalid operation: arr[i + 1] - arr[i] (operator - not defined on interface)\n/tmp/tmpqagu_jvu_test.go:26:29: invalid operation: arr[i + 1] - arr[i] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 99999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int)-arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var min_diff int = arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if (arr[j].(int) - arr[i].(int) < min_diff) {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if (arr[j].(int) - arr[i].(int) < min_diff) {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpis42tucc_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpis42tucc_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpis42tucc_test.go:36: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n - 1; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j].(int) > arr[j + 1].(int) {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1].(int) - arr[i].(int) < diff {\n            diff = arr[i + 1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var i, j int\n    var min int\n    min = arr[1].(int) - arr[0].(int)\n    for i = 0; i < n-1; i++ {\n        for j = i+1; j < n; j++ {\n            if arr[j].(int) - arr[i].(int) < min {\n                min = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmp_ffik9ri_test.go:38: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmp_ffik9ri_test.go:38: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmp_ffik9ri_test.go:38: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    // Find the minimum difference between any two elements in a given list.\n    // return the minimum difference\n    return 0\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmp5ym5hhvs_test.go:31: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmp5ym5hhvs_test.go:31: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmp5ym5hhvs_test.go:31: expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n-1; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min {\n            min = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, 0, n-1)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp56r7k64k_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    arr = sort_arr(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzpulwg6g_test.go:11:11: undefined: sort_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n    // Initialize difference as infinite\n    diff := arr[1].(int) - arr[0].(int)\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j] > arr[j+1] {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1] - arr[0]\n    for i := 2; i < n; i++ {\n        if arr[i] - arr[i-1] < min_diff {\n            min_diff = arr[i] - arr[i-1]\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7hg2ncqi_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n/tmp/tmp7hg2ncqi_test.go:20:24: invalid operation: arr[1] - arr[0] (operator - not defined on interface)\n/tmp/tmp7hg2ncqi_test.go:22:19: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n/tmp/tmp7hg2ncqi_test.go:23:31: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort array in non-decreasing order\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1) // largest int\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5_50uwr_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    // Find the minimum difference between any two elements in the sorted array\n    return 0\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmp5wu9rofj_test.go:30: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmp5wu9rofj_test.go:30: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmp5wu9rofj_test.go:30: expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n - 1; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j] > arr[j + 1] {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1] - arr[0]\n    for i := 2; i < n; i++ {\n        if arr[i] - arr[i - 1] < min_diff {\n            min_diff = arr[i] - arr[i - 1]\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgaad16_v_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n/tmp/tmpgaad16_v_test.go:20:24: invalid operation: arr[1] - arr[0] (operator - not defined on interface)\n/tmp/tmpgaad16_v_test.go:22:19: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n/tmp/tmpgaad16_v_test.go:23:31: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := arr[1].(int) - arr[0].(int)\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1].(int) - arr[i].(int) < diff {\n            diff = arr[i + 1].(int) - arr[i].(int)\n        }\n    }\n\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n-1; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int)-arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    // Find the minimum difference by comparing adjacent pairs in sorted array.\n    return 0\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpn3tbh5w7_test.go:30: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpn3tbh5w7_test.go:30: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpn3tbh5w7_test.go:30: expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort array in non-decreasing order\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpznj9lsnw_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j] > arr[j + 1] {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1] - arr[0]\n    for i := 2; i < n; i++ {\n        if arr[i] - arr[i - 1] < min_diff {\n            min_diff = arr[i] - arr[i - 1]\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr4_0pj9j_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n/tmp/tmpr4_0pj9j_test.go:20:24: invalid operation: arr[1] - arr[0] (operator - not defined on interface)\n/tmp/tmpr4_0pj9j_test.go:22:19: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n/tmp/tmpr4_0pj9j_test.go:23:31: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort array in non-decreasing order\n    sort(arr, n)\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int)-arr[i].(int)\n        }\n    }\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6edrawhj_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 999999999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int)-arr[i].(int)\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    // Find the minimum difference by comparing adjacent pairs in sorted array.\n    return 0\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpn3tbh5w7_test.go:30: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpn3tbh5w7_test.go:30: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpn3tbh5w7_test.go:30: expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[j].(int) - arr[i].(int) < min_diff {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpdvf65fht_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpdvf65fht_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpdvf65fht_test.go:36: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort array in non-decreasing order\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1) // largest int\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptqy2hokn_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if diff > arr[i+1].(int)-arr[i].(int) {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgw75ceqf_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int)-arr[i].(int)\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var min_diff int = arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if (arr[j].(int) - arr[i].(int) < min_diff) {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var min_diff int = arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if (arr[j].(int) - arr[i].(int) < min_diff) {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var min_diff int = arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[j].(int) - arr[i].(int) < min_diff {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123195,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmp64efm4an_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmp64efm4an_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmp64efm4an_test.go:36: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if (arr[i].(int) - arr[i - 1].(int)) < min_diff {\n            min_diff = arr[i].(int) - arr[i - 1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123195,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n    // Initialize difference as infinite\n    diff := arr[1].(int) - arr[0].(int)\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j] > arr[j+1] {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1] - arr[0]\n    for i := 2; i < n; i++ {\n        if (arr[i] - arr[i-1]) < min_diff {\n            min_diff = arr[i] - arr[i-1]\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjd7sfwik_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n/tmp/tmpjd7sfwik_test.go:20:24: invalid operation: arr[1] - arr[0] (operator - not defined on interface)\n/tmp/tmpjd7sfwik_test.go:22:12: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n/tmp/tmpjd7sfwik_test.go:23:31: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n - 1; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j] > arr[j + 1] {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1] - arr[0]\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1] - arr[i] < min_diff {\n            min_diff = arr[i + 1] - arr[i]\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpimn3j3go_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n/tmp/tmpimn3j3go_test.go:20:24: invalid operation: arr[1] - arr[0] (operator - not defined on interface)\n/tmp/tmpimn3j3go_test.go:22:23: invalid operation: arr[i + 1] - arr[i] (operator - not defined on interface)\n/tmp/tmpimn3j3go_test.go:23:35: invalid operation: arr[i + 1] - arr[i] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j] > arr[j+1] {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n    // Initialize difference as infinite\n    diff := int(arr[1].(int) - arr[0].(int))\n    for i := 0; i < n-1; i++ {\n        if int(arr[i+1].(int) - arr[i].(int)) < diff {\n            diff = int(arr[i+1].(int) - arr[i].(int))\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpebsw7907_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    arr = merge_sort(arr)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8ja2qhf6_test.go:11:11: undefined: merge_sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                temp := arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i - 1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i - 1].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123195,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                temp := arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if (arr[i].(int) - arr[i-1].(int)) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123195,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j].(int) > arr[j + 1].(int) {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1].(int) - arr[i].(int) < diff {\n            diff = arr[i + 1].(int) - arr[i].(int)\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123195,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\n    // Sort array elements\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123195,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz69_ms7g_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    sort(arr, n)\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2qbe13cv_test.go:10:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    // Initialize difference as infinite\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    return 0\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmp0qjv1byd_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmp0qjv1byd_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmp0qjv1byd_test.go:32: expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    // Initialize difference as infinite\n    diff := 99999\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123195,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                temp := arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1].(int) - arr[i].(int) < min_diff {\n            min_diff = arr[i + 1].(int) - arr[i].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123195,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if (arr[i].(int) - arr[i-1].(int)) < diff {\n            diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123195,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i - 1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i - 1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j] > arr[j+1] {\n                temp := arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(arr[n-1].(int)) - int(arr[0].(int))\n\n    // Find the min diff by comparing adjacent pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if int(arr[i+1].(int)) - int(arr[i].(int)) < diff {\n            diff = int(arr[i+1].(int)) - int(arr[i].(int))\n        }\n    }\n\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8jclqqw1_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    arr = merge_sort(arr)\n\n    // Initialize difference as infinite\n    diff := 999999999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj8gk0vz5_test.go:11:11: undefined: merge_sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort array in non-decreasing order\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpznj9lsnw_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                // swap\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int)-arr[i].(int)\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 99999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123189,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    arr = merge_sort(arr, 0, n-1)\n    // Initialize difference as infinite\n    min_diff := arr[1].(int) - arr[0].(int)\n    // Find the min diff by comparing adjacent pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < min_diff {\n            min_diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4kzr9bpi_test.go:11:11: undefined: merge_sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    arr = merge_sort(arr, 0, n-1)\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf56ulzgg_test.go:11:11: undefined: merge_sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                temp := arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 99999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n-1; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                // swap\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n-1; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i - 1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i - 1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var min_diff int = arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if (arr[j].(int) - arr[i].(int) < min_diff) {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n-1; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    arr = merge_sort(arr)\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp856lksey_test.go:11:11: undefined: merge_sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < diff {\n            diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n - 1; i++ {\n        for j := 0; j < n - i - 1; j++ {\n            if arr[j] > arr[j + 1] {\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1] - arr[0]\n    for i := 2; i < n; i++ {\n        if arr[i] - arr[i - 1] < min_diff {\n            min_diff = arr[i] - arr[i - 1]\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpihay7b79_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n/tmp/tmpihay7b79_test.go:20:24: invalid operation: arr[1] - arr[0] (operator - not defined on interface)\n/tmp/tmpihay7b79_test.go:22:19: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n/tmp/tmpihay7b79_test.go:23:31: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n    // Initialize difference as infinite\n    diff := 999999999\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int)-arr[i].(int)\n        }\n    }\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 99999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i + 1].(int) - arr[i].(int) < diff {\n            diff = arr[i + 1].(int) - arr[i].(int)\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j] > arr[j+1] {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1] - arr[0]\n    for i := 2; i < n; i++ {\n        if arr[i] - arr[i-1] < min_diff {\n            min_diff = arr[i] - arr[i-1]\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6iqak2eb_test.go:13:23: invalid operation: arr[j] > arr[j + 1] (operator > not defined on interface)\n/tmp/tmp6iqak2eb_test.go:20:24: invalid operation: arr[1] - arr[0] (operator - not defined on interface)\n/tmp/tmp6iqak2eb_test.go:22:19: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n/tmp/tmp6iqak2eb_test.go:23:31: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    // Find the minimum difference between any two elements in a given list.\n    // Return the minimum difference\n    return 0\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpti9xmdti_test.go:31: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpti9xmdti_test.go:31: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpti9xmdti_test.go:31: expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    arr = merge_sort(arr)\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp856lksey_test.go:11:11: undefined: merge_sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort array in non-decreasing order\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123194,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpznj9lsnw_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    var min_diff int = arr[1].(int) - arr[0].(int)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if (arr[j].(int) - arr[i].(int) < min_diff) {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmpemp593bd_test.go:36: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort array in non-decreasing order\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3nsquew__test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123192,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    if n == 0 || n == 1 {\n        return 0\n    }\n\n    // Sort array elements\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123195,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz69_ms7g_test.go:15:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 0; i < n-1; i++ {\n        for j := i+1; j < n; j++ {\n            if arr[j].(int) - arr[i].(int) < min_diff {\n                min_diff = arr[j].(int) - arr[i].(int)\n            }\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmp83mxpq4u_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmp83mxpq4u_test.go:36: expected '%!s(int=1)', got '%!s(int=-2)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmp83mxpq4u_test.go:36: expected '%!s(int=4)', got '%!s(int=-25)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                // swap\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := 999999999\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min := arr[1] - arr[0]\n    for i := 2; i < n; i++ {\n        if arr[i] - arr[i - 1] < min {\n            min = arr[i] - arr[i - 1]\n        }\n    }\n    return min\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr779l6th_test.go:13:23: invalid operation: arr[i] > arr[j] (operator > not defined on interface)\n/tmp/tmpr779l6th_test.go:20:19: invalid operation: arr[1] - arr[0] (operator - not defined on interface)\n/tmp/tmpr779l6th_test.go:22:19: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n/tmp/tmpr779l6th_test.go:23:26: invalid operation: arr[i] - arr[i - 1] (operator - not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n - 1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, 0, n-1)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp56r7k64k_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort array in non-decreasing order\n    sort(arr, n)\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1) // largest int\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int)-arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk185if6u_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            if arr[i].(int) > arr[j].(int) {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i - 1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i - 1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    // Initialize difference as infinite\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    return 0\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123190,
      "stdout": "--- FAIL: TestFind_Min_Diff (0.00s)\n    --- FAIL: TestFind_Min_Diff/test_num__0 (0.00s)\n        tmp0qjv1byd_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__1 (0.00s)\n        tmp0qjv1byd_test.go:32: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFind_Min_Diff/test_num__2 (0.00s)\n        tmp0qjv1byd_test.go:32: expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    sort(arr, n)\n\n    // Initialize difference as infinite\n    diff := int(^uint(0) >> 1)\n\n    // Find the min diff by comparing adjacent\n    // pairs in sorted array\n    for i := 0; i < n-1; i++ {\n        if arr[i+1].(int) - arr[i].(int) < diff {\n            diff = arr[i+1].(int) - arr[i].(int)\n        }\n    }\n\n    // Return min diff\n    return diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517469,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4rez_61t_test.go:11:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    // Sort the array\n    for i := 0; i < n; i++ {\n        for j := 0; j < n-i-1; j++ {\n            if arr[j].(int) > arr[j+1].(int) {\n                temp := arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n            }\n        }\n    }\n\n    // Find the minimum difference\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123196,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_min_diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nfunc find_min_diff(arr []interface{}, n int) int {\n    sort(arr, n)\n    min_diff := arr[1].(int) - arr[0].(int)\n    for i := 2; i < n; i++ {\n        if arr[i].(int) - arr[i-1].(int) < min_diff {\n            min_diff = arr[i].(int) - arr[i-1].(int)\n        }\n    }\n    return min_diff\n}\n\nfunc TestFind_Min_Diff(t *testing.T) {\n  candidate := find_min_diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 3, 19, 18, 25}, 6), expected: 1 },\n     { actual: candidate([]interface{}{4, 3, 2, 6}, 4), expected: 1 },\n     { actual: candidate([]interface{}{30, 5, 20, 9}, 4), expected: 4 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123186,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2qbe13cv_test.go:10:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}