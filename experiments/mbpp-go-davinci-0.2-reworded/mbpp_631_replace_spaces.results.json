{
  "name": "mbpp_631_replace_spaces",
  "language": "go_test.go",
  "prompt": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py",
  "prompt_terminology": "reworded",
  "tests": "func TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    if len(text) == 0 {\n        return text\n    }\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmp3yec8o1x_test.go:39: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result []byte\n    for _, c := range text {\n        if c == ' ' {\n            result = append(result, '_')\n        } else {\n            result = append(result, byte(c))\n        }\n    }\n    return string(result)\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpzdoo6562_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            result += \"_\"\n        } else if text[i] == '_' {\n            result += \" \"\n        } else {\n            result += string(text[i])\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var new_text string\n    for _, char := range text {\n        if char == ' ' {\n            new_text += \"_\"\n        } else if char == '_' {\n            new_text += \" \"\n        } else {\n            new_text += string(char)\n        }\n    }\n    return new_text\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            result += \"_\"\n        } else if text[i] == '_' {\n            result += \" \"\n        } else {\n            result += string(text[i])\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result []byte\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            result = append(result, '_')\n        } else if text[i] == '_' {\n            result = append(result, ' ')\n        } else {\n            result = append(result, text[i])\n        }\n    }\n    return string(result)\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if string(char) == \" \" {\n            result += \"_\"\n        } else if string(char) == \"_\" {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, ch := range text {\n        if ch == ' ' {\n            result += \"_\"\n        } else if ch == '_' {\n            result += \" \"\n        } else {\n            result += string(ch)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmp0nfc56ym_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n            result += \"_\"\n        } else if text[i] == '_' {\n            result += \" \"\n        } else {\n            result += string(text[i])\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    return \"\"\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__0 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Jumanji_The_Jungle', got ''\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'The Avengers', got ''\n    --- FAIL: TestReplace_Spaces/test_num__2 (0.00s)\n        tmpi5a7hci6_test.go:28: expected 'Fast_and_Furious', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "--- FAIL: TestReplace_Spaces (0.00s)\n    --- FAIL: TestReplace_Spaces/test_num__1 (0.00s)\n        tmpb3hwwnj1_test.go:36: expected 'The Avengers', got 'The_Avengers'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, char := range text {\n        if char == ' ' {\n            result += \"_\"\n        } else if char == '_' {\n            result += \" \"\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package replace_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to replace whitespaces with an underscore and vice versa in a given string.\nfunc replace_spaces(text string) string {\n    var result string\n    for _, c := range text {\n        if c == ' ' {\n            result += \"_\"\n        } else if c == '_' {\n            result += \" \"\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestReplace_Spaces(t *testing.T) {\n  candidate := replace_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Jumanji The Jungle\"), expected: \"Jumanji_The_Jungle\" },\n     { actual: candidate(\"The_Avengers\"), expected: \"The Avengers\" },\n     { actual: candidate(\"Fast and Furious\"), expected: \"Fast_and_Furious\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510371,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}