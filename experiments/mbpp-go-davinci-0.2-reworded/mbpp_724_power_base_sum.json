{
  "name": "mbpp_724_power_base_sum",
  "language": "go_test.go",
  "prompt": "package power_base_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunc power_base_sum(base int, power int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "reworded",
  "tests": "func TestPower_Base_Sum(t *testing.T) {\n  candidate := power_base_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 100), expected: 115 },\n     { actual: candidate(8, 10), expected: 37 },\n     { actual: candidate(8, 15), expected: 62 },\n     { actual: candidate(3, 3), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_str_arr)\n    var base_arr_sum int = 0\n    for i := 0; i < base_arr_len; i++ {\n        base_arr_sum += base_str_arr[i]\n    }\n    sum = base_arr_sum\n    for i := 1; i < power; i++ {\n        sum += base_arr_sum\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_str_arr)\n    var base_arr []int = make([]int, base_arr_len)\n    for i := 0; i < base_arr_len; i++ {\n        base_arr[i] = base_str_arr[i]\n    }\n    for i := 1; i < power; i++ {\n        var base_arr_len int = len(base_arr)\n        var base_arr_new []int = make([]int, base_arr_len)\n        for i := 0; i < base_arr_len; i++ {\n            base_arr_new[i] = base_arr[i]\n        }\n        for i := 0; i < base_arr_len; i++ {\n            var base_arr_new_len int = len(base_arr_new)\n            var base_arr_new_new []int = make([]int, base_arr_new_len)\n            for i := 0; i < base_arr_new_len; i++ {\n                base_arr_new_new[i] = base_arr_new[i]\n            }\n            for j := 0; j < base_arr_new_len; j++ {\n                base_arr_new_new[j] = base_arr_new_new[j] * base_str_arr[i]\n            }\n            for j := 0; j < base_arr_new_len; j++ {\n                if base_arr_new_new[j] > 9 {\n                    var base_arr_new_new_len int = len(base_arr_new_new)\n                    var base_arr_new_new_new []int = make",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_str_len int = len(base_str)\n    var power_str_len int = len(power_str)\n    var base_str_arr []string = make([]string, base_str_len)\n    var power_str_arr []string = make([]string, power_str_len)\n    var base_str_arr_len int = len(base_str_arr)\n    var power_str_arr_len int = len(power_str_arr)\n    var base_str_arr_i int = 0\n    var power_str_arr_i int = 0\n    var base_str_arr_i_str string = \"\"\n    var power_str_arr_i_str string = \"\"\n    var base_str_arr_i_int int = 0\n    var power_str_arr_i_int int = 0\n\n    for base_str_arr_i < base_str_arr_len {\n        base_str_arr[base_str_arr_i] = string(base_str[base_str_arr_i])\n        base_str_arr_i++\n    }\n\n    for power_str_arr_i < power_str_arr_len {\n        power_str_arr[power_str_arr_i] = string(power_str[power_str_arr_i])\n        power_str_arr_i++\n    }\n\n    for base_str_arr_i = 0; base_str_arr_i < base_str_arr_len; base_str_arr_i++ {\n        base_str_arr_i_str = base_str_arr[base_str_arr_i]\n        fmt.Sscanf(base_str_arr_i_str, \"%d\", &base_str_arr_i_int)\n        sum += base_str_arr_i_int\n    }\n\n    for power_str_arr_i = 0; power_str_arr_i < power_str_arr_len;",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i:=0; i<power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_int int = 0\n    for i := 0; i < power; i++ {\n        for j := 0; j < len(base_str); j++ {\n            base_int, _ = strconv.Atoi(string(base_str[j]))\n            sum += base_int\n        }\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_int_arr []int = make([]int, len(base_str))\n    for i := 0; i < len(base_str); i++ {\n        base_int_arr[i] = int(base_str[i]) - 48\n    }\n    var base_int_arr_len int = len(base_int_arr)\n    var base_int_arr_pow []int = make([]int, base_int_arr_len)\n    for i := 0; i < base_int_arr_len; i++ {\n        base_int_arr_pow[i] = base_int_arr[i]\n    }\n    for i := 1; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_int_arr_len; j++ {\n            var temp int = base_int_arr_pow[j] * base + carry\n            base_int_arr_pow[j] = temp % 10\n            carry = temp / 10\n        }\n        if carry > 0 {\n            base_int_arr_pow = append(base_int_arr_pow, carry)\n            base_int_arr_len++\n        }\n    }\n    for i := 0; i < base_int_arr_len; i++ {\n        sum += base_int_arr_pow[i]\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_pow int = base\n    for i := 1; i < power; i++ {\n        base_pow *= base\n    }\n    for base_pow > 0 {\n        sum += base_pow % 10\n        base_pow /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_int int = 0\n    for i := 0; i < power; i++ {\n        for j := 0; j < len(base_str); j++ {\n            base_int, _ = strconv.Atoi(string(base_str[j]))\n            sum += base_int\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_int_arr []int = make([]int, len(base_str))\n    var power_int_arr []int = make([]int, len(power_str))\n\n    for i := 0; i < len(base_str); i++ {\n        base_int_arr[i] = int(base_str[i]) - 48\n    }\n\n    for i := 0; i < len(power_str); i++ {\n        power_int_arr[i] = int(power_str[i]) - 48\n    }\n\n    for i := 0; i < len(power_int_arr); i++ {\n        var temp_sum int = 0\n        var temp_base int = base\n        for j := 0; j < power_int_arr[i]; j++ {\n            temp_sum += temp_base\n            temp_base *= base\n        }\n        sum += temp_sum\n    }\n\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_len int = len(base_str)\n    var power_len int = len(power_str)\n    var base_arr []int = make([]int, base_len)\n    var power_arr []int = make([]int, power_len)\n    var base_arr_len int = len(base_arr)\n    var power_arr_len int = len(power_arr)\n    var base_arr_idx int = 0\n    var power_arr_idx int = 0\n    var base_arr_idx_max int = base_arr_len - 1\n    var power_arr_idx_max int = power_arr_len - 1\n    var base_arr_val int = 0\n    var power_arr_val int = 0\n    var base_arr_val_str string = \"\"\n    var power_arr_val_str string = \"\"\n    var base_arr_val_str_len int = 0\n    var power_arr_val_str_len int = 0\n    var base_arr_val_str_idx int = 0\n    var power_arr_val_str_idx int = 0\n    var base_arr_val_str_idx_max int = 0\n    var power_arr_val_str_idx_max int = 0\n    var base_arr_val_str_val int = 0\n    var power_arr_val_str_val int = 0\n    var base_arr_val_str_val_str string = \"\"\n    var power_arr_val_str_val_str string = \"\"\n    var base_arr_val_str_val_str_len int = 0\n    var power_arr_val_str_val_str_len int = 0\n    var base_arr_val_str_val_str_idx int = 0\n    var power_arr_val_str_val_str_idx int = 0\n    var base_arr_val_str_val_str_idx_max int =",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_len int = len(base_str)\n    var power_len int = len(power_str)\n    var base_arr []int = make([]int, base_len)\n    var power_arr []int = make([]int, power_len)\n    var base_arr_len int = len(base_arr)\n    var power_arr_len int = len(power_arr)\n    var i int = 0\n    var j int = 0\n    var k int = 0\n    var l int = 0\n    var m int = 0\n    var n int = 0\n    var o int = 0\n    var p int = 0\n    var q int = 0\n    var r int = 0\n    var s int = 0\n    var t int = 0\n    var u int = 0\n    var v int = 0\n    var w int = 0\n    var x int = 0\n    var y int = 0\n    var z int = 0\n    var aa int = 0\n    var bb int = 0\n    var cc int = 0\n    var dd int = 0\n    var ee int = 0\n    var ff int = 0\n    var gg int = 0\n    var hh int = 0\n    var ii int = 0\n    var jj int = 0\n    var kk int = 0\n    var ll int = 0\n    var mm int = 0\n    var nn int = 0\n    var oo int = 0\n    var pp int = 0\n    var qq int = 0\n    var rr int = 0\n    var ss int = 0\n    var tt int = 0\n    var uu int = 0\n    var vv int = 0\n    var ww int = 0\n    var xx int = 0\n    var yy int = 0\n    var zz int = 0\n    var aaa int = 0\n    var bbb int = 0\n    var ccc int = 0\n    var ddd int = 0\n    var eee int = 0\n    var fff int = 0",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_str_len; j++ {\n            var tmp int = base_str_arr[j] * base + carry\n            base_str_arr[j] = tmp % 10\n            carry = tmp / 10\n        }\n        for carry > 0 {\n            base_str_arr = append(base_str_arr, carry % 10)\n            carry /= 10\n        }\n    }\n    for _, v := range base_str_arr {\n        sum += v\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    for _, char := range base_str {\n        sum += int(char - '0')\n    }\n    for i := 1; i < power; i++ {\n        var carry int = 0\n        for j := len(base_str) - 1; j >= 0; j-- {\n            var digit int = int(base_str[j] - '0')\n            var product int = digit * base + carry\n            base_str = fmt.Sprintf(\"%d%d\", product % 10, base_str[:j])\n            carry = product / 10\n        }\n        if carry > 0 {\n            base_str = fmt.Sprintf(\"%d%s\", carry, base_str)\n        }\n        for _, char := range base_str {\n            sum += int(char - '0')\n        }\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_to_power int = base\n    for i := 1; i < power; i++ {\n        base_to_power *= base\n    }\n    for base_to_power > 0 {\n        sum += base_to_power % 10\n        base_to_power /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    var power_arr []int = make([]int, base_len)\n    for i := 0; i < base_len; i++ {\n        power_arr[i] = base_arr[i]\n    }\n    for i := 1; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_len; j++ {\n            var tmp int = power_arr[j] * base + carry\n            power_arr[j] = tmp % 10\n            carry = tmp / 10\n        }\n    }\n    for i := 0; i < base_len; i++ {\n        sum += power_arr[i]\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_str_len int = len(base_str)\n    var power_str_len int = len(power_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    var power_str_arr []int = make([]int, power_str_len)\n    var base_str_arr_len int = len(base_str_arr)\n    var power_str_arr_len int = len(power_str_arr)\n    var i int = 0\n    var j int = 0\n    var k int = 0\n    var l int = 0\n    var m int = 0\n    var n int = 0\n    var o int = 0\n    var p int = 0\n    var q int = 0\n    var r int = 0\n    var s int = 0\n    var t int = 0\n    var u int = 0\n    var v int = 0\n    var w int = 0\n    var x int = 0\n    var y int = 0\n    var z int = 0\n    var aa int = 0\n    var bb int = 0\n    var cc int = 0\n    var dd int = 0\n    var ee int = 0\n    var ff int = 0\n    var gg int = 0\n    var hh int = 0\n    var ii int = 0\n    var jj int = 0\n    var kk int = 0\n    var ll int = 0\n    var mm int = 0\n    var nn int = 0\n    var oo int = 0\n    var pp int = 0\n    var qq int = 0\n    var rr int = 0\n    var ss int = 0\n    var tt int = 0\n    var uu int = 0\n    var vv int = 0\n    var ww int = 0\n    var xx int = 0\n    var yy int = 0\n    var zz int = 0\n    var aaa int = 0\n    var bbb int = 0\n    var ccc int = 0\n    var d",
    "    var sum int = 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_len; j++ {\n            var tmp int = base_arr[j] * base + carry\n            base_arr[j] = tmp % 10\n            carry = tmp / 10\n        }\n        for carry > 0 {\n            base_arr = append(base_arr, carry % 10)\n            carry /= 10\n        }\n    }\n    for _, v := range base_arr {\n        sum += v\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    var base_str_arr_len int = len(base_str_arr)\n    var base_str_arr_index int = 0\n    var base_str_arr_value int = 0\n    var base_str_arr_value_str string = \"\"\n    var base_str_arr_value_str_len int = 0\n    var base_str_arr_value_str_arr []int = make([]int, base_str_arr_value_str_len)\n    var base_str_arr_value_str_arr_len int = len(base_str_arr_value_str_arr)\n    var base_str_arr_value_str_arr_index int = 0\n    var base_str_arr_value_str_arr_value int = 0\n    var base_str_arr_value_str_arr_value_str string = \"\"\n    var base_str_arr_value_str_arr_value_str_len int = 0\n    var base_str_arr_value_str_arr_value_str_arr []int = make([]int, base_str_arr_value_str_arr_value_str_len)\n    var base_str_arr_value_str_arr_value_str_arr_len int = len(base_str_arr_value_str_arr_value_str_arr)\n    var base_str_arr_value_str_arr_value_str_arr_index int = 0\n    var base_str_arr_value_str_arr_value_str_arr_value int = 0\n    var base_str_arr_value_str_arr_value_str_arr_value_str string = \"\"\n    var base_str_arr_value_str_arr_value_str_arr_value_str_len int = 0\n    var base_str_arr_value_str_arr_value_str_arr_value_str_arr []",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base = power_base * base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for i := 0; i < len(fmt.Sprintf(\"%d\", result)); i++ {\n        sum += int(fmt.Sprintf(\"%d\", result)[i] - '0')\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_arr)\n    var power_arr []int = make([]int, base_arr_len)\n    for i := 0; i < base_arr_len; i++ {\n        power_arr[i] = base_arr[i]\n    }\n    for i := 1; i < power; i++ {\n        var power_arr_len int = len(power_arr)\n        var tmp_arr []int = make([]int, power_arr_len)\n        for i := 0; i < power_arr_len; i++ {\n            tmp_arr[i] = power_arr[i]\n        }\n        for i := 0; i < power_arr_len; i++ {\n            var tmp_arr_len int = len(tmp_arr)\n            var tmp_sum int = 0\n            for j := 0; j < tmp_arr_len; j++ {\n                tmp_sum += tmp_arr[j] * base_arr[i]\n            }\n            power_arr[i] = tmp_sum % 10\n            if i < power_arr_len - 1 {\n                power_arr[i + 1] += tmp_sum / 10\n            } else {\n                if tmp_sum / 10 > 0 {\n                    power_arr = append(power_arr, tmp_sum / 10)\n                }\n            }\n        }\n    }\n    for i := 0; i < len(power_arr); i++ {\n        sum += power_arr[i]\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_str_len; j++ {\n            var tmp int = base_str_arr[j] * base + carry\n            base_str_arr[j] = tmp % 10\n            carry = tmp / 10\n        }\n        for carry > 0 {\n            base_str_arr = append(base_str_arr, carry % 10)\n            carry /= 10\n        }\n    }\n    for i := 0; i < len(base_str_arr); i++ {\n        sum += base_str_arr[i]\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_int int = 0\n    for i := 0; i < power; i++ {\n        for j := 0; j < len(base_str); j++ {\n            base_int, _ = fmt.Sscanf(string(base_str[j]), \"%d\", &base_int)\n            sum += base_int\n        }\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result != 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_arr []int = make([]int, len(base_str))\n    for i := 0; i < len(base_str); i++ {\n        base_arr[i], _ = fmt.Sscanf(string(base_str[i]), \"%d\")\n    }\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < len(base_arr); j++ {\n            var tmp int = base_arr[j] * base + carry\n            base_arr[j] = tmp % 10\n            carry = tmp / 10\n        }\n        for carry > 0 {\n            base_arr = append(base_arr, carry % 10)\n            carry /= 10\n        }\n    }\n    for i := 0; i < len(base_arr); i++ {\n        sum += base_arr[i]\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_len; j++ {\n            var tmp int = base_arr[j] * base + carry\n            base_arr[j] = tmp % 10\n            carry = tmp / 10\n        }\n        for carry > 0 {\n            base_arr = append(base_arr, carry % 10)\n            carry /= 10\n        }\n    }\n    for _, v := range base_arr {\n        sum += v\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    return sum_digits(result)\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result != 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_arr)\n    var base_arr_sum int = 0\n    for i := 0; i < base_arr_len; i++ {\n        base_arr_sum += base_arr[i]\n    }\n    sum = base_arr_sum\n    for i := 1; i < power; i++ {\n        var base_arr_sum_str string = fmt.Sprintf(\"%d\", base_arr_sum)\n        var base_arr_sum_len int = len(base_arr_sum_str)\n        var base_arr_sum_arr []int = make([]int, base_arr_sum_len)\n        for i := 0; i < base_arr_sum_len; i++ {\n            base_arr_sum_arr[i] = int(base_arr_sum_str[i] - '0')\n        }\n        var base_arr_sum_arr_len int = len(base_arr_sum_arr)\n        base_arr_sum = 0\n        for i := 0; i < base_arr_sum_arr_len; i++ {\n            base_arr_sum += base_arr_sum_arr[i]\n        }\n        sum += base_arr_sum\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_len int = len(base_str)\n    var power_len int = len(power_str)\n    var base_arr []int = make([]int, base_len)\n    var power_arr []int = make([]int, power_len)\n    var base_arr_len int = len(base_arr)\n    var power_arr_len int = len(power_arr)\n    var i int = 0\n    var j int = 0\n    var k int = 0\n    var l int = 0\n    var m int = 0\n    var n int = 0\n    var o int = 0\n    var p int = 0\n    var q int = 0\n    var r int = 0\n    var s int = 0\n    var t int = 0\n    var u int = 0\n    var v int = 0\n    var w int = 0\n    var x int = 0\n    var y int = 0\n    var z int = 0\n    var aa int = 0\n    var bb int = 0\n    var cc int = 0\n    var dd int = 0\n    var ee int = 0\n    var ff int = 0\n    var gg int = 0\n    var hh int = 0\n    var ii int = 0\n    var jj int = 0\n    var kk int = 0\n    var ll int = 0\n    var mm int = 0\n    var nn int = 0\n    var oo int = 0\n    var pp int = 0\n    var qq int = 0\n    var rr int = 0\n    var ss int = 0\n    var tt int = 0\n    var uu int = 0\n    var vv int = 0\n    var ww int = 0\n    var xx int = 0\n    var yy int = 0\n    var zz int = 0\n    var aaa int = 0\n    var bbb int = 0\n    var ccc int = 0\n    var ddd int = 0\n    var eee int = 0\n    var fff int = 0",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n\n    for i := 0; i < len(base_str); i++ {\n        sum += int(base_str[i] - '0')\n    }\n\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_str_len int = len(base_str)\n    var power_str_len int = len(power_str)\n    var base_str_arr []string = make([]string, base_str_len)\n    var power_str_arr []string = make([]string, power_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = string(base_str[i])\n    }\n    for i := 0; i < power_str_len; i++ {\n        power_str_arr[i] = string(power_str[i])\n    }\n    for i := 0; i < base_str_len; i++ {\n        sum += int(base_str_arr[i])\n    }\n    for i := 0; i < power_str_len; i++ {\n        sum += int(power_str_arr[i])\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_arr)\n    var base_arr_sum int = 0\n    for i := 0; i < base_arr_len; i++ {\n        base_arr_sum += base_arr[i]\n    }\n    sum = base_arr_sum\n    for i := 1; i < power; i++ {\n        var base_arr_sum_str string = fmt.Sprintf(\"%d\", base_arr_sum)\n        var base_arr_sum_str_len int = len(base_arr_sum_str)\n        var base_arr_sum_arr []int = make([]int, base_arr_sum_str_len)\n        for i := 0; i < base_arr_sum_str_len; i++ {\n            base_arr_sum_arr[i] = int(base_arr_sum_str[i] - '0')\n        }\n        var base_arr_sum_arr_len int = len(base_arr_sum_arr)\n        var base_arr_sum_arr_sum int = 0\n        for i := 0; i < base_arr_sum_arr_len; i++ {\n            base_arr_sum_arr_sum += base_arr_sum_arr[i]\n        }\n        base_arr_sum = base_arr_sum_arr_sum\n        sum += base_arr_sum\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_str_len int = len(base_str)\n    var power_str_len int = len(power_str)\n    var base_arr []int = make([]int, base_str_len)\n    var power_arr []int = make([]int, power_str_len)\n    var base_arr_len int = len(base_arr)\n    var power_arr_len int = len(power_arr)\n    var base_arr_i int = 0\n    var power_arr_i int = 0\n    var base_arr_j int = 0\n    var power_arr_j int = 0\n    var base_arr_k int = 0\n    var power_arr_k int = 0\n    var base_arr_l int = 0\n    var power_arr_l int = 0\n    var base_arr_m int = 0\n    var power_arr_m int = 0\n    var base_arr_n int = 0\n    var power_arr_n int = 0\n    var base_arr_o int = 0\n    var power_arr_o int = 0\n    var base_arr_p int = 0\n    var power_arr_p int = 0\n    var base_arr_q int = 0\n    var power_arr_q int = 0\n    var base_arr_r int = 0\n    var power_arr_r int = 0\n    var base_arr_s int = 0\n    var power_arr_s int = 0\n    var base_arr_t int = 0\n    var power_arr_t int = 0\n    var base_arr_u int = 0\n    var power_arr_u int = 0\n    var base_arr_v int = 0\n    var power_arr_v int = 0\n    var base_arr_w int = 0\n    var power_arr_w int = 0\n    var base_arr_x int = 0\n    var power_arr_x int = 0\n    var base_arr_y int = 0\n   ",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_arr []int = make([]int, len(base_str))\n    var power_arr []int = make([]int, len(power_str))\n    for i := 0; i < len(base_str); i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < len(power_str); i++ {\n        power_arr[i] = int(power_str[i] - '0')\n    }\n    for i := 0; i < len(base_arr); i++ {\n        for j := 0; j < len(power_arr); j++ {\n            sum += base_arr[i] * power_arr[j]\n        }\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var pow int = 1\n    for i := 0; i < power; i++ {\n        pow *= base\n    }\n    for pow > 0 {\n        sum += pow % 10\n        pow /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_str_len int = len(base_str)\n    var power_str_len int = len(power_str)\n    var base_arr []int = make([]int, base_str_len)\n    var power_arr []int = make([]int, power_str_len)\n    var base_arr_len int = len(base_arr)\n    var power_arr_len int = len(power_arr)\n    var i int = 0\n    var j int = 0\n    var k int = 0\n    var l int = 0\n    var m int = 0\n    var n int = 0\n    var o int = 0\n    var p int = 0\n    var q int = 0\n    var r int = 0\n    var s int = 0\n    var t int = 0\n    var u int = 0\n    var v int = 0\n    var w int = 0\n    var x int = 0\n    var y int = 0\n    var z int = 0\n    var aa int = 0\n    var bb int = 0\n    var cc int = 0\n    var dd int = 0\n    var ee int = 0\n    var ff int = 0\n    var gg int = 0\n    var hh int = 0\n    var ii int = 0\n    var jj int = 0\n    var kk int = 0\n    var ll int = 0\n    var mm int = 0\n    var nn int = 0\n    var oo int = 0\n    var pp int = 0\n    var qq int = 0\n    var rr int = 0\n    var ss int = 0\n    var tt int = 0\n    var uu int = 0\n    var vv int = 0\n    var ww int = 0\n    var xx int = 0\n    var yy int = 0\n    var zz int = 0\n    var aaa int = 0\n    var bbb int = 0\n    var ccc int = 0\n    var ddd int = 0\n    var eee int = 0",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var num int = base\n    for i := 0; i < power; i++ {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n        num = sum\n        sum = 0\n    }\n    return num\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_arr)\n    var base_arr_sum int = 0\n    for i := 0; i < base_arr_len; i++ {\n        base_arr_sum += base_arr[i]\n    }\n    sum = base_arr_sum\n    for i := 1; i < power; i++ {\n        var base_arr_sum_str string = fmt.Sprintf(\"%d\", base_arr_sum)\n        var base_arr_sum_len int = len(base_arr_sum_str)\n        var base_arr_sum_arr []int = make([]int, base_arr_sum_len)\n        for i := 0; i < base_arr_sum_len; i++ {\n            base_arr_sum_arr[i] = int(base_arr_sum_str[i] - '0')\n        }\n        var base_arr_sum_arr_len int = len(base_arr_sum_arr)\n        var base_arr_sum_arr_sum int = 0\n        for i := 0; i < base_arr_sum_arr_len; i++ {\n            base_arr_sum_arr_sum += base_arr_sum_arr[i]\n        }\n        sum += base_arr_sum_arr_sum\n    }\n    return sum\n}\n",
    "    var total int = 1\n    for i := 0; i < power; i++ {\n        total *= base\n    }\n    var sum int = 0\n    for total > 0 {\n        sum += total % 10\n        total /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_int int = 0\n    for i := 0; i < len(base_str); i++ {\n        fmt.Sscanf(base_str[i:i+1], \"%d\", &base_int)\n        sum += base_int\n    }\n    var result int = sum\n    for i := 1; i < power; i++ {\n        result *= sum\n    }\n    return result\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    total := 1\n    for i := 0; i < power; i++ {\n        total *= base\n    }\n    return sum_digits(total)\n}\n",
    "    var sum int = 0\n    var result int = base\n    for i := 1; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    // Write your code here\n    return 0\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_str_len int = len(base_str)\n    var power_str_len int = len(power_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    var power_str_arr []int = make([]int, power_str_len)\n\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = int(base_str[i] - '0')\n    }\n\n    for i := 0; i < power_str_len; i++ {\n        power_str_arr[i] = int(power_str[i] - '0')\n    }\n\n    for i := 0; i < power_str_len; i++ {\n        var tmp_sum int = 0\n        var tmp_base int = 0\n        var tmp_power int = 0\n        var tmp_base_str string = \"\"\n        var tmp_power_str string = \"\"\n        var tmp_base_str_len int = 0\n        var tmp_power_str_len int = 0\n        var tmp_base_str_arr []int = make([]int, base_str_len)\n        var tmp_power_str_arr []int = make([]int, power_str_len)\n\n        for j := 0; j < base_str_len; j++ {\n            tmp_base_str_arr[j] = base_str_arr[j]\n        }\n\n        for j := 0; j < power_str_len; j++ {\n            tmp_power_str_arr[j] = power_str_arr[j]\n        }\n\n        for j := 0; j < power_str_len; j++ {\n            if j == i {\n                tmp_power_str_arr[j] = tmp_power_str_arr[j] - 1\n            }\n        }\n\n        for j := 0; j < power_str_len; j++ {\n            tmp_power_",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    return sum_digits(result)\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = int(base_str[i] - '0')\n    }\n\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_str_len; j++ {\n            var temp int = base_str_arr[j] * base + carry\n            base_str_arr[j] = temp % 10\n            carry = temp / 10\n        }\n        for carry > 0 {\n            base_str_arr = append(base_str_arr, carry % 10)\n            carry /= 10\n        }\n    }\n\n    for _, v := range base_str_arr {\n        sum += v\n    }\n\n    return sum\n}\n",
    "    sum := 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_int_arr []int = make([]int, len(base_str))\n\n    for i, v := range base_str {\n        base_int_arr[i] = int(v - '0')\n    }\n\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := len(base_int_arr) - 1; j >= 0; j-- {\n            var tmp int = base_int_arr[j] * base + carry\n            base_int_arr[j] = tmp % 10\n            carry = tmp / 10\n        }\n\n        for carry > 0 {\n            base_int_arr = append([]int{carry % 10}, base_int_arr...)\n            carry /= 10\n        }\n    }\n\n    for _, v := range base_int_arr {\n        sum += v\n    }\n\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 1; i <= power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_len int = len(base_str)\n    var power_len int = len(power_str)\n    var base_arr []int = make([]int, base_len)\n    var power_arr []int = make([]int, power_len)\n    var base_arr_len int = len(base_arr)\n    var power_arr_len int = len(power_arr)\n    var base_arr_index int = 0\n    var power_arr_index int = 0\n    var base_arr_last_index int = base_arr_len - 1\n    var power_arr_last_index int = power_arr_len - 1\n    var base_arr_last_value int = 0\n    var power_arr_last_value int = 0\n    var base_arr_last_value_str string = \"\"\n    var power_arr_last_value_str string = \"\"\n    var base_arr_last_value_str_len int = 0\n    var power_arr_last_value_str_len int = 0\n    var base_arr_last_value_str_index int = 0\n    var power_arr_last_value_str_index int = 0\n    var base_arr_last_value_str_last_index int = 0\n    var power_arr_last_value_str_last_index int = 0\n    var base_arr_last_value_str_last_value int = 0\n    var power_arr_last_value_str_last_value int = 0\n    var base_arr_last_value_str_last_value_str string = \"\"\n    var power_arr_last_value_str_last_value_str string = \"\"\n    var base_arr_last_value_str_last_value_str_len int = 0\n    var power_arr_last_value_str_last_value_str_len int = 0\n    var base_arr_last_value_str_last_value_str_index int = 0\n   ",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    var base_str string\n    var base_str_len int\n    var base_str_int int\n    var base_str_int_sum int\n\n    sum = 0\n    base_str = fmt.Sprintf(\"%d\", base)\n    base_str_len = len(base_str)\n    base_str_int = 0\n    base_str_int_sum = 0\n\n    for i := 0; i < power; i++ {\n        for j := 0; j < base_str_len; j++ {\n            base_str_int = int(base_str[j] - '0')\n            base_str_int_sum += base_str_int\n        }\n        sum += base_str_int_sum\n        base_str_int_sum = 0\n    }\n\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    for _, c := range base_str {\n        sum += int(c - '0')\n    }\n    for i := 1; i < power; i++ {\n        var carry int = 0\n        var new_sum int = 0\n        for j := len(base_str) - 1; j >= 0; j-- {\n            var digit int = int(base_str[j] - '0')\n            var product int = digit * sum + carry\n            var new_digit int = product % 10\n            carry = product / 10\n            new_sum += new_digit\n        }\n        if carry > 0 {\n            var carry_str string = fmt.Sprintf(\"%d\", carry)\n            for _, c := range carry_str {\n                new_sum += int(c - '0')\n            }\n        }\n        sum = new_sum\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_int_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_int_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_str_len; j++ {\n            var tmp int = base_int_arr[j] * base + carry\n            base_int_arr[j] = tmp % 10\n            carry = tmp / 10\n        }\n        for carry > 0 {\n            base_int_arr = append(base_int_arr, carry % 10)\n            carry /= 10\n        }\n    }\n    for i := 0; i < len(base_int_arr); i++ {\n        sum += base_int_arr[i]\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_len int = len(base_str)\n    var power_len int = len(power_str)\n    var base_arr []int = make([]int, base_len)\n    var power_arr []int = make([]int, power_len)\n    var base_arr_len int = len(base_arr)\n    var power_arr_len int = len(power_arr)\n    var base_arr_i int = 0\n    var power_arr_i int = 0\n    var base_arr_j int = 0\n    var power_arr_j int = 0\n    var base_arr_k int = 0\n    var power_arr_k int = 0\n    var base_arr_l int = 0\n    var power_arr_l int = 0\n    var base_arr_m int = 0\n    var power_arr_m int = 0\n    var base_arr_n int = 0\n    var power_arr_n int = 0\n    var base_arr_o int = 0\n    var power_arr_o int = 0\n    var base_arr_p int = 0\n    var power_arr_p int = 0\n    var base_arr_q int = 0\n    var power_arr_q int = 0\n    var base_arr_r int = 0\n    var power_arr_r int = 0\n    var base_arr_s int = 0\n    var power_arr_s int = 0\n    var base_arr_t int = 0\n    var power_arr_t int = 0\n    var base_arr_u int = 0\n    var power_arr_u int = 0\n    var base_arr_v int = 0\n    var power_arr_v int = 0\n    var base_arr_w int = 0\n    var power_arr_w int = 0\n    var base_arr_x int = 0\n    var power_arr_x int = 0\n    var base_arr_y int = 0\n    var power_arr_y int =",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_str_len int = len(base_str)\n    var power_str_len int = len(power_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    var power_str_arr []int = make([]int, power_str_len)\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n   ",
    "    var sum int\n    for base > 0 {\n        sum += base % 10\n        base /= 10\n    }\n    if power == 1 {\n        return sum\n    }\n    return power_base_sum(sum, power - 1)\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_len; j++ {\n            var tmp int = base_arr[j] * base + carry\n            base_arr[j] = tmp % 10\n            carry = tmp / 10\n        }\n        for carry > 0 {\n            base_arr = append(base_arr, carry % 10)\n            carry /= 10\n        }\n    }\n    for _, v := range base_arr {\n        sum += v\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_str_len; j++ {\n            var tmp int = base_arr[j] * base + carry\n            base_arr[j] = tmp % 10\n            carry = tmp / 10\n        }\n        for carry > 0 {\n            base_arr = append(base_arr, carry % 10)\n            carry /= 10\n        }\n    }\n    for i := 0; i < len(base_arr); i++ {\n        sum += base_arr[i]\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_int_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_int_arr[i] = int(base_str[i] - '0')\n    }\n    var base_int_arr_len int = len(base_int_arr)\n    var base_int_arr_pow []int = make([]int, base_int_arr_len)\n    for i := 0; i < base_int_arr_len; i++ {\n        base_int_arr_pow[i] = base_int_arr[i]\n    }\n    for i := 1; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_int_arr_len; j++ {\n            var temp int = base_int_arr_pow[j] * base_int_arr[j] + carry\n            base_int_arr_pow[j] = temp % 10\n            carry = temp / 10\n        }\n        if carry > 0 {\n            base_int_arr_pow = append(base_int_arr_pow, carry)\n        }\n    }\n    for i := 0; i < len(base_int_arr_pow); i++ {\n        sum += base_int_arr_pow[i]\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result = result / 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_len; j++ {\n            var tmp int = base_arr[j] * base + carry\n            base_arr[j] = tmp % 10\n            carry = tmp / 10\n        }\n\n        for carry > 0 {\n            base_arr = append(base_arr, carry % 10)\n            carry /= 10\n        }\n\n        base_len = len(base_arr)\n    }\n\n    for i := 0; i < base_len; i++ {\n        sum += base_arr[i]\n    }\n\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_int int = 0\n    var power_int int = 1\n    for i := 0; i < power; i++ {\n        power_int *= base\n    }\n    for i := 0; i < len(base_str); i++ {\n        fmt.Sscanf(base_str[i:i+1], \"%d\", &base_int)\n        sum += base_int\n    }\n    return sum * power_int\n}\n",
    "    var sum int\n    var base_str string\n    var power_str string\n    base_str = fmt.Sprintf(\"%d\", base)\n    power_str = fmt.Sprintf(\"%d\", power)\n    for _, c := range base_str {\n        sum += int(c - '0')\n    }\n    for i := 1; i < power; i++ {\n        var carry int\n        for j := len(base_str) - 1; j >= 0; j-- {\n            var digit int\n            digit = int(base_str[j] - '0')\n            digit = digit * base + carry\n            carry = digit / 10\n            digit = digit % 10\n            base_str = base_str[:j] + fmt.Sprintf(\"%d\", digit) + base_str[j+1:]\n        }\n        if carry > 0 {\n            base_str = fmt.Sprintf(\"%d\", carry) + base_str\n        }\n        for _, c := range base_str {\n            sum += int(c - '0')\n        }\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    var base_arr_len int = len(base_arr)\n    var base_arr_idx int = 0\n    var base_arr_val int = 0\n    var base_arr_sum int = 0\n    var base_arr_sum_str string = \"\"\n    var base_arr_sum_str_len int = 0\n    var base_arr_sum_str_idx int = 0\n    var base_arr_sum_str_val int = 0\n    var base_arr_sum_str_val_int int = 0\n    var base_arr_sum_str_val_int_str string = \"\"\n    var base_arr_sum_str_val_int_str_len int = 0\n    var base_arr_sum_str_val_int_str_idx int = 0\n    var base_arr_sum_str_val_int_str_val int = 0\n    var base_arr_sum_str_val_int_str_val_int int = 0\n    var base_arr_sum_str_val_int_str_val_int_str string = \"\"\n    var base_arr_sum_str_val_int_str_val_int_str_len int = 0\n    var base_arr_sum_str_val_int_str_val_int_str_idx int = 0\n    var base_arr_sum_str_val_int_str_val_int_str_val int = 0\n    var base_arr_sum_str_val_int_str_val_int_str_val_int int = 0\n    var base_arr_sum_str_val_int_str_val_int_str_val_int_str string = \"\"\n    var base_arr_sum_str_val_int_str_val_int_str_val_int_str_len int = 0\n    var base_arr_sum_str_val_int_str_val_int_str_",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    return sum_digits(result)\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result = result * base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum = sum + result % 10\n        result = result / 10\n    }\n    return sum\n}\n",
    "    var sum int\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 1; i <= power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_len int = len(base_str)\n    var power_len int = len(power_str)\n    var base_arr []int = make([]int, base_len)\n    var power_arr []int = make([]int, power_len)\n    var base_arr_len int = len(base_arr)\n    var power_arr_len int = len(power_arr)\n    var base_arr_index int = 0\n    var power_arr_index int = 0\n    var base_arr_value int = 0\n    var power_arr_value int = 0\n    var base_arr_value_str string = \"\"\n    var power_arr_value_str string = \"\"\n    var base_arr_value_str_len int = 0\n    var power_arr_value_str_len int = 0\n    var base_arr_value_str_index int = 0\n    var power_arr_value_str_index int = 0\n    var base_arr_value_str_value int = 0\n    var power_arr_value_str_value int = 0\n    var base_arr_value_str_value_str string = \"\"\n    var power_arr_value_str_value_str string = \"\"\n    var base_arr_value_str_value_str_len int = 0\n    var power_arr_value_str_value_str_len int = 0\n    var base_arr_value_str_value_str_index int = 0\n    var power_arr_value_str_value_str_index int = 0\n    var base_arr_value_str_value_str_value int = 0\n    var power_arr_value_str_value_str_value int = 0\n    var base_arr_value_str_value_str_value_str string = \"\"\n    var power_arr_value_str_value_str_value_str string = \"\"\n    var base_arr_value_str_value_str_value_str_len int = 0",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n"
  ]
}