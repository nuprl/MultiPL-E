{
  "name": "mbpp_724_power_base_sum",
  "language": "go_test.go",
  "prompt": "package power_base_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunc power_base_sum(base int, power int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "reworded",
  "tests": "func TestPower_Base_Sum(t *testing.T) {\n  candidate := power_base_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 100), expected: 115 },\n     { actual: candidate(8, 10), expected: 37 },\n     { actual: candidate(8, 15), expected: 62 },\n     { actual: candidate(3, 3), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_str_arr)\n    var base_arr_sum int = 0\n    for i := 0; i < base_arr_len; i++ {\n        base_arr_sum += base_str_arr[i]\n    }\n    sum = base_arr_sum\n    for i := 1; i < power; i++ {\n        sum += base_arr_sum\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_str_arr)\n    var base_arr []int = make([]int, base_arr_len)\n    for i := 0; i < base_arr_len; i++ {\n        base_arr[i] = base_str_arr[i]\n    }\n    for i := 1; i < power; i++ {\n        var base_arr_len int = len(base_arr)\n        var base_arr_new []int = make([]int, base_arr_len)\n        for i := 0; i < base_arr_len; i++ {\n            base_arr_new[i] = base_arr[i]\n        }\n        for i := 0; i < base_arr_len; i++ {\n            var base_arr_new_len int = len(base_arr_new)\n            var base_arr_new_new []int = make([]int, base_arr_new_len)\n            for i := 0; i < base_arr_new_len; i++ {\n                base_arr_new_new[i] = base_arr_new[i]\n            }\n            for j := 0; j < base_arr_new_len; j++ {\n                base_arr_new_new[j] = base_arr_new_new[j] * base_str_arr[i]\n            }\n            for j := 0; j < base_arr_new_len; j++ {\n                if base_arr_new_new[j] > 9 {\n                    var base_arr_new_new_len int = len(base_arr_new_new)\n                    var base_arr_new_new_new []int = make",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_str_len int = len(base_str)\n    var power_str_len int = len(power_str)\n    var base_str_arr []string = make([]string, base_str_len)\n    var power_str_arr []string = make([]string, power_str_len)\n    var base_str_arr_len int = len(base_str_arr)\n    var power_str_arr_len int = len(power_str_arr)\n    var base_str_arr_i int = 0\n    var power_str_arr_i int = 0\n    var base_str_arr_i_str string = \"\"\n    var power_str_arr_i_str string = \"\"\n    var base_str_arr_i_int int = 0\n    var power_str_arr_i_int int = 0\n\n    for base_str_arr_i < base_str_arr_len {\n        base_str_arr[base_str_arr_i] = string(base_str[base_str_arr_i])\n        base_str_arr_i++\n    }\n\n    for power_str_arr_i < power_str_arr_len {\n        power_str_arr[power_str_arr_i] = string(power_str[power_str_arr_i])\n        power_str_arr_i++\n    }\n\n    for base_str_arr_i = 0; base_str_arr_i < base_str_arr_len; base_str_arr_i++ {\n        base_str_arr_i_str = base_str_arr[base_str_arr_i]\n        fmt.Sscanf(base_str_arr_i_str, \"%d\", &base_str_arr_i_int)\n        sum += base_str_arr_i_int\n    }\n\n    for power_str_arr_i = 0; power_str_arr_i < power_str_arr_len;",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i:=0; i<power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_int int = 0\n    for i := 0; i < power; i++ {\n        for j := 0; j < len(base_str); j++ {\n            base_int, _ = strconv.Atoi(string(base_str[j]))\n            sum += base_int\n        }\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n"
  ]
}