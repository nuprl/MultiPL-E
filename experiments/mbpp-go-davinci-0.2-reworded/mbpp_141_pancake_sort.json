{
  "name": "mbpp_141_pancake_sort",
  "language": "go_test.go",
  "prompt": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "reworded",
  "tests": "func TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n",
    "    if len(nums) <= 1 {\n        return nums\n    }\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    // Find the index of the largest element.\n    var max_index int\n    for i, v := range nums {\n        if v > nums[max_index] {\n            max_index = i\n        }\n    }\n\n    // Flip the largest element to the front.\n    flip(nums, max_index)\n\n    // Flip the largest element to the back.\n    flip(nums, len(nums) - 1)\n\n    // If there are more than 2 elements, recurse.\n    if len(nums) > 2 {\n        pancake_sort(nums[:len(nums) - 1])\n    }\n\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := find_max(nums[:i])\n        if max_index != i-1 {\n            flip(nums, max_index)\n            flip(nums, i-1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i - 1 {\n            flip(nums, max)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    // Find the index of the largest element.\n    var max_index int\n    for i, num := range nums {\n        if num > nums[max_index] {\n            max_index = i\n        }\n    }\n\n    // Flip the largest element to the front.\n    nums = flip(nums, max_index)\n    nums = flip(nums, len(nums) - 1)\n\n    // If there are more than two elements, recurse.\n    if len(nums) > 2 {\n        nums = pancake_sort(nums[:len(nums) - 1])\n    }\n\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    // Find the largest element in the list.\n    // Flip the list so that the largest element is at the front.\n    // Flip the list so that the largest element is at the back.\n    // Repeat until the list is sorted.\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i >= 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i - 1 {\n            flip(nums, max)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i >= 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := nums[0]\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > max {\n                max = nums[j]\n                max_index = j\n            }\n        }\n        if max_index != i {\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index + 1)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i-1 {\n            flip(nums, max)\n            flip(nums, i-1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            nums = flip(nums, max_index)\n            nums = flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := nums[0]\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > max {\n                max = nums[j]\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i >= 0; i-- {\n        max_index := i\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        // Find the index of the largest number.\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n\n        // Reverse the list from 0 to max_index.\n        for j := 0; j < max_index; j++ {\n            nums[j], nums[max_index] = nums[max_index], nums[j]\n        }\n\n        // Reverse the list from 0 to i.\n        for j := 0; j < i; j++ {\n            nums[j], nums[i] = nums[i], nums[j]\n        }\n    }\n\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i-1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i-1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := nums[0]\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > max {\n                max = nums[j]\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := i - 1\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i-1)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i-1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i >= 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        reverse(nums, max_index)\n        reverse(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_idx := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_idx] {\n                max_idx = j\n            }\n        }\n        flip(nums, max_idx)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index == i {\n            continue\n        }\n        if max_index > 0 {\n            nums = flip(nums, max_index)\n        }\n        nums = flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i-1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i >= 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i >= 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    // The first element is the largest.\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        // Flip the largest element to the top.\n        flip(nums, max)\n        // Flip the largest element to the bottom.\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i-1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i >= 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums)-1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i >= 0; i-- {\n        max := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := i\n        for j := i - 1; j >= 0; j-- {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := i\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n",
    "    // Find the largest number in the list.\n    largest := 0\n    for i := 0; i < len(nums); i++ {\n        if nums[i] > nums[largest] {\n            largest = i\n        }\n    }\n    // Flip the largest number to the front.\n    flip(nums, largest)\n    // Flip the largest number to the back.\n    flip(nums, len(nums) - 1)\n    // If there are more than two numbers in the list,\n    // sort the rest of the list.\n    if len(nums) > 2 {\n        pancake_sort(nums[:len(nums) - 1])\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := find_max_index(nums[:i])\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i-1)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            nums = flip(nums, max_index)\n            nums = flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i >= 0; i-- {\n        max := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i-1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n",
    "    // TODO: implement pancake_sort\n    return nums\n}\n",
    "    for i := 0; i < len(nums); i++ {\n        max := 0\n        for j := 0; j < len(nums) - i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, len(nums) - i - 1)\n    }\n    return nums\n}\n",
    "    for i := len(nums) - 1; i >= 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n",
    "    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n"
  ]
}