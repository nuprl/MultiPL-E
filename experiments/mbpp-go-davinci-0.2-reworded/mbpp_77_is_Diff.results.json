{
  "name": "mbpp_77_is_Diff",
  "language": "go_test.go",
  "prompt": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py",
  "prompt_terminology": "reworded",
  "tests": "func TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpqwox3hov_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpeo5e_4ew_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for n > 0 {\n        odd_sum += n % 10\n        n /= 10\n        even_sum += n % 10\n        n /= 10\n    }\n    return odd_sum - even_sum == 0 || odd_sum - even_sum == 11 || odd_sum - even_sum == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd, even := 0, 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 11 {\n        return true\n    }\n    if n < 0 {\n        n = -n\n    }\n    if n < 11 {\n        return false\n    }\n    return is_Diff(n - 11)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.018s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 11 {\n        return true\n    }\n    if n < 0 {\n        return is_Diff(-n)\n    }\n    return is_Diff(n - 11)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517230,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170388 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x546229, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:9 +0x9b fp=0xc020170398 sp=0xc020170390 pc=0x50a69b\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201703b8 sp=0xc020170398 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc0201703d8 sp=0xc0201703b8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201703f8 sp=0xc0201703d8 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170418 sp=0xc0201703f8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc020170438 sp=0xc020170418 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170458 sp=0xc020170438 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc020170478 sp=0xc020170458 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170498 sp=0xc020170478 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201704b8 sp=0xc020170498 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc0201704d8 sp=0xc0201704b8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201704f8 sp=0xc0201704d8 pc=0x50",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return true\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    var sum int\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp0444b0fl_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for n > 0 {\n        odd_sum += n % 10\n        n /= 10\n        even_sum += n % 10\n        n /= 10\n    }\n    return odd_sum - even_sum == 0 || odd_sum - even_sum == 11 || odd_sum - even_sum == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdpc3a84d_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for n > 0 {\n        odd_sum += n % 10\n        n /= 10\n        even_sum += n % 10\n        n /= 10\n    }\n    return odd_sum - even_sum == 0 || odd_sum - even_sum == 11 || odd_sum - even_sum == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    sum_odd := 0\n    sum_even := 0\n    for n > 0 {\n        sum_odd += n % 10\n        n /= 10\n        sum_even += n % 10\n        n /= 10\n    }\n    return sum_odd - sum_even == 0 || sum_odd - sum_even == 11 || sum_odd - sum_even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n < 10 {\n        return false\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpklznze10_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdpc3a84d_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpeo5e_4ew_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    var sum1, sum2 int\n    for i := 0; i < len(fmt.Sprintf(\"%d\", n)); i++ {\n        if i % 2 == 0 {\n            sum1 += int(fmt.Sprintf(\"%d\", n)[i]) - 48\n        } else {\n            sum2 += int(fmt.Sprintf(\"%d\", n)[i]) - 48\n        }\n    }\n    return sum1 - sum2 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170388 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x546229, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 5 [running]:\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:9 +0xe7 fp=0xc020170398 sp=0xc020170390 pc=0x50a6e7\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc0201703b8 sp=0xc020170398 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc0201703d8 sp=0xc0201703b8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc0201703f8 sp=0xc0201703d8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc020170418 sp=0xc0201703f8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc020170438 sp=0xc020170418 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc020170458 sp=0xc020170438 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc020170478 sp=0xc020170458 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc020170498 sp=0xc020170478 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc0201704b8 sp=0xc020170498 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc0201704d8 sp=0xc0201704b8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc0201704f8 sp=0xc0201704d8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return true\n    }\n    if n < 10 {\n        return false\n    }\n    var sum int\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return is_Diff(sum)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpmef38_jo_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpd0iql4rz_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var sum1, sum2 int\n    for n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 == sum2\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var sum_odd, sum_even int\n    for i := 0; n > 0; i++ {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n    }\n    return sum_odd - sum_even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    var sum_odd, sum_even int\n    for i := 0; i < len(fmt.Sprintf(\"%d\", n)); i++ {\n        if i % 2 == 0 {\n            sum_odd += int(fmt.Sprintf(\"%d\", n)[i] - '0')\n        } else {\n            sum_even += int(fmt.Sprintf(\"%d\", n)[i] - '0')\n        }\n    }\n    return (sum_odd - sum_even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.020s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 11 {\n        return true\n    }\n    if n < 0 {\n        return is_Diff(-n)\n    }\n    return is_Diff(n - 11)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517230,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170388 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x546229, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:9 +0x9b fp=0xc020170398 sp=0xc020170390 pc=0x50a69b\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201703b8 sp=0xc020170398 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc0201703d8 sp=0xc0201703b8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201703f8 sp=0xc0201703d8 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170418 sp=0xc0201703f8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc020170438 sp=0xc020170418 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170458 sp=0xc020170438 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc020170478 sp=0xc020170458 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170498 sp=0xc020170478 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201704b8 sp=0xc020170498 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc0201704d8 sp=0xc0201704b8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201704f8 sp=0xc0201704d8 pc=0x50",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    var sum1, sum2 int\n    for n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := (n / 10) % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpcey7uy9e_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return true\n    }\n    if n < 1000 {\n        return false\n    }\n    if n < 10000 {\n        return true\n    }\n    if n < 100000 {\n        return false\n    }\n    if n < 1000000 {\n        return true\n    }\n    if n < 10000000 {\n        return false\n    }\n    if n < 100000000 {\n        return true\n    }\n    if n < 1000000000 {\n        return false\n    }\n    if n < 10000000000 {\n        return true\n    }\n    if n < 100000000000 {\n        return false\n    }\n    if n < 1000000000000 {\n        return true\n    }\n    if n < 10000000000000 {\n        return false\n    }\n    if n < 100000000000000 {\n        return true\n    }\n    if n < 1000000000000000 {\n        return false\n    }\n    if n < 10000000000000000 {\n        return true\n    }\n    if n < 100000000000000000 {\n        return false\n    }\n    if n < 1000000000000000000 {\n        return true\n    }\n    if n < 10000000000000000000 {\n        return false\n    }\n    if n < 100000000000000000000 {\n        return true\n    }\n    if n < 1000000000000000000000 {\n        return false\n    }\n    if n < 10000000000000000000000 {\n        return true\n    }\n    if n < 100000000000000000000000 {\n        return false\n    }\n    if n < 1000000000000000000000000 {\n        return true\n    }\n    if n < 10000000000000000000000000 {\n        return false\n    }\n    if n < 100000000000000000000000000 {\n        return true\n    }\n    if n < 1000000000000000000000000000 {\n        return false\n    }\n    if n < 10000000000000000000000000000 {\n        return true\n    }\n    if n < 100000000000000000000000000000 {\n        return false\n    }\n    if n < 1000000000000000000000000000000 {\n        return true\n    }\n    if n < 10000000000000000000000000000000 {\n        return false\n    }\n    if n < 100000000000000000000000000000000 {\n        return true\n    }\n    if n < 100000000000000000000000000\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122604,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdmg1gfp8_test.go:107:6: expected '(', found TestIs_Diff\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    s := fmt.Sprintf(\"%d\", n)\n    l := len(s)\n    if l == 1 {\n        return false\n    }\n    for i := 0; i < l/2; i++ {\n        if s[i] != s[l-i-1] {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__0 (0.00s)\n        tmpyvq6btyn_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpyvq6btyn_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.019s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return (odd + even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n < 0 {\n        n = -n\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        if n % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpmlpyc5zk_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdpc3a84d_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n\n    if n < 10 {\n        return false\n    }\n\n    odd := n % 10\n    even := 0\n\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return (odd + even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmprtrqt75__test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    odd_sum := 0\n    even_sum := 0\n    for i := 0; i < len(n); i++ {\n        if i % 2 == 0 {\n            odd_sum += n[i]\n        } else {\n            even_sum += n[i]\n        }\n    }\n    return odd_sum - even_sum\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb8y8u0ba_test.go:12:24: invalid argument n (type int) for len\n/tmp/tmpb8y8u0ba_test.go:14:25: invalid operation: n[i] (type int does not support indexing)\n/tmp/tmpb8y8u0ba_test.go:16:26: invalid operation: n[i] (type int does not support indexing)\n/tmp/tmpb8y8u0ba_test.go:19:20: cannot use odd_sum - even_sum (type int) as type bool in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n % 11 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for n > 0 {\n        odd_sum += n % 10\n        n /= 10\n        even_sum += n % 10\n        n /= 10\n    }\n    return odd_sum - even_sum == 0 || odd_sum - even_sum == 11 || odd_sum - even_sum == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        if n % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpmlpyc5zk_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpeo5e_4ew_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return n % 11 == 0\n    }\n    if n < 1000 {\n        return (n / 100 - n / 10 % 10) == (n / 10 % 10 - n % 10)\n    }\n    if n < 10000 {\n        return (n / 1000 - n / 100 % 10) == (n / 100 % 10 - n / 10 % 10) &&\n            (n / 100 % 10 - n / 10 % 10) == (n / 10 % 10 - n % 10)\n    }\n    if n < 100000 {\n        return (n / 10000 - n / 1000 % 10) == (n / 1000 % 10 - n / 100 % 10) &&\n            (n / 1000 % 10 - n / 100 % 10) == (n / 100 % 10 - n / 10 % 10) &&\n            (n / 100 % 10 - n / 10 % 10) == (n / 10 % 10 - n % 10)\n    }\n    if n < 1000000 {\n        return (n / 100000 - n / 10000 % 10) == (n / 10000 % 10 - n / 1000 % 10) &&\n            (n / 10000 % 10 - n / 1000 % 10) == (n / 1000 % 10 - n / 100 % 10) &&\n            (n / 1000 % 10 - n / 100 % 10) == (n / 100 % 10 - n / 10 % 10) &&\n            (n / 100 % 10 - n / 10 % 10) == (n / 10 % 10 - n % 10)\n    }\n    if n < 10000000 {\n        return (n / 1000000 - n / 100000 % 10) == (n / 100000 % 10 - n / 10000 % 10) &&\n            (n / 100000 % 10 - n / 10000 % 10) == (n / 10000 % 10 - n / 1000 % 10) &&\n            (n / 10000 % 10 - n / 1000 % 10) == (n / 1000 % 10 - n / 100 % 10) &&\n            (n / 1000 % 10 - n / 100 % 10) == (n / 100 % 10 - n / 10 % 10) &&\n            (n / 100\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122606,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4h82gp8__test.go:42:21: expected ')', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for n > 0 {\n        odd_sum += n % 10\n        n /= 10\n        even_sum += n % 10\n        n /= 10\n    }\n    return odd_sum - even_sum == 0 || odd_sum - even_sum == 11 || odd_sum - even_sum == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return (n % 11) == 0\n    }\n    if n < 1000 {\n        return (n % 11) == 0\n    }\n    if n < 10000 {\n        return (n % 11) == 0\n    }\n    if n < 100000 {\n        return (n % 11) == 0\n    }\n    if n < 1000000 {\n        return (n % 11) == 0\n    }\n    if n < 10000000 {\n        return (n % 11) == 0\n    }\n    if n < 100000000 {\n        return (n % 11) == 0\n    }\n    if n < 1000000000 {\n        return (n % 11) == 0\n    }\n    if n < 10000000000 {\n        return (n % 11) == 0\n    }\n    if n < 100000000000 {\n        return (n % 11) == 0\n    }\n    if n < 1000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 10000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 100000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 1000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 10000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 100000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 1000000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 10000000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 100000000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 1000000000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 10000000000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 100000000000000000000000 {\n        return (n % 11) == 0\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122606,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5b5ffsmn_test.go:85:6: expected '(', found TestIs_Diff\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    n /= 10\n    even := n % 10\n    n /= 10\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n % 11 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 11 {\n        return true\n    }\n    if n < 0 {\n        return is_Diff(-n)\n    }\n    return is_Diff(n - 11)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517230,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170388 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x546229, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:9 +0x9b fp=0xc020170398 sp=0xc020170390 pc=0x50a69b\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201703b8 sp=0xc020170398 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc0201703d8 sp=0xc0201703b8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201703f8 sp=0xc0201703d8 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170418 sp=0xc0201703f8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc020170438 sp=0xc020170418 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170458 sp=0xc020170438 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc020170478 sp=0xc020170458 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170498 sp=0xc020170478 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201704b8 sp=0xc020170498 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc0201704d8 sp=0xc0201704b8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201704f8 sp=0xc0201704d8 pc=0x50",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    var sum_odd, sum_even int\n    for i := 0; i < len(fmt.Sprintf(\"%d\", n)); i++ {\n        if i % 2 == 0 {\n            sum_odd += int(fmt.Sprintf(\"%d\", n)[i] - '0')\n        } else {\n            sum_even += int(fmt.Sprintf(\"%d\", n)[i] - '0')\n        }\n    }\n    return is_Diff(sum_odd - sum_even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160368 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x54722b, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\nfmt.(*fmt).fmtInteger(0xc000126d40, 0x3, 0xa, 0x6400000001, 0x5479bb, 0x11)\n\t/home/a.guha/.conda/envs/polyglot/go/src/fmt/format.go:194 +0x5b7 fp=0xc020160378 sp=0xc020160370 pc=0x4b14d7\nfmt.(*pp).fmtInteger(0xc000126d00, 0x3, 0x6400000001)\n\t/home/a.guha/.conda/envs/polyglot/go/src/fmt/print.go:379 +0x1fc fp=0xc0201603b8 sp=0xc020160378 pc=0x4b445c\nfmt.(*pp).printArg(0xc000126d00, 0x51c2c0, 0x60f178, 0xc000000064)\n\t/home/a.guha/.conda/envs/polyglot/go/src/fmt/print.go:672 +0x94b fp=0xc020160450 sp=0xc0201603b8 pc=0x4b6feb\nfmt.(*pp).doPrintf(0xc000126d00, 0x545286, 0x2, 0xc0201605f8, 0x1, 0x1)\n\t/home/a.guha/.conda/envs/polyglot/go/src/fmt/print.go:1026 +0x168 fp=0xc020160540 sp=0xc020160450 pc=0x4b9fa8\nfmt.Sprintf(0x545286, 0x2, 0xc0201605f8, 0x1, 0x1, 0xc000126d00, 0xc00012c088)\n\t/home/a.guha/.conda/envs/polyglot/go/src/fmt/print.go:219 +0x66 fp=0xc020160598 sp=0xc020160540 pc=0x4b3466\ncommand-line-arguments_test.is_Diff(0x3, 0x2)\n\t/tmp/tmpdfwfdvwi_test.go:20 +0xda fp=0xc020160618 sp=0xc020160598 pc=0x50a6da\ncommand-line-arguments_test.is_Diff(0x3, 0x2)\n\t/tmp/tmpdfwfdvwi_test.go:27 +0x23b fp=0xc020160698 sp=0xc020160618 pc=0x50a83b\ncommand-line-arguments_test.is_Diff(0x3, 0x2)\n\t/tmp/tmpdfwfdvwi_test.go:27 +0x23b fp=0xc020160718 sp=0xc020160698 pc=0x50a83b\ncommand-line-arguments_test.is_Diff(0x3, 0x2)\n\t/tmp/tmpdfwfdvwi_test.go:27 +0x23b fp=0xc020160798 sp=0xc020160718 pc=0x50a83b\ncommand-line-arguments_test.is_Diff(0x3, 0x2)\n\t/tmp/tmpdfwfdvwi_test.go:27 +0x23b fp=0xc020160818 sp=0xc020160798 pc=0x50a83b\ncommand-line-arguments_test.is_Diff(0x3, 0x2)\n\t/tmp/tmp",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdpc3a84d_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170388 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x546229, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 5 [running]:\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:9 +0xe7 fp=0xc020170398 sp=0xc020170390 pc=0x50a6e7\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc0201703b8 sp=0xc020170398 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc0201703d8 sp=0xc0201703b8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc0201703f8 sp=0xc0201703d8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc020170418 sp=0xc0201703f8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc020170438 sp=0xc020170418 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc020170458 sp=0xc020170438 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc020170478 sp=0xc020170458 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc020170498 sp=0xc020170478 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc0201704b8 sp=0xc020170498 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc0201704d8 sp=0xc0201704b8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0xc0201704f8 sp=0xc0201704d8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpw2b0lt4m_test.go:26 +0xb1 fp=0",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 11 {\n        return true\n    }\n    if n < 11 {\n        return false\n    }\n    return is_Diff(n - 11)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.017s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdpc3a84d_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for n > 0 {\n        odd_sum += n % 10\n        n /= 10\n        even_sum += n % 10\n        n /= 10\n    }\n    return odd_sum - even_sum == 0 || odd_sum - even_sum == 11 || odd_sum - even_sum == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 11 {\n        return true\n    }\n    if n < 0 {\n        n = n * -1\n    }\n    if n < 11 {\n        return false\n    }\n    return is_Diff(n - 11)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.018s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return is_Diff(sum)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp7i7nmsml_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 11 {\n        return true\n    }\n    n = n % 11\n    if n == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    var sum1, sum2 int\n    for n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdpc3a84d_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 11 {\n        return true\n    }\n    if n < 0 {\n        n = -n\n    }\n    if n < 11 {\n        return false\n    }\n    return is_Diff(n - 11)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.018s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even = even + n % 10\n        n = n / 10\n        odd = odd + n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpk2c3398h_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.020s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdpc3a84d_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 11 {\n        return true\n    }\n    if n < 0 {\n        return is_Diff(-n)\n    }\n    return is_Diff(n - 11)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517230,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170388 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x546229, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:9 +0x9b fp=0xc020170398 sp=0xc020170390 pc=0x50a69b\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201703b8 sp=0xc020170398 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc0201703d8 sp=0xc0201703b8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201703f8 sp=0xc0201703d8 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170418 sp=0xc0201703f8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc020170438 sp=0xc020170418 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170458 sp=0xc020170438 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc020170478 sp=0xc020170458 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170498 sp=0xc020170478 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201704b8 sp=0xc020170498 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc0201704d8 sp=0xc0201704b8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201704f8 sp=0xc0201704d8 pc=0x50",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd += n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpuq8yjb4n_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp56uahnd4_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n < 0 {\n        n = -n\n    }\n    odd, even := 0, 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160388 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x546229, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp5rtgj085_test.go:9 +0xe7 fp=0xc020160398 sp=0xc020160390 pc=0x50a6e7\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp5rtgj085_test.go:26 +0xb1 fp=0xc0201603b8 sp=0xc020160398 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp5rtgj085_test.go:26 +0xb1 fp=0xc0201603d8 sp=0xc0201603b8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp5rtgj085_test.go:26 +0xb1 fp=0xc0201603f8 sp=0xc0201603d8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp5rtgj085_test.go:26 +0xb1 fp=0xc020160418 sp=0xc0201603f8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp5rtgj085_test.go:26 +0xb1 fp=0xc020160438 sp=0xc020160418 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp5rtgj085_test.go:26 +0xb1 fp=0xc020160458 sp=0xc020160438 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp5rtgj085_test.go:26 +0xb1 fp=0xc020160478 sp=0xc020160458 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp5rtgj085_test.go:26 +0xb1 fp=0xc020160498 sp=0xc020160478 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp5rtgj085_test.go:26 +0xb1 fp=0xc0201604b8 sp=0xc020160498 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp5rtgj085_test.go:26 +0xb1 fp=0xc0201604d8 sp=0xc0201604b8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp5rtgj085_test.go:26 +0xb1 fp=0xc0201604f8 sp=0xc0201604d8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp5rtgj085_test.go:26 +0xb1 fp=",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    sum_even := 0\n    sum_odd := 0\n    for n > 0 {\n        sum_even += n % 10\n        n /= 10\n        sum_odd += n % 10\n        n /= 10\n    }\n    return (sum_even - sum_odd) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.018s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 11 {\n        return true\n    }\n    if n < 0 {\n        return is_Diff(-n)\n    }\n    return is_Diff(n - 11)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517230,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170388 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x546229, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:9 +0x9b fp=0xc020170398 sp=0xc020170390 pc=0x50a69b\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201703b8 sp=0xc020170398 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc0201703d8 sp=0xc0201703b8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201703f8 sp=0xc0201703d8 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170418 sp=0xc0201703f8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc020170438 sp=0xc020170418 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170458 sp=0xc020170438 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc020170478 sp=0xc020170458 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170498 sp=0xc020170478 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201704b8 sp=0xc020170498 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc0201704d8 sp=0xc0201704b8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201704f8 sp=0xc0201704d8 pc=0x50",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpd0iql4rz_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return (n % 11) == 0\n    }\n    if n < 1000 {\n        return ((n / 100) - (n % 10)) % 11 == 0\n    }\n    if n < 10000 {\n        return ((n / 1000) - ((n / 100) % 10) + (n % 10)) % 11 == 0\n    }\n    if n < 100000 {\n        return ((n / 10000) - ((n / 1000) % 10) + ((n / 100) % 10) - (n % 10)) % 11 == 0\n    }\n    if n < 1000000 {\n        return ((n / 100000) - ((n / 10000) % 10) + ((n / 1000) % 10) - ((n / 100) % 10) + (n % 10)) % 11 == 0\n    }\n    if n < 10000000 {\n        return ((n / 1000000) - ((n / 100000) % 10) + ((n / 10000) % 10) - ((n / 1000) % 10) + ((n / 100) % 10) - (n % 10)) % 11 == 0\n    }\n    if n < 100000000 {\n        return ((n / 10000000) - ((n / 1000000) % 10) + ((n / 100000) % 10) - ((n / 10000) % 10) + ((n / 1000) % 10) - ((n / 100) % 10) + (n % 10)) % 11 == 0\n    }\n    if n < 1000000000 {\n        return ((n / 100000000) - ((n / 10000000) % 10) + ((n / 1000000) % 10) - ((n / 100000) % 10) + ((n / 10000) % 10) - ((n / 1000) % 10) + ((n / 100) % 10) - (n % 10)) % 11 == 0\n    }\n    if n < 10000000000 {\n        return ((n / 1000000000) - ((n / 100000000) % 10) + ((n / 10000000)\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122606,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmseu9ap_test.go:47:76: expected ')', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for n > 0 {\n        odd_sum += n % 10\n        n /= 10\n        even_sum += n % 10\n        n /= 10\n    }\n    return odd_sum - even_sum == 0 || odd_sum - even_sum == 11 || odd_sum - even_sum == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdpc3a84d_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n % 11 == 0 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    var sum1, sum2 int\n    for n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 - sum2 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 11 {\n        return true\n    }\n    if n < 0 {\n        return is_Diff(-n)\n    }\n    return is_Diff(n - 11)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517230,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020170388 stack=[0xc020170000, 0xc040170000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x546229, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:9 +0x9b fp=0xc020170398 sp=0xc020170390 pc=0x50a69b\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201703b8 sp=0xc020170398 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc0201703d8 sp=0xc0201703b8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201703f8 sp=0xc0201703d8 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170418 sp=0xc0201703f8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc020170438 sp=0xc020170418 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170458 sp=0xc020170438 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc020170478 sp=0xc020170458 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x8, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc020170498 sp=0xc020170478 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffff8, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201704b8 sp=0xc020170498 pc=0x50a645\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmp__qz7743_test.go:19 +0x65 fp=0xc0201704d8 sp=0xc0201704b8 pc=0x50a665\ncommand-line-arguments_test.is_Diff(0xfffffffffffffffd, 0x0)\n\t/tmp/tmp__qz7743_test.go:17 +0x45 fp=0xc0201704f8 sp=0xc0201704d8 pc=0x50",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 11 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even = even + n % 10\n        n = n / 10\n        odd = odd + n % 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpeo5e_4ew_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return n % 11 == 0\n    }\n    return is_Diff(n / 10 - n % 10)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n % 11 == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    var even, odd int\n    for n > 0 {\n        even += n % 10\n        n /= 10\n        odd += n % 10\n        n /= 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122610,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0388 stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x546229, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpmxopt2kr_test.go:9 +0xe7 fp=0xc0201e0398 sp=0xc0201e0390 pc=0x50a6e7\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpmxopt2kr_test.go:26 +0xb1 fp=0xc0201e03b8 sp=0xc0201e0398 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpmxopt2kr_test.go:26 +0xb1 fp=0xc0201e03d8 sp=0xc0201e03b8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpmxopt2kr_test.go:26 +0xb1 fp=0xc0201e03f8 sp=0xc0201e03d8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpmxopt2kr_test.go:26 +0xb1 fp=0xc0201e0418 sp=0xc0201e03f8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpmxopt2kr_test.go:26 +0xb1 fp=0xc0201e0438 sp=0xc0201e0418 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpmxopt2kr_test.go:26 +0xb1 fp=0xc0201e0458 sp=0xc0201e0438 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpmxopt2kr_test.go:26 +0xb1 fp=0xc0201e0478 sp=0xc0201e0458 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpmxopt2kr_test.go:26 +0xb1 fp=0xc0201e0498 sp=0xc0201e0478 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpmxopt2kr_test.go:26 +0xb1 fp=0xc0201e04b8 sp=0xc0201e0498 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpmxopt2kr_test.go:26 +0xb1 fp=0xc0201e04d8 sp=0xc0201e04b8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpmxopt2kr_test.go:26 +0xb1 fp=0xc0201e04f8 sp=0xc0201e04d8 pc=0x50a6b1\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpmxopt2kr_test.go:26 +0xb1 fp=",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return (odd + even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdpc3a84d_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122608,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmplj75a1sf_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n    }\n    if n == 3 {\n        return false\n    }\n    if n == 4 {\n        return true\n    }\n    if n == 5 {\n        return false\n    }\n    if n == 6 {\n        return true\n    }\n    if n == 7 {\n        return false\n    }\n    if n == 8 {\n        return true\n    }\n    if n == 9 {\n        return false\n    }\n    if n == 10 {\n        return true\n    }\n    if n == 11 {\n        return false\n    }\n    if n == 12 {\n        return true\n    }\n    if n == 13 {\n        return false\n    }\n    if n == 14 {\n        return true\n    }\n    if n == 15 {\n        return false\n    }\n    if n == 16 {\n        return true\n    }\n    if n == 17 {\n        return false\n    }\n    if n == 18 {\n        return true\n    }\n    if n == 19 {\n        return false\n    }\n    if n == 20 {\n        return true\n    }\n    if n == 21 {\n        return false\n    }\n    if n == 22 {\n        return true\n    }\n    if n == 23 {\n        return false\n    }\n    if n == 24 {\n        return true\n    }\n    if n == 25 {\n        return false\n    }\n    if n == 26 {\n        return true\n    }\n    if n == 27 {\n        return false\n    }\n    if n == 28 {\n        return true\n    }\n    if n == 29 {\n        return false\n    }\n    if n == 30 {\n        return true\n    }\n    if n == 31 {\n        return false\n    }\n    if n == 32 {\n        return true\n    }\n    if n == 33 {\n        return false\n    }\n    if n == 34 {\n        return true\n    }\n    if n == 35 {\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122607,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp1vdzuqky_test.go:120:6: expected '(', found TestIs_Diff\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpqwox3hov_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdpc3a84d_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122608,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp7o9c5l35_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        if n % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpmlpyc5zk_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 11 {\n        return true\n    }\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return n % 11 == 0\n    }\n    if n < 1000 {\n        return (n / 100) - ((n % 100) / 10) + (n % 10) == 0\n    }\n    if n < 10000 {\n        return (n / 1000) - ((n % 1000) / 100) + ((n % 1000) % 100) / 10 - (n % 10) == 0\n    }\n    if n < 100000 {\n        return (n / 10000) - ((n % 10000) / 1000) + ((n % 10000) % 1000) / 100 - ((n % 10000) % 1000) % 100 / 10 + (n % 10) == 0\n    }\n    if n < 1000000 {\n        return (n / 100000) - ((n % 100000) / 10000) + ((n % 100000) % 10000) / 1000 - ((n % 100000) % 10000) % 1000 / 100 + ((n % 100000) % 10000) % 1000 % 100 / 10 - (n % 10) == 0\n    }\n    if n < 10000000 {\n        return (n / 1000000) - ((n % 1000000) / 100000) + ((n % 1000000) % 100000) / 10000 - ((n % 1000000) % 100000) % 10000 / 1000 + ((n % 1000000) % 100000) % 10000 % 1000 / 100 - ((n % 1000000) % 100000) % 10000 % 1000 % 100 / 10 + (n % 10) == 0\n    }\n    if n < 100000000 {\n        return (n / 10000000) - ((n % 10000000) / 1000000) + ((n % 10000000) % 1000000) / 100000 - ((n % 10000000) % 1000000) % 100000 / 10000 + ((n % 10000000) % 1000000) % 100000 % 10000 / 1000 - ((n % 10000000) % 1000000) % 100000 % 10000 % 1000 / 100 + ((n % 10000000) % 1000000) % 100000 % 10000 % 1000 % 100 / 10 - (n % 10) == 0\n   \nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122608,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_gmhicpp_test.go:40:6: expected '(', found TestIs_Diff\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return n % 11 == 0\n    }\n    if n % 11 == 0 {\n        return true\n    }\n    return is_Diff(n / 10 - n % 10 * 2)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for i := 0; n > 0; i++ {\n        if i % 2 == 0 {\n            even_sum += n % 10\n        } else {\n            odd_sum += n % 10\n        }\n        n /= 10\n    }\n    return odd_sum - even_sum == 0 || odd_sum - even_sum == 11 || odd_sum - even_sum == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return (odd + even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdpc3a84d_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for n > 0 {\n        odd_sum += n % 10\n        n /= 10\n        even_sum += n % 10\n        n /= 10\n    }\n    return odd_sum - even_sum == 0 || odd_sum - even_sum == 11 || odd_sum - even_sum == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 11 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__0 (0.00s)\n        tmpi_7ufd0m_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpi_7ufd0m_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpi_7ufd0m_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return n % 11 == 0\n    }\n    if n < 1000 {\n        return (n / 10) % 11 == 0\n    }\n    if n < 10000 {\n        return (n / 100) % 11 == 0\n    }\n    if n < 100000 {\n        return (n / 1000) % 11 == 0\n    }\n    if n < 1000000 {\n        return (n / 10000) % 11 == 0\n    }\n    if n < 10000000 {\n        return (n / 100000) % 11 == 0\n    }\n    if n < 100000000 {\n        return (n / 1000000) % 11 == 0\n    }\n    if n < 1000000000 {\n        return (n / 10000000) % 11 == 0\n    }\n    if n < 10000000000 {\n        return (n / 100000000) % 11 == 0\n    }\n    if n < 100000000000 {\n        return (n / 1000000000) % 11 == 0\n    }\n    if n < 1000000000000 {\n        return (n / 10000000000) % 11 == 0\n    }\n    if n < 10000000000000 {\n        return (n / 100000000000) % 11 == 0\n    }\n    if n < 100000000000000 {\n        return (n / 1000000000000) % 11 == 0\n    }\n    if n < 1000000000000000 {\n        return (n / 10000000000000) % 11 == 0\n    }\n    if n < 10000000000000000 {\n        return (n / 100000000000000) % 11 == 0\n    }\n    if n < 100000000000000000 {\n        return (n / 1000000000000000) % 11 == 0\n    }\n    if n < 1000000000000000000 {\n        return (n / 10000000000000000) % 11 == 0\n    }\n    if n < 10000000000000000000 {\n        return (n / 100000000000000000) % 11 == 0\n    }\n    return false\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmputk6kod9_test.go:67:10: constant 10000000000000000000 overflows int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return n % 11 == 0\n    }\n    if n < 1000 {\n        return (n / 10) % 11 == 0\n    }\n    if n < 10000 {\n        return (n / 100) % 11 == 0\n    }\n    if n < 100000 {\n        return (n / 1000) % 11 == 0\n    }\n    if n < 1000000 {\n        return (n / 10000) % 11 == 0\n    }\n    if n < 10000000 {\n        return (n / 100000) % 11 == 0\n    }\n    if n < 100000000 {\n        return (n / 1000000) % 11 == 0\n    }\n    if n < 1000000000 {\n        return (n / 10000000) % 11 == 0\n    }\n    if n < 10000000000 {\n        return (n / 100000000) % 11 == 0\n    }\n    if n < 100000000000 {\n        return (n / 1000000000) % 11 == 0\n    }\n    if n < 1000000000000 {\n        return (n / 10000000000) % 11 == 0\n    }\n    if n < 10000000000000 {\n        return (n / 100000000000) % 11 == 0\n    }\n    if n < 100000000000000 {\n        return (n / 1000000000000) % 11 == 0\n    }\n    if n < 1000000000000000 {\n        return (n / 10000000000000) % 11 == 0\n    }\n    if n < 10000000000000000 {\n        return (n / 100000000000000) % 11 == 0\n    }\n    if n < 100000000000000000 {\n        return (n / 1000000000000000) % 11 == 0\n    }\n    if n < 1000000000000000000 {\n        return (n / 10000000000000000) % 11 == 0\n    }\n    if n < 10000000000000000000 {\n        return (n / 100000000000000000) % 11 == 0\n    }\n    return false\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfbmz9g5s_test.go:64:10: constant 10000000000000000000 overflows int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    var sum_odd, sum_even int\n    for i := 1; n > 0; i++ {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n    }\n    return is_Diff(sum_odd - sum_even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122610,
      "stdout": "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160388 stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\nruntime.throw(0x546229, 0xe)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:1117 +0x72\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1069 +0x7ed\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:458 +0x8f\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpn1eim9_s_test.go:9 +0x115 fp=0xc020160398 sp=0xc020160390 pc=0x50a715\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpn1eim9_s_test.go:28 +0xde fp=0xc0201603b8 sp=0xc020160398 pc=0x50a6de\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpn1eim9_s_test.go:28 +0xde fp=0xc0201603d8 sp=0xc0201603b8 pc=0x50a6de\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpn1eim9_s_test.go:28 +0xde fp=0xc0201603f8 sp=0xc0201603d8 pc=0x50a6de\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpn1eim9_s_test.go:28 +0xde fp=0xc020160418 sp=0xc0201603f8 pc=0x50a6de\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpn1eim9_s_test.go:28 +0xde fp=0xc020160438 sp=0xc020160418 pc=0x50a6de\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpn1eim9_s_test.go:28 +0xde fp=0xc020160458 sp=0xc020160438 pc=0x50a6de\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpn1eim9_s_test.go:28 +0xde fp=0xc020160478 sp=0xc020160458 pc=0x50a6de\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpn1eim9_s_test.go:28 +0xde fp=0xc020160498 sp=0xc020160478 pc=0x50a6de\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpn1eim9_s_test.go:28 +0xde fp=0xc0201604b8 sp=0xc020160498 pc=0x50a6de\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpn1eim9_s_test.go:28 +0xde fp=0xc0201604d8 sp=0xc0201604b8 pc=0x50a6de\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpn1eim9_s_test.go:28 +0xde fp=0xc0201604f8 sp=0xc0201604d8 pc=0x50a6de\ncommand-line-arguments_test.is_Diff(0x3, 0x0)\n\t/tmp/tmpn1eim9_s_test.go:28 +0xde fp=",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return (n % 11) == 0\n    }\n    if n < 1000 {\n        return (n % 11) == 0\n    }\n    if n < 10000 {\n        return (n % 11) == 0\n    }\n    if n < 100000 {\n        return (n % 11) == 0\n    }\n    if n < 1000000 {\n        return (n % 11) == 0\n    }\n    if n < 10000000 {\n        return (n % 11) == 0\n    }\n    if n < 100000000 {\n        return (n % 11) == 0\n    }\n    if n < 1000000000 {\n        return (n % 11) == 0\n    }\n    if n < 10000000000 {\n        return (n % 11) == 0\n    }\n    if n < 100000000000 {\n        return (n % 11) == 0\n    }\n    if n < 1000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 10000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 100000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 1000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 10000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 100000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 1000000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 10000000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 100000000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 1000000000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 10000000000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 100000000000000000000000 {\n        return (n % 11) == 0\n    }\n    if n < 1000000000000000000000000 {\n        return (n % 11) == 0\n    }\n    if n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122608,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp39meu_cv_test.go:83:6: expected '(', found TestIs_Diff\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return true\n    }\n    if n < 10 {\n        return false\n    }\n    return is_Diff((n / 10) - (n % 10))\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpeo5e_4ew_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpdoeaov0j_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 11 {\n        return true\n    }\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return n % 11 == 0\n    }\n    if n < 1000 {\n        return is_Diff(n % 100)\n    }\n    if n < 10000 {\n        return is_Diff(n % 1000)\n    }\n    if n < 100000 {\n        return is_Diff(n % 10000)\n    }\n    if n < 1000000 {\n        return is_Diff(n % 100000)\n    }\n    if n < 10000000 {\n        return is_Diff(n % 1000000)\n    }\n    if n < 100000000 {\n        return is_Diff(n % 10000000)\n    }\n    if n < 1000000000 {\n        return is_Diff(n % 100000000)\n    }\n    if n < 10000000000 {\n        return is_Diff(n % 1000000000)\n    }\n    if n < 100000000000 {\n        return is_Diff(n % 10000000000)\n    }\n    if n < 1000000000000 {\n        return is_Diff(n % 100000000000)\n    }\n    if n < 10000000000000 {\n        return is_Diff(n % 1000000000000)\n    }\n    if n < 100000000000000 {\n        return is_Diff(n % 10000000000000)\n    }\n    if n < 1000000000000000 {\n        return is_Diff(n % 100000000000000)\n    }\n    if n < 10000000000000000 {\n        return is_Diff(n % 1000000000000000)\n    }\n    if n < 100000000000000000 {\n        return is_Diff(n % 10000000000000000)\n    }\n    if n < 1000000000000000000 {\n        return is_Diff(n % 100000000000000000)\n    }\n    if n < 10000000000000000000 {\n        return is_Diff(n % 1000000000000000000)\n    }\n    return false\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjc7jk3kd_test.go:70:10: constant 10000000000000000000 overflows int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122605,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpzh9rgr7v_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpdpc3a84d_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n\n    if n < 10 {\n        return false\n    }\n\n    odd := n % 10\n    even := 0\n\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122609,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp6vut0gvt_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4blxb1r0_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}