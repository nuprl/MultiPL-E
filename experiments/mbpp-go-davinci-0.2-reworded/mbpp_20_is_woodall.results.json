{
  "name": "mbpp_20_is_woodall",
  "language": "go_test.go",
  "prompt": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py",
  "prompt_terminology": "reworded",
  "tests": "func TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    var n int = 1\n    for n < x {\n        n = n * 2 + 1\n    }\n    return n == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpdo_z_tsj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x % 2 == 1 && x % 3 == 0 && x % 4 == 1 && x % 5 == 4 && x % 6 == 3 && x % 7 == 0 && x % 8 == 1 && x % 9 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpuonfb619_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    y := 1\n    for y <= x {\n        if y == x {\n            return true\n        }\n        y = y * 2 + 1\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpzq5o90hl_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    var i int = 1\n    var n int = 1\n    for i < x {\n        n = n * 2\n        i = n - 1\n    }\n    return i == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp636lb0gd_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n\n    i := 1\n    for {\n        if i > x {\n            return false\n        }\n\n        if i == x {\n            return true\n        }\n\n        i = i * 2 + 1\n    }\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpkn_j3koa_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpxpz6732m_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    i := 1\n    for {\n        if i * i * i * i > x {\n            break\n        }\n        if i * i * i * i == x {\n            return true\n        }\n        i += 2\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp019o8j58_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i*i*i*i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpg_pebhc2_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    var i int = 1\n    for i < x {\n        i *= 2\n    }\n    return i == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpjma8c_51_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x == 4 || x == 9 || x == 121 || x == 484\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpvkqgn77p_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpkctalrtl_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x > 0 && x == (1 << uint(x)) - 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp44cswyl1_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    var n int = 1\n    for n < x {\n        n = n * 2 + 1\n    }\n    return n == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpdo_z_tsj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    var n int = 1\n    for n < x {\n        n = n * 2 + 1\n    }\n    return n == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp9q90p4mf_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpkctalrtl_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpkctalrtl_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x <= 1 {\n        return false\n    }\n    for i := 2; i <= x/2; i++ {\n        if i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp5qp060bz_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    return (x & (x - 1)) == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpctklms6q_test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x % 2 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpxhyir9ef_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpxhyir9ef_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpxhyir9ef_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x % 2 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpxhyir9ef_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpxhyir9ef_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpxhyir9ef_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpk1_j_yj5_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    var n int = 1\n    for n < x {\n        n = n * 2 + 1\n    }\n    return n == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpdo_z_tsj_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    var i int\n    for i = 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpne9p8ua4_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x % 2 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpxhyir9ef_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpxhyir9ef_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpxhyir9ef_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x <= 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i < x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x % (x - 1) == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpwj4rd_ey_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpwj4rd_ey_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    if x % 5 == 0 {\n        return false\n    }\n    if x % 10 == 0 {\n        return false\n    }\n    return is_woodall(x * x - 1)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp__mk4y9k_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x == 1 {\n        return true\n    }\n    if x < 1 {\n        return false\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmp4_kghxdw_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmp4_kghxdw_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x % 2 == 1 && x % 3 == 0 && x % 4 == 1 && x % 5 == 4 && x % 6 == 3 && x % 7 == 0 && x % 8 == 1 && x % 9 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpuonfb619_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpjyt85fgd_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384 || x == 32768 || x == 65536 || x == 131072 || x == 262144 || x == 524288 || x == 1048576 || x == 2097152 || x == 4194304 || x == 8388608 || x == 16777216 || x == 33554432 || x == 67108864 || x == 134217728 || x == 268435456 || x == 536870912 || x == 1073741824 || x == 2147483648\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpxcz461w6_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x % 2 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpxhyir9ef_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpxhyir9ef_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpxhyir9ef_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x % 2 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpxhyir9ef_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpxhyir9ef_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpxhyir9ef_test.go:28: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x <= 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x - 1) && is_woodall(x - 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpplmvx6ye_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    for i := 2; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmphtl48ig1_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    i := 1\n    for i < x {\n        i = i * 2 + 1\n    }\n    return i == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmplt525h9b_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x <= 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x-1) && is_woodall(x-2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp57am3ya6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    var i int = 1\n    for i < x {\n        i = i * 2\n    }\n    return i == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp1asca5a9_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x == 4 || x == 9 || x == 121 || x == 484\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpvkqgn77p_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpkctalrtl_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    for i := 2; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmphtl48ig1_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    var i int\n    for i = 2; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpsz9kyu17_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    for i := 2; i <= x; i++ {\n        if i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp_lxt7sba_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    return x == 1 || x == pow(2, x-1) - 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwl02nuup_test.go:13:27: undefined: pow\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    var i int = 1\n    for i < x {\n        i = i * 2\n    }\n    return i == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp1asca5a9_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpkctalrtl_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    var i int = 1\n    var n int = 1\n    for i < x {\n        n++\n        i = n * n * n * n - 1\n    }\n    return i == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpk5iqq4mk_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i < x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i < x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    var n int = 1\n    for n < x {\n        n = n * 2 + 1\n    }\n    return n == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp_vocfhyt_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x % 2 == 1 && x % 3 == 0 && x % 4 == 1 && x % 5 == 4 && x % 6 == 3 && x % 7 == 0 && x % 8 == 1 && x % 9 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpuonfb619_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x % 2 == 1 && x % 3 == 0 && x % 4 == 1 && x % 5 == 4 && x % 6 == 3 && x % 7 == 0 && x % 8 == 1 && x % 9 == 0\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpuonfb619_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    var n int = 1\n    for n < x {\n        n = n * 2 + 1\n    }\n    return n == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp_vocfhyt_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpkctalrtl_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    var i int\n    for i = 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpyquvpzmo_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x - 1) && is_woodall(x - 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpmnt4bye6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 0 {\n        return false\n    }\n    var i uint\n    for i = 0; i < 64; i++ {\n        if x == (1 << i) - 1 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpeiuzyktp_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x/2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmp8p2tk94o_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmp8p2tk94o_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpkctalrtl_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1 || x == 4 || x == 9 || x == 121 || x == 484\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpvkqgn77p_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    return x == 1 || is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmppoyt_sdl_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmppoyt_sdl_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    // x = 2^n - 1\n    // n = log2(x + 1)\n    n := log2(x + 1)\n    return n == int(n)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0per6ffo_test.go:12:10: undefined: log2\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    for i := 2; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmphtl48ig1_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpkctalrtl_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    n := 1\n    for n < x {\n        n = n * 2 + 1\n    }\n    return n == x\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpxb4n0w7q_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpxpz6732m_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 0 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    var i int = 1\n    for {\n        if i * i > x {\n            break\n        }\n        if i * i == x {\n            return true\n        }\n        i++\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmp852twp3e_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x > 0 && x % 2 == 1 && x == (x * x - 1) / 2\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpivd8ttds_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__1 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Woodall/test_num__2 (0.00s)\n        tmpitqgi4qz_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    for i := 2; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmphtl48ig1_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    return is_woodall(x / 2)\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmplrshoa2h_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    return x == 1\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpcdq3firz_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    if x % 5 == 0 {\n        return false\n    }\n    if x % 10 == 9 {\n        return false\n    }\n    if x % 100 == 99 {\n        return false\n    }\n    if x % 1000 == 999 {\n        return false\n    }\n    if x % 10000 == 9999 {\n        return false\n    }\n    if x % 100000 == 99999 {\n        return false\n    }\n    if x % 1000000 == 999999 {\n        return false\n    }\n    if x % 10000000 == 9999999 {\n        return false\n    }\n    if x % 100000000 == 99999999 {\n        return false\n    }\n    if x % 1000000000 == 999999999 {\n        return false\n    }\n    if x % 10000000000 == 9999999999 {\n        return false\n    }\n    if x % 100000000000 == 99999999999 {\n        return false\n    }\n    if x % 1000000000000 == 999999999999 {\n        return false\n    }\n    if x % 10000000000000 == 9999999999999 {\n        return false\n    }\n    if x % 100000000000000 == 99999999999999 {\n        return false\n    }\n    if x % 1000000000000000 == 999999999999999 {\n        return false\n    }\n    if x % 10000000000000000 == 9999999999999999 {\n        return false\n    }\n    if x % 100000000000000000 == 99999999999999999 {\n        return false\n    }\n    if x % 1000000000000000000 == 999999999999999999 {\n        return false\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124284,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    for i := 2; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmphtl48ig1_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i <= x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpkctalrtl_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    for i := 1; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmpaccs4xg0_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= x; i += 2 {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509686,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_woodall_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given number is woodball or not.\nfunc is_woodall(x int) bool {\n    if x < 1 {\n        return false\n    }\n    if x == 1 {\n        return true\n    }\n    for i := 2; i < x; i++ {\n        if i * i * i * i == x {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Woodall(t *testing.T) {\n  candidate := is_woodall\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(383), expected: true },\n     { actual: candidate(254), expected: false },\n     { actual: candidate(200), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124282,
      "stdout": "--- FAIL: TestIs_Woodall (0.00s)\n    --- FAIL: TestIs_Woodall/test_num__0 (0.00s)\n        tmphtl48ig1_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}