{
  "name": "mbpp_558_digit_distance_nums",
  "language": "go_test.go",
  "prompt": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py",
  "prompt_terminology": "reworded",
  "tests": "func TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings.\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the shorter string.\n    var min_len int\n    if len(s1) < len(s2) {\n        min_len = len(s1)\n    } else {\n        min_len = len(s2)\n    }\n\n    // Sum the per-digit difference between the two strings.\n    var sum int\n    for i := 0; i < min_len; i++ {\n        sum += int(s1[i] - s2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp49fs27n7_test.go:46: expected '%!s(int=1)', got '%!s(int=255)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp49fs27n7_test.go:46: expected '%!s(int=6)', got '%!s(int=506)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp49fs27n7_test.go:46: expected '%!s(int=7)', got '%!s(int=761)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp122n8xia_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp122n8xia_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp122n8xia_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Your code goes here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmplnftz92__test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmplnftz92__test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmplnftz92__test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 /= 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpummhltgu_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 = n1 / 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 = n2 / 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4zetckwo_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // convert numbers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // get the length of the strings\n    l1 := len(s1)\n    l2 := len(s2)\n\n    // get the length of the longer string\n    l := l1\n    if l2 > l1 {\n        l = l2\n    }\n\n    // pad the shorter string with zeros\n    if l1 < l {\n        for i := 0; i < l - l1; i++ {\n            s1 = \"0\" + s1\n        }\n    }\n    if l2 < l {\n        for i := 0; i < l - l2; i++ {\n            s2 = \"0\" + s2\n        }\n    }\n\n    // convert the strings to byte arrays\n    b1 := []byte(s1)\n    b2 := []byte(s2)\n\n    // calculate the sum of the per-digit difference\n    sum := 0\n    for i := 0; i < l; i++ {\n        sum += abs(int(b1[i]) - int(b2[i]))\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2x8psduo_test.go:43:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    str1 := fmt.Sprintf(\"%d\", n1)\n    str2 := fmt.Sprintf(\"%d\", n2)\n\n    // Make sure the strings are the same length\n    if len(str1) > len(str2) {\n        str2 = fmt.Sprintf(\"%s%s\", strings.Repeat(\"0\", len(str1) - len(str2)), str2)\n    } else if len(str2) > len(str1) {\n        str1 = fmt.Sprintf(\"%s%s\", strings.Repeat(\"0\", len(str2) - len(str1)), str1)\n    }\n\n    // Iterate through the strings and add the difference between the digits\n    var sum int\n    for i := 0; i < len(str1); i++ {\n        sum += int(str1[i] - str2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm69ruw26_test.go:16:36: undefined: strings\n/tmp/tmpm69ruw26_test.go:18:36: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Your code goes here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmplnftz92__test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmplnftz92__test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmplnftz92__test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings.\n    str1 := fmt.Sprintf(\"%d\", n1)\n    str2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the longer string.\n    max_len := len(str1)\n    if len(str2) > max_len {\n        max_len = len(str2)\n    }\n\n    // Pad the shorter string with zeros.\n    if len(str1) < max_len {\n        str1 = fmt.Sprintf(\"%0*d\", max_len, n1)\n    }\n    if len(str2) < max_len {\n        str2 = fmt.Sprintf(\"%0*d\", max_len, n2)\n    }\n\n    // Iterate over the strings and find the difference between the digits.\n    sum := 0\n    for i := 0; i < max_len; i++ {\n        sum += int(str1[i]) - int(str2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp_m4wgjsz_test.go:52: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp_m4wgjsz_test.go:52: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp_m4wgjsz_test.go:52: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpckkqwdth_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpckkqwdth_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpckkqwdth_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Get the length of the strings\n    len1 := len(s1)\n    len2 := len(s2)\n\n    // Get the length of the longer string\n    max_len := len1\n    if len2 > len1 {\n        max_len = len2\n    }\n\n    // Pad the shorter string with zeros\n    if len1 < max_len {\n        s1 = fmt.Sprintf(\"%0*d\", max_len, n1)\n    }\n    if len2 < max_len {\n        s2 = fmt.Sprintf(\"%0*d\", max_len, n2)\n    }\n\n    // Convert the strings to slices of bytes\n    b1 := []byte(s1)\n    b2 := []byte(s2)\n\n    // Initialize the sum\n    sum := 0\n\n    // Iterate over the bytes\n    for i := 0; i < max_len; i++ {\n        // Get the difference between the bytes\n        diff := int(b1[i]) - int(b2[i])\n\n        // If the difference is negative, make it positive\n        if diff < 0 {\n            diff = -diff\n        }\n\n        // Add the difference to the sum\n        sum += diff\n    }\n\n    // Return the sum\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // convert to string\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n    // get length of string\n    l1 := len(s1)\n    l2 := len(s2)\n    // get max length\n    max := l1\n    if l2 > l1 {\n        max = l2\n    }\n    // create a slice of ints\n    nums := make([]int, max)\n    // loop through the strings\n    for i := 0; i < max; i++ {\n        // get the ints\n        var n1, n2 int\n        if i < l1 {\n            n1 = int(s1[i] - '0')\n        }\n        if i < l2 {\n            n2 = int(s2[i] - '0')\n        }\n        // get the difference\n        diff := n1 - n2\n        if diff < 0 {\n            diff = -diff\n        }\n        // add to the slice\n        nums[i] = diff\n    }\n    // sum the slice\n    sum := 0\n    for _, n := range nums {\n        sum += n\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Get the length of the strings\n    l1 := len(s1)\n    l2 := len(s2)\n\n    // Get the length of the longer string\n    l := l1\n    if l2 > l1 {\n        l = l2\n    }\n\n    // Pad the shorter string with zeros\n    if l1 < l {\n        s1 = fmt.Sprintf(\"%0*d\", l, n1)\n    }\n    if l2 < l {\n        s2 = fmt.Sprintf(\"%0*d\", l, n2)\n    }\n\n    // Convert the strings to slices of runes\n    r1 := []rune(s1)\n    r2 := []rune(s2)\n\n    // Initialize the sum\n    sum := 0\n\n    // Iterate over the slices\n    for i := 0; i < l; i++ {\n        // Get the difference between the runes\n        d := int(r1[i]) - int(r2[i])\n        // If the difference is negative, make it positive\n        if d < 0 {\n            d = -d\n        }\n        // Add the difference to the sum\n        sum += d\n    }\n\n    // Return the sum\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the longer string\n    var l int\n    if len(s1) > len(s2) {\n        l = len(s1)\n    } else {\n        l = len(s2)\n    }\n\n    // Pad the shorter string with zeros\n    if len(s1) < l {\n        s1 = fmt.Sprintf(\"%0*d\", l, n1)\n    }\n    if len(s2) < l {\n        s2 = fmt.Sprintf(\"%0*d\", l, n2)\n    }\n\n    // Convert the strings to slices of bytes\n    b1 := []byte(s1)\n    b2 := []byte(s2)\n\n    // Iterate through the slices and calculate the sum of the differences\n    var sum int\n    for i := 0; i < l; i++ {\n        sum += int(b1[i] - b2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpm_x6kfi2_test.go:58: expected '%!s(int=1)', got '%!s(int=255)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpm_x6kfi2_test.go:58: expected '%!s(int=6)', got '%!s(int=506)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpm_x6kfi2_test.go:58: expected '%!s(int=7)', got '%!s(int=761)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n    // Make sure the strings are the same length\n    if len(s1) > len(s2) {\n        s2 = fmt.Sprintf(\"%0*d\", len(s1), n2)\n    } else if len(s2) > len(s1) {\n        s1 = fmt.Sprintf(\"%0*d\", len(s2), n1)\n    }\n    // Loop through the strings and calculate the difference\n    var sum int\n    for i := 0; i < len(s1); i++ {\n        sum += int(s1[i] - s2[i])\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpy6wobxjg_test.go:42: expected '%!s(int=1)', got '%!s(int=255)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpy6wobxjg_test.go:42: expected '%!s(int=6)', got '%!s(int=506)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpy6wobxjg_test.go:42: expected '%!s(int=7)', got '%!s(int=761)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += int(math.Abs(float64(n1%10 - n2%10)))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptdwvwbp5_test.go:12:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings.\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the shorter string.\n    var shorter_len int\n    if len(s1) < len(s2) {\n        shorter_len = len(s1)\n    } else {\n        shorter_len = len(s2)\n    }\n\n    // Find the sum of the per-digit difference between the two integers.\n    var sum int\n    for i := 0; i < shorter_len; i++ {\n        sum += int(s1[i] - s2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpuk_03lec_test.go:46: expected '%!s(int=1)', got '%!s(int=255)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpuk_03lec_test.go:46: expected '%!s(int=6)', got '%!s(int=506)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpuk_03lec_test.go:46: expected '%!s(int=7)', got '%!s(int=761)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph7fsgbhj_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_digits []int = []int{}\n    var n2_digits []int = []int{}\n\n    for n1 > 0 {\n        n1_digits = append(n1_digits, n1 % 10)\n        n1 /= 10\n    }\n\n    for n2 > 0 {\n        n2_digits = append(n2_digits, n2 % 10)\n        n2 /= 10\n    }\n\n    for i := 0; i < len(n1_digits); i++ {\n        if i < len(n2_digits) {\n            sum += abs(n1_digits[i] - n2_digits[i])\n        } else {\n            sum += n1_digits[i]\n        }\n    }\n\n    for i := len(n1_digits); i < len(n2_digits); i++ {\n        sum += n2_digits[i]\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprerbeuwl_test.go:26:20: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfs3pt6y0_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert both numbers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Get the length of the longer string\n    var max_len int\n    if len(s1) > len(s2) {\n        max_len = len(s1)\n    } else {\n        max_len = len(s2)\n    }\n\n    // Pad the shorter string with zeros\n    if len(s1) < max_len {\n        s1 = fmt.Sprintf(\"%0*d\", max_len, n1)\n    }\n    if len(s2) < max_len {\n        s2 = fmt.Sprintf(\"%0*d\", max_len, n2)\n    }\n\n    // Iterate through the strings and calculate the sum of the differences\n    var sum int\n    for i := 0; i < max_len; i++ {\n        sum += int(s1[i] - s2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp3rnnbtpz_test.go:54: expected '%!s(int=1)', got '%!s(int=255)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp3rnnbtpz_test.go:54: expected '%!s(int=6)', got '%!s(int=506)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp3rnnbtpz_test.go:54: expected '%!s(int=7)', got '%!s(int=761)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1%10 - n2%10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5di00fz_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpc_m57rrf_test.go:28: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpc_m57rrf_test.go:28: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpc_m57rrf_test.go:28: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert ints to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Get the length of the longer string\n    var length int\n    if len(s1) > len(s2) {\n        length = len(s1)\n    } else {\n        length = len(s2)\n    }\n\n    // Pad the shorter string with zeros\n    for i := len(s1); i < length; i++ {\n        s1 = \"0\" + s1\n    }\n    for i := len(s2); i < length; i++ {\n        s2 = \"0\" + s2\n    }\n\n    // Iterate through the strings and sum the differences\n    var sum int\n    for i := 0; i < length; i++ {\n        sum += int(s1[i] - s2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp2oiczz_z_test.go:54: expected '%!s(int=1)', got '%!s(int=255)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp2oiczz_z_test.go:54: expected '%!s(int=6)', got '%!s(int=506)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp2oiczz_z_test.go:54: expected '%!s(int=7)', got '%!s(int=761)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // convert to string\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n    // if the strings are not the same length, pad the shorter one with zeros\n    if len(s1) > len(s2) {\n        s2 = fmt.Sprintf(\"%0*d\", len(s1), n2)\n    } else if len(s2) > len(s1) {\n        s1 = fmt.Sprintf(\"%0*d\", len(s2), n1)\n    }\n    // convert back to int\n    i1, _ := strconv.Atoi(s1)\n    i2, _ := strconv.Atoi(s2)\n    // calculate the difference\n    diff := i1 - i2\n    // convert to string\n    s := fmt.Sprintf(\"%d\", diff)\n    // convert to slice of ints\n    var slice []int\n    for _, v := range s {\n        i, _ := strconv.Atoi(string(v))\n        slice = append(slice, i)\n    }\n    // sum the slice\n    sum := 0\n    for _, v := range slice {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptqod_oc1_test.go:20:14: undefined: strconv\n/tmp/tmptqod_oc1_test.go:21:14: undefined: strconv\n/tmp/tmptqod_oc1_test.go:29:17: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the longest string\n    max_len := len(s1)\n    if len(s2) > max_len {\n        max_len = len(s2)\n    }\n\n    // Pad the shorter string with zeros\n    if len(s1) < max_len {\n        s1 = fmt.Sprintf(\"%0*d\", max_len, n1)\n    }\n    if len(s2) < max_len {\n        s2 = fmt.Sprintf(\"%0*d\", max_len, n2)\n    }\n\n    // Iterate through the strings and find the difference between each digit\n    sum := 0\n    for i := 0; i < max_len; i++ {\n        sum += int(s1[i] - s2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpz_9q9071_test.go:52: expected '%!s(int=1)', got '%!s(int=255)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpz_9q9071_test.go:52: expected '%!s(int=6)', got '%!s(int=506)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpz_9q9071_test.go:52: expected '%!s(int=7)', got '%!s(int=761)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    str1 := fmt.Sprintf(\"%d\", n1)\n    str2 := fmt.Sprintf(\"%d\", n2)\n\n    // Convert the strings to arrays of runes\n    arr1 := []rune(str1)\n    arr2 := []rune(str2)\n\n    // Find the length of the shorter array\n    var len int\n    if len(arr1) < len(arr2) {\n        len = len(arr1)\n    } else {\n        len = len(arr2)\n    }\n\n    // Iterate through the arrays and find the difference between each digit\n    var sum int\n    for i := 0; i < len; i++ {\n        sum += int(arr1[i]) - int(arr2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptaii3i_o_test.go:20:11: cannot call non-function len (type int)\n/tmp/tmptaii3i_o_test.go:21:18: cannot call non-function len (type int)\n/tmp/tmptaii3i_o_test.go:23:18: cannot call non-function len (type int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings.\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the shorter string.\n    var min_len int\n    if len(s1) < len(s2) {\n        min_len = len(s1)\n    } else {\n        min_len = len(s2)\n    }\n\n    // Initialize the sum.\n    sum := 0\n\n    // Loop through the shorter string and add the difference between the digits.\n    for i := 0; i < min_len; i++ {\n        sum += int(s1[i]) - int(s2[i])\n    }\n\n    // Return the sum.\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp7u59vn_j_test.go:49: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp7u59vn_j_test.go:49: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp7u59vn_j_test.go:49: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    var n1_digits []int\n    var n2_digits []int\n    var n1_digit int\n    var n2_digit int\n    var n1_digit_count int\n    var n2_digit_count int\n    var i int\n    var diff int\n\n    n1_digits = make([]int, 10)\n    n2_digits = make([]int, 10)\n\n    for n1 > 0 {\n        n1_digit = n1 % 10\n        n1_digits[n1_digit] += 1\n        n1 /= 10\n    }\n\n    for n2 > 0 {\n        n2_digit = n2 % 10\n        n2_digits[n2_digit] += 1\n        n2 /= 10\n    }\n\n    for i = 0; i < 10; i++ {\n        n1_digit_count = n1_digits[i]\n        n2_digit_count = n2_digits[i]\n        diff = n1_digit_count - n2_digit_count\n        if diff < 0 {\n            diff *= -1\n        }\n        sum += diff\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpx_uextlh_test.go:63: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpx_uextlh_test.go:63: expected '%!s(int=6)', got '%!s(int=4)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpx_uextlh_test.go:63: expected '%!s(int=7)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    n1_str := fmt.Sprintf(\"%d\", n1)\n    n2_str := fmt.Sprintf(\"%d\", n2)\n\n    // If the strings are different lengths, pad the shorter one with zeros\n    if len(n1_str) > len(n2_str) {\n        n2_str = fmt.Sprintf(\"%0*d\", len(n1_str), n2)\n    } else if len(n2_str) > len(n1_str) {\n        n1_str = fmt.Sprintf(\"%0*d\", len(n2_str), n1)\n    }\n\n    // Convert the strings to slices of runes\n    n1_runes := []rune(n1_str)\n    n2_runes := []rune(n2_str)\n\n    // Iterate over the slices and calculate the difference between each pair of digits\n    var sum int\n    for i := 0; i < len(n1_runes); i++ {\n        sum += int(n1_runes[i] - n2_runes[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpvk8tlv54_test.go:49: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpvk8tlv54_test.go:49: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpvk8tlv54_test.go:49: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        d1 := n1 % 10\n        d2 := n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiqsbymbf_test.go:14:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // make sure the strings are the same length\n    if len(s1) > len(s2) {\n        s2 = fmt.Sprintf(\"%0*d\", len(s1), n2)\n    } else if len(s2) > len(s1) {\n        s1 = fmt.Sprintf(\"%0*d\", len(s2), n1)\n    }\n\n    // convert the strings to slices of bytes\n    b1 := []byte(s1)\n    b2 := []byte(s2)\n\n    // loop through the slices and find the difference between each digit\n    var sum int\n    for i := 0; i < len(b1); i++ {\n        sum += int(b1[i] - b2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpclzfkr88_test.go:49: expected '%!s(int=1)', got '%!s(int=255)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpclzfkr88_test.go:49: expected '%!s(int=6)', got '%!s(int=506)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpclzfkr88_test.go:49: expected '%!s(int=7)', got '%!s(int=761)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n    // Find the length of the shorter string\n    min_len := len(s1)\n    if len(s2) < min_len {\n        min_len = len(s2)\n    }\n    // Initialize the sum\n    sum := 0\n    // Loop over the shorter string\n    for i := 0; i < min_len; i++ {\n        // Convert the characters to integers\n        d1 := int(s1[i] - '0')\n        d2 := int(s2[i] - '0')\n        // Add the absolute value of the difference to the sum\n        sum += abs(d1 - d2)\n    }\n    // Return the sum\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb8jekk9w_test.go:26:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum -= n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpw7ma5_py_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpw7ma5_py_test.go:39: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpw7ma5_py_test.go:39: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfs3pt6y0_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Get the length of the strings\n    l1 := len(s1)\n    l2 := len(s2)\n\n    // Get the length of the longer string\n    l := l1\n    if l2 > l1 {\n        l = l2\n    }\n\n    // Pad the shorter string with zeros\n    if l1 < l {\n        for i := 0; i < l - l1; i++ {\n            s1 = \"0\" + s1\n        }\n    }\n    if l2 < l {\n        for i := 0; i < l - l2; i++ {\n            s2 = \"0\" + s2\n        }\n    }\n\n    // Convert the strings to int slices\n    n1_slice := make([]int, l)\n    n2_slice := make([]int, l)\n    for i := 0; i < l; i++ {\n        n1_slice[i] = int(s1[i] - '0')\n        n2_slice[i] = int(s2[i] - '0')\n    }\n\n    // Calculate the sum of the per-digit difference\n    sum := 0\n    for i := 0; i < l; i++ {\n        sum += abs(n1_slice[i] - n2_slice[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9pzodef8_test.go:47:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings.\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the longer string.\n    var length int\n    if len(s1) > len(s2) {\n        length = len(s1)\n    } else {\n        length = len(s2)\n    }\n\n    // Pad the shorter string with zeros.\n    for i := 0; i < length - len(s1); i++ {\n        s1 = \"0\" + s1\n    }\n    for i := 0; i < length - len(s2); i++ {\n        s2 = \"0\" + s2\n    }\n\n    // Convert the strings to slices of integers.\n    var s1_nums []int\n    var s2_nums []int\n    for _, c := range s1 {\n        s1_nums = append(s1_nums, int(c - '0'))\n    }\n    for _, c := range s2 {\n        s2_nums = append(s2_nums, int(c - '0'))\n    }\n\n    // Find the sum of the per-digit differences.\n    var sum int\n    for i := 0; i < length; i++ {\n        sum += abs(s1_nums[i] - s2_nums[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsjah3dln_test.go:43:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the two integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the shorter string\n    var short_len int\n    if len(s1) < len(s2) {\n        short_len = len(s1)\n    } else {\n        short_len = len(s2)\n    }\n\n    // Find the sum of the per-digit difference between the two integers\n    var sum int\n    for i := 0; i < short_len; i++ {\n        sum += int(s1[i] - s2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123447,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpe9_os18w_test.go:46: expected '%!s(int=1)', got '%!s(int=255)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpe9_os18w_test.go:46: expected '%!s(int=6)', got '%!s(int=506)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpe9_os18w_test.go:46: expected '%!s(int=7)', got '%!s(int=761)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Convert to rune arrays\n    r1 := []rune(s1)\n    r2 := []rune(s2)\n\n    // Get the length of the shorter array\n    var len int\n    if len(r1) < len(r2) {\n        len = len(r1)\n    } else {\n        len = len(r2)\n    }\n\n    // Sum the differences\n    var sum int\n    for i := 0; i < len; i++ {\n        sum += int(r1[i]) - int(r2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphx0sg7f1_test.go:20:11: cannot call non-function len (type int)\n/tmp/tmphx0sg7f1_test.go:21:18: cannot call non-function len (type int)\n/tmp/tmphx0sg7f1_test.go:23:18: cannot call non-function len (type int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n    // Get the length of the strings\n    l1 := len(s1)\n    l2 := len(s2)\n    // Set the length of the strings to the length of the longer string\n    if l1 > l2 {\n        l2 = l1\n    } else {\n        l1 = l2\n    }\n    // Initialize the sum\n    sum := 0\n    // Loop through the strings\n    for i := 0; i < l1; i++ {\n        // Get the digits\n        d1 := 0\n        d2 := 0\n        if i < len(s1) {\n            d1 = int(s1[i] - '0')\n        }\n        if i < len(s2) {\n            d2 = int(s2[i] - '0')\n        }\n        // Add the difference to the sum\n        sum += abs(d1 - d2)\n    }\n    // Return the sum\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsudwnd_8_test.go:36:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Make sure the strings are the same length\n    if len(s1) > len(s2) {\n        s2 = fmt.Sprintf(\"%0*d\", len(s1), n2)\n    } else if len(s1) < len(s2) {\n        s1 = fmt.Sprintf(\"%0*d\", len(s2), n1)\n    }\n\n    // Calculate the difference\n    var sum int\n    for i := 0; i < len(s1); i++ {\n        sum += int(s1[i] - s2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123447,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpf2v5aw8f_test.go:45: expected '%!s(int=1)', got '%!s(int=255)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpf2v5aw8f_test.go:45: expected '%!s(int=6)', got '%!s(int=506)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpf2v5aw8f_test.go:45: expected '%!s(int=7)', got '%!s(int=761)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        d1 := n1 % 10\n        d2 := n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8eggspr0_test.go:14:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Convert the strings to slices of runes\n    sr1 := []rune(s1)\n    sr2 := []rune(s2)\n\n    // Create a slice to hold the differences\n    diffs := []int{}\n\n    // Loop through the slices of runes\n    for i := 0; i < len(sr1); i++ {\n        // Convert the runes to integers\n        nr1 := int(sr1[i] - '0')\n        nr2 := int(sr2[i] - '0')\n\n        // Find the difference between the integers\n        diff := nr1 - nr2\n\n        // Append the difference to the slice\n        diffs = append(diffs, diff)\n    }\n\n    // Create a variable to hold the sum of the differences\n    sum := 0\n\n    // Loop through the slice of differences\n    for i := 0; i < len(diffs); i++ {\n        // Add the difference to the sum\n        sum += diffs[i]\n    }\n\n    // Return the sum\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123447,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp2lhifs27_test.go:62: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp2lhifs27_test.go:62: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp2lhifs27_test.go:62: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var n1_digits []int = make([]int, n1_len)\n    var n2_digits []int = make([]int, n2_len)\n    var i int = 0\n    var j int = 0\n    var n1_digit int = 0\n    var n2_digit int = 0\n    var diff int = 0\n    var abs_diff int = 0\n\n    // Convert n1 to an array of digits\n    for i = 0; i < n1_len; i++ {\n        n1_digits[i] = int(n1_str[i] - '0')\n    }\n\n    // Convert n2 to an array of digits\n    for i = 0; i < n2_len; i++ {\n        n2_digits[i] = int(n2_str[i] - '0')\n    }\n\n    // Find the sum of the per-digit difference between n1 and n2\n    for i = 0; i < n1_len; i++ {\n        n1_digit = n1_digits[i]\n        for j = 0; j < n2_len; j++ {\n            n2_digit = n2_digits[j]\n            diff = n1_digit - n2_digit\n            abs_diff = diff\n            if diff < 0 {\n                abs_diff = -diff\n            }\n            sum += abs_diff\n        }\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123447,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpi7hh0fdl_test.go:66: expected '%!s(int=6)', got '%!s(int=12)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpi7hh0fdl_test.go:66: expected '%!s(int=7)', got '%!s(int=23)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings.\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the shortest string.\n    var min_len int\n    if len(s1) < len(s2) {\n        min_len = len(s1)\n    } else {\n        min_len = len(s2)\n    }\n\n    // Iterate over the strings, adding the difference of each digit to the sum.\n    var sum int\n    for i := 0; i < min_len; i++ {\n        // Convert the digits to integers.\n        d1 := int(s1[i] - '0')\n        d2 := int(s2[i] - '0')\n\n        // Add the difference to the sum.\n        sum += abs(d1 - d2)\n    }\n\n    // Return the sum.\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3i99qnyu_test.go:30:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // get the digits of the numbers\n    digits1 := get_digits(n1)\n    digits2 := get_digits(n2)\n\n    // find the sum of the per-digit difference\n    sum := 0\n    for i := 0; i < len(digits1); i++ {\n        sum += abs(digits1[i] - digits2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpafy2yx0i_test.go:11:16: undefined: get_digits\n/tmp/tmpafy2yx0i_test.go:12:16: undefined: get_digits\n/tmp/tmpafy2yx0i_test.go:17:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    var n1_digits []int\n    var n2_digits []int\n    var n1_digit int\n    var n2_digit int\n    var n1_digit_count int\n    var n2_digit_count int\n    var i int\n\n    n1_digits = make([]int, 10)\n    n2_digits = make([]int, 10)\n\n    for n1 > 0 {\n        n1_digit = n1 % 10\n        n1_digits[n1_digit] += 1\n        n1 = n1 / 10\n    }\n\n    for n2 > 0 {\n        n2_digit = n2 % 10\n        n2_digits[n2_digit] += 1\n        n2 = n2 / 10\n    }\n\n    for i = 0; i < 10; i++ {\n        n1_digit_count = n1_digits[i]\n        n2_digit_count = n2_digits[i]\n        sum += abs(n1_digit_count - n2_digit_count)\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpexvzyd5r_test.go:37:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph7fsgbhj_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var n1_digit int\n    var n2_digit int\n    var i int = 0\n    for i < n1_len || i < n2_len {\n        if i < n1_len {\n            n1_digit = int(n1_str[i] - '0')\n        } else {\n            n1_digit = 0\n        }\n        if i < n2_len {\n            n2_digit = int(n2_str[i] - '0')\n        } else {\n            n2_digit = 0\n        }\n        sum += abs(n1_digit - n2_digit)\n        i++\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp_8y2iul_test.go:29:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    var n1_digits []int\n    var n2_digits []int\n\n    for n1 > 0 {\n        n1_digits = append(n1_digits, n1 % 10)\n        n1 /= 10\n    }\n\n    for n2 > 0 {\n        n2_digits = append(n2_digits, n2 % 10)\n        n2 /= 10\n    }\n\n    for i, _ := range n1_digits {\n        if i < len(n2_digits) {\n            sum += abs(n1_digits[i] - n2_digits[i])\n        } else {\n            sum += n1_digits[i]\n        }\n    }\n\n    for i, _ := range n2_digits {\n        if i >= len(n1_digits) {\n            sum += n2_digits[i]\n        }\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe7i1k906_test.go:26:20: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var n1_digit int\n    var n2_digit int\n    var n1_digit_str string\n    var n2_digit_str string\n    var n1_digit_int int\n    var n2_digit_int int\n    var diff int\n\n    for i := 0; i < n1_len; i++ {\n        n1_digit_str = n1_str[i:i+1]\n        n1_digit_int, _ = strconv.Atoi(n1_digit_str)\n        n2_digit_str = n2_str[i:i+1]\n        n2_digit_int, _ = strconv.Atoi(n2_digit_str)\n        diff = n1_digit_int - n2_digit_int\n        sum += diff\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjhxm0s_i_test.go:25:27: undefined: strconv\n/tmp/tmpjhxm0s_i_test.go:27:27: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 != 0 || n2 != 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpniwayl0c_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 /= 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpummhltgu_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings.\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the shorter string.\n    var min_len int\n    if len(s1) < len(s2) {\n        min_len = len(s1)\n    } else {\n        min_len = len(s2)\n    }\n\n    // Find the sum of the per-digit difference between the two integers.\n    var sum int\n    for i := 0; i < min_len; i++ {\n        sum += int(s1[i] - s2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123448,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp51b6lmpm_test.go:46: expected '%!s(int=1)', got '%!s(int=255)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp51b6lmpm_test.go:46: expected '%!s(int=6)', got '%!s(int=506)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp51b6lmpm_test.go:46: expected '%!s(int=7)', got '%!s(int=761)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123448,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp_zveiwpn_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp_zveiwpn_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp_zveiwpn_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += int(math.Abs(float64(n1 % 10) - float64(n2 % 10)))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmvub0ops_test.go:12:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpckkqwdth_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpckkqwdth_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpckkqwdth_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var i int = 0\n    var n1_digit int = 0\n    var n2_digit int = 0\n    var diff int = 0\n\n    for i < n1_len && i < n2_len {\n        n1_digit = int(n1_str[i] - '0')\n        n2_digit = int(n2_str[i] - '0')\n        diff = n1_digit - n2_digit\n        if diff < 0 {\n            diff = -diff\n        }\n        sum += diff\n        i++\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123448,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfs3pt6y0_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the two integers to strings.\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the shorter string.\n    var min_len int\n    if len(s1) < len(s2) {\n        min_len = len(s1)\n    } else {\n        min_len = len(s2)\n    }\n\n    // Initialize the sum.\n    sum := 0\n\n    // Iterate over the shorter string.\n    for i := 0; i < min_len; i++ {\n        // Convert the characters to integers.\n        n1, _ := strconv.Atoi(s1[i:i+1])\n        n2, _ := strconv.Atoi(s2[i:i+1])\n\n        // Add the difference to the sum.\n        sum += abs(n1 - n2)\n    }\n\n    // Return the sum.\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw0gukzii_test.go:28:18: undefined: strconv\n/tmp/tmpw0gukzii_test.go:29:18: undefined: strconv\n/tmp/tmpw0gukzii_test.go:32:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the difference between the two strings\n    var diff int\n    for i := 0; i < len(s1); i++ {\n        diff += int(s1[i]) - int(s2[i])\n    }\n\n    return diff\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123448,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpi7k25xar_test.go:38: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpi7k25xar_test.go:38: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpi7k25xar_test.go:38: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // If the strings are not the same length, pad the shorter one with zeros\n    if len(s1) > len(s2) {\n        s2 = fmt.Sprintf(\"%0*d\", len(s1), n2)\n    } else if len(s2) > len(s1) {\n        s1 = fmt.Sprintf(\"%0*d\", len(s2), n1)\n    }\n\n    // Convert the strings back to integers\n    i1, _ := strconv.Atoi(s1)\n    i2, _ := strconv.Atoi(s2)\n\n    // Calculate the difference between the integers\n    diff := i1 - i2\n\n    // Convert the difference back to a string\n    s3 := fmt.Sprintf(\"%d\", diff)\n\n    // Initialize the sum\n    sum := 0\n\n    // Iterate over the string, converting each character to an integer, and adding it to the sum\n    for _, c := range s3 {\n        i, _ := strconv.Atoi(string(c))\n        sum += i\n    }\n\n    // Return the sum\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123447,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqbt3tjm6_test.go:22:14: undefined: strconv\n/tmp/tmpqbt3tjm6_test.go:23:14: undefined: strconv\n/tmp/tmpqbt3tjm6_test.go:36:17: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n    // Make sure they're the same length\n    if len(s1) > len(s2) {\n        s2 = fmt.Sprintf(\"%0*d\", len(s1), n2)\n    } else if len(s2) > len(s1) {\n        s1 = fmt.Sprintf(\"%0*d\", len(s2), n1)\n    }\n    // Sum the differences\n    var sum int\n    for i := 0; i < len(s1); i++ {\n        sum += int(s1[i] - s2[i])\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpyd13to9q_test.go:42: expected '%!s(int=1)', got '%!s(int=255)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpyd13to9q_test.go:42: expected '%!s(int=6)', got '%!s(int=506)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpyd13to9q_test.go:42: expected '%!s(int=7)', got '%!s(int=761)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpwvdf_o5m_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpwvdf_o5m_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpwvdf_o5m_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpckkqwdth_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpckkqwdth_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpckkqwdth_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the shorter string\n    min_len := len(s1)\n    if len(s2) < min_len {\n        min_len = len(s2)\n    }\n\n    // Sum the per-digit difference between the two strings\n    sum := 0\n    for i := 0; i < min_len; i++ {\n        sum += int(s1[i] - s2[i])\n    }\n\n    // Return the sum\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp7oisxw3z_test.go:45: expected '%!s(int=1)', got '%!s(int=255)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp7oisxw3z_test.go:45: expected '%!s(int=6)', got '%!s(int=506)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp7oisxw3z_test.go:45: expected '%!s(int=7)', got '%!s(int=761)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    sum := 0\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph7fsgbhj_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings.\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n    // Find the length of the strings.\n    l1 := len(s1)\n    l2 := len(s2)\n    // Find the length of the shorter string.\n    l := l1\n    if l2 < l1 {\n        l = l2\n    }\n    // Create a variable to hold the sum of the per-digit difference.\n    sum := 0\n    // Iterate over the shorter string.\n    for i := 0; i < l; i++ {\n        // Convert the string to an integer.\n        n1, _ := strconv.Atoi(s1[i:i+1])\n        n2, _ := strconv.Atoi(s2[i:i+1])\n        // Find the difference between the integers.\n        diff := n1 - n2\n        // If the difference is negative, multiply it by -1.\n        if diff < 0 {\n            diff *= -1\n        }\n        // Add the difference to the sum.\n        sum += diff\n    }\n    // Return the sum.\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyx_5vub4_test.go:26:18: undefined: strconv\n/tmp/tmpyx_5vub4_test.go:27:18: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    var n1_digits []int\n    var n2_digits []int\n    var n1_digit int\n    var n2_digit int\n    var n1_digit_count int\n    var n2_digit_count int\n    var i int\n\n    n1_digits = make([]int, 0)\n    n2_digits = make([]int, 0)\n\n    for n1 > 0 {\n        n1_digit = n1 % 10\n        n1_digits = append(n1_digits, n1_digit)\n        n1 = n1 / 10\n    }\n\n    for n2 > 0 {\n        n2_digit = n2 % 10\n        n2_digits = append(n2_digits, n2_digit)\n        n2 = n2 / 10\n    }\n\n    n1_digit_count = len(n1_digits)\n    n2_digit_count = len(n2_digits)\n\n    if n1_digit_count > n2_digit_count {\n        for i = 0; i < n2_digit_count; i++ {\n            sum += abs(n1_digits[i] - n2_digits[i])\n        }\n        for i = n2_digit_count; i < n1_digit_count; i++ {\n            sum += n1_digits[i]\n        }\n    } else {\n        for i = 0; i < n1_digit_count; i++ {\n            sum += abs(n1_digits[i] - n2_digits[i])\n        }\n        for i = n1_digit_count; i < n2_digit_count; i++ {\n            sum += n2_digits[i]\n        }\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5x142y92_test.go:39:20: undefined: abs\n/tmp/tmp5x142y92_test.go:46:20: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1%10 - n2%10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5di00fz_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1%10 - n2%10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu5di00fz_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        var d1, d2 int\n        if n1 > 0 {\n            d1 = n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            d2 = n2 % 10\n            n2 /= 10\n        }\n        sum += abs(d1 - d2)\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpummhltgu_test.go:21:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n    // Get the length of the strings\n    l1 := len(s1)\n    l2 := len(s2)\n    // Get the length of the shorter string\n    if l1 < l2 {\n        l1 = l2\n    }\n    // Create a variable to hold the sum\n    sum := 0\n    // Loop through the shorter string\n    for i := 0; i < l1; i++ {\n        // Get the digit from the first string\n        d1 := 0\n        if i < len(s1) {\n            d1 = int(s1[i] - '0')\n        }\n        // Get the digit from the second string\n        d2 := 0\n        if i < len(s2) {\n            d2 = int(s2[i] - '0')\n        }\n        // Get the difference between the digits\n        diff := d1 - d2\n        // If the difference is negative, make it positive\n        if diff < 0 {\n            diff = -diff\n        }\n        // Add the difference to the sum\n        sum += diff\n    }\n    // Return the sum\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var n1_arr []int = make([]int, n1_len)\n    var n2_arr []int = make([]int, n2_len)\n    for i := 0; i < n1_len; i++ {\n        n1_arr[i] = int(n1_str[i] - '0')\n    }\n    for i := 0; i < n2_len; i++ {\n        n2_arr[i] = int(n2_str[i] - '0')\n    }\n    var n1_arr_len int = len(n1_arr)\n    var n2_arr_len int = len(n2_arr)\n    var min_arr_len int = n1_arr_len\n    if n2_arr_len < n1_arr_len {\n        min_arr_len = n2_arr_len\n    }\n    for i := 0; i < min_arr_len; i++ {\n        sum += abs(n1_arr[i] - n2_arr[i])\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_oa3yjao_test.go:30:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += int(math.Abs(float64(n1 % 10 - n2 % 10)))\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphf0hrmhw_test.go:12:20: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // convert to string\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // convert to rune\n    r1 := []rune(s1)\n    r2 := []rune(s2)\n\n    // get the length of the shorter string\n    var length int\n    if len(r1) < len(r2) {\n        length = len(r1)\n    } else {\n        length = len(r2)\n    }\n\n    // get the sum of the per-digit difference\n    var sum int\n    for i := 0; i < length; i++ {\n        sum += int(r2[i]) - int(r1[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var n1_digit int\n    var n2_digit int\n    var i int\n    var j int\n\n    for i = 0; i < n1_len; i++ {\n        n1_digit = int(n1_str[i] - '0')\n        j = i + n2_len - n1_len\n        if j < 0 {\n            n2_digit = 0\n        } else {\n            n2_digit = int(n2_str[j] - '0')\n        }\n        sum += abs(n1_digit - n2_digit)\n    }\n\n    for i = n1_len; i < n2_len; i++ {\n        n2_digit = int(n2_str[i] - '0')\n        sum += n2_digit\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj8gvpxli_test.go:28:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        d1 := n1 % 10\n        d2 := n2 % 10\n        sum += abs(d1 - d2)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123446,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8eggspr0_test.go:14:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var n1_digit int\n    var n2_digit int\n    var i int\n    var j int\n\n    if n1_len > n2_len {\n        for i = 0; i < n1_len; i++ {\n            if i < n2_len {\n                n1_digit, _ = strconv.Atoi(n1_str[i:i+1])\n                n2_digit, _ = strconv.Atoi(n2_str[i:i+1])\n                sum += int(math.Abs(float64(n1_digit - n2_digit)))\n            } else {\n                n1_digit, _ = strconv.Atoi(n1_str[i:i+1])\n                sum += n1_digit\n            }\n        }\n    } else {\n        for j = 0; j < n2_len; j++ {\n            if j < n1_len {\n                n1_digit, _ = strconv.Atoi(n1_str[j:j+1])\n                n2_digit, _ = strconv.Atoi(n2_str[j:j+1])\n                sum += int(math.Abs(float64(n1_digit - n2_digit)))\n            } else {\n                n2_digit, _ = strconv.Atoi(n2_str[j:j+1])\n                sum += n2_digit\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfohfab_w_test.go:23:31: undefined: strconv\n/tmp/tmpfohfab_w_test.go:24:31: undefined: strconv\n/tmp/tmpfohfab_w_test.go:25:28: undefined: math\n/tmp/tmpfohfab_w_test.go:27:31: undefined: strconv\n/tmp/tmpfohfab_w_test.go:34:31: undefined: strconv\n/tmp/tmpfohfab_w_test.go:35:31: undefined: strconv\n/tmp/tmpfohfab_w_test.go:36:28: undefined: math\n/tmp/tmpfohfab_w_test.go:38:31: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // This is a gothon function.\n    // It takes two integers, n1 and n2, and returns the sum of the per-digit difference between them.\n    // The per-digit difference is the absolute value of the difference between the digits at each position.\n    // For example, the per-digit difference between 123 and 456 is |1-4| + |2-5| + |3-6| = 9.\n    // The per-digit difference between 123 and 459 is |1-4| + |2-5| + |3-9| = 11.\n    // The per-digit difference between 123 and 459 is |1-4| + |2-5| + |3-9| = 11.\n    // The per-digit difference between 123 and 459 is |1-4| + |2-5| + |3-9| = 11.\n    // The per-digit difference between 123 and 459 is |1-4| + |2-5| + |3-9| = 11.\n    // The per-digit difference between 123 and 459 is |1-4| + |2-5| + |3-9| = 11.\n    // The per-digit difference between 123 and 459 is |1-4| + |2-5| + |3-9| = 11.\n    // The per-digit difference between 123 and 459 is |1-4| + |2-5| + |3-9| = 11.\n    // The per-digit difference between 123 and 459 is |1-4| + |2-5| + |3-9| = 11.\n    // The per-digit difference between 123 and 459 is |1-4| + |2-5| + |3-9| = 11.\n    // The per-digit difference between 123 and 459 is |1-4| + |2-5| + |3-9| = 11.\n    // The per-digit difference between 123 and 459 is |1-4| + |2-5| + |3-9| = 11.\n    // The per-digit difference between 123 and 459 is |1-4| + |2-5| + |3-9| = 11.\n    // The per-digit\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxvrpx9es_test.go:27:6: expected '(', found TestDigit_Distance_Nums\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123444,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfs3pt6y0_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert to string\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Convert to rune slice\n    r1 := []rune(s1)\n    r2 := []rune(s2)\n\n    // Find the difference between each digit\n    sum := 0\n    for i := 0; i < len(r1); i++ {\n        sum += int(r1[i] - r2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp4xn8d9pq_test.go:42: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp4xn8d9pq_test.go:42: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp4xn8d9pq_test.go:42: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // TODO: Implement me!\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123448,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp_zveiwpn_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp_zveiwpn_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp_zveiwpn_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // TODO: Write code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp9jld8dfo_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp9jld8dfo_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp9jld8dfo_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Convert the strings to slices of bytes\n    b1 := []byte(s1)\n    b2 := []byte(s2)\n\n    // Initialize the sum\n    sum := 0\n\n    // Loop over the bytes\n    for i := 0; i < len(b1); i++ {\n        // Convert the bytes to integers\n        n1 := int(b1[i]) - 48\n        n2 := int(b2[i]) - 48\n\n        // Add the absolute value of the difference to the sum\n        sum += abs(n1 - n2)\n    }\n\n    // Return the sum\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcarmonjm_test.go:28:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpm8p3k6_1_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpm8p3k6_1_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpm8p3k6_1_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_digits []int = []int{}\n    var n2_digits []int = []int{}\n    var n1_digit int\n    var n2_digit int\n\n    for n1 > 0 {\n        n1_digit = n1 % 10\n        n1_digits = append(n1_digits, n1_digit)\n        n1 = n1 / 10\n    }\n\n    for n2 > 0 {\n        n2_digit = n2 % 10\n        n2_digits = append(n2_digits, n2_digit)\n        n2 = n2 / 10\n    }\n\n    for i := 0; i < len(n1_digits); i++ {\n        sum += abs(n1_digits[i] - n2_digits[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7ohnoktc_test.go:29:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    for i := 0; i < len(n1_str); i++ {\n        var n1_digit int = int(n1_str[i] - '0')\n        var n2_digit int = int(n2_str[i] - '0')\n        sum += n1_digit - n2_digit\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmprgunsixy_test.go:36: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmprgunsixy_test.go:36: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmprgunsixy_test.go:36: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the longer string\n    var longer_len int\n    if len(s1) > len(s2) {\n        longer_len = len(s1)\n    } else {\n        longer_len = len(s2)\n    }\n\n    // Pad the shorter string with zeros\n    if len(s1) < longer_len {\n        for i := 0; i < longer_len - len(s1); i++ {\n            s1 = \"0\" + s1\n        }\n    } else if len(s2) < longer_len {\n        for i := 0; i < longer_len - len(s2); i++ {\n            s2 = \"0\" + s2\n        }\n    }\n\n    // Calculate the sum of the per-digit difference\n    var sum int\n    for i := 0; i < longer_len; i++ {\n        sum += int(s1[i] - s2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpbxqaoxga_test.go:57: expected '%!s(int=1)', got '%!s(int=255)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpbxqaoxga_test.go:57: expected '%!s(int=6)', got '%!s(int=506)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpbxqaoxga_test.go:57: expected '%!s(int=7)', got '%!s(int=761)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int = 0\n    var n1_str string = fmt.Sprintf(\"%d\", n1)\n    var n2_str string = fmt.Sprintf(\"%d\", n2)\n    var n1_len int = len(n1_str)\n    var n2_len int = len(n2_str)\n    var n1_digit int\n    var n2_digit int\n    var n1_digit_str string\n    var n2_digit_str string\n    var n1_digit_int int\n    var n2_digit_int int\n    var n1_digit_diff int\n    var n2_digit_diff int\n    var n1_digit_diff_abs int\n    var n2_digit_diff_abs int\n    var i int\n    var j int\n\n    if n1_len > n2_len {\n        for i = 0; i < n1_len; i++ {\n            if i < n2_len {\n                n1_digit_str = n1_str[i:i+1]\n                n2_digit_str = n2_str[i:i+1]\n                n1_digit_int, _ = fmt.Sscanf(n1_digit_str, \"%d\", &n1_digit)\n                n2_digit_int, _ = fmt.Sscanf(n2_digit_str, \"%d\", &n2_digit)\n                n1_digit_diff = n1_digit - n2_digit\n                n1_digit_diff_abs = n1_digit_diff\n                if n1_digit_diff < 0 {\n                    n1_digit_diff_abs = -n1_digit_diff\n                }\n                sum += n1_digit_diff_abs\n            } else {\n                n1_digit_str = n1_str[i:i+1]\n                n1_digit_int, _ = fmt.Sscanf(n1_digit_str, \"%d\", &n1_digit)\n                sum += n1_digit\n            }\n        }\n    } else {\n        for j = 0; j < n2_len; j++ {\n            if\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpt59hhof3_test.go:50:6: expected '(', found TestDigit_Distance_Nums\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n    // Get the length of the strings\n    l1 := len(s1)\n    l2 := len(s2)\n    // Get the length of the longer string\n    l := l1\n    if l2 > l1 {\n        l = l2\n    }\n    // Create a slice to hold the differences\n    diffs := make([]int, l)\n    // Iterate through the strings\n    for i := 0; i < l; i++ {\n        // Get the digits\n        d1 := 0\n        d2 := 0\n        if i < l1 {\n            d1 = int(s1[i] - '0')\n        }\n        if i < l2 {\n            d2 = int(s2[i] - '0')\n        }\n        // Get the difference\n        diff := d1 - d2\n        // Add the difference to the slice\n        diffs[i] = diff\n    }\n    // Sum the differences\n    sum := 0\n    for _, diff := range diffs {\n        sum += diff\n    }\n    // Return the sum\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpiejx_y0j_test.go:63: expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpiejx_y0j_test.go:63: expected '%!s(int=6)', got '%!s(int=-6)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpiejx_y0j_test.go:63: expected '%!s(int=7)', got '%!s(int=-7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the numbers to strings.\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the longer string.\n    var max_len int\n    if len(s1) > len(s2) {\n        max_len = len(s1)\n    } else {\n        max_len = len(s2)\n    }\n\n    // Pad the shorter string with zeros.\n    if len(s1) < max_len {\n        s1 = fmt.Sprintf(\"%0*d\", max_len, n1)\n    }\n    if len(s2) < max_len {\n        s2 = fmt.Sprintf(\"%0*d\", max_len, n2)\n    }\n\n    // Iterate over the strings and calculate the sum of the differences.\n    var sum int\n    for i := 0; i < max_len; i++ {\n        sum += int(s1[i] - s2[i])\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmpymts7hwy_test.go:54: expected '%!s(int=1)', got '%!s(int=255)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmpymts7hwy_test.go:54: expected '%!s(int=6)', got '%!s(int=506)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmpymts7hwy_test.go:54: expected '%!s(int=7)', got '%!s(int=761)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Your code here\n    return 0\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmp1_b6td2l_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        if n1 > 0 {\n            sum += n1 % 10\n            n1 /= 10\n        }\n        if n2 > 0 {\n            sum += n2 % 10\n            n2 /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "--- FAIL: TestDigit_Distance_Nums (0.00s)\n    --- FAIL: TestDigit_Distance_Nums/test_num__0 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__1 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=6)', got '%!s(int=16)'\n    --- FAIL: TestDigit_Distance_Nums/test_num__2 (0.00s)\n        tmppcsnaunf_test.go:39: expected '%!s(int=7)', got '%!s(int=19)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    var sum int\n    for n1 > 0 || n2 > 0 {\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 /= 10\n        n2 /= 10\n    }\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510372,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgt_d94sr_test.go:12:16: undefined: abs\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package digit_distance_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function to find the sum of the per-digit difference between two integers.\nfunc digit_distance_nums(n1 int, n2 int) int {\n    // Convert the integers to strings.\n    s1 := fmt.Sprintf(\"%d\", n1)\n    s2 := fmt.Sprintf(\"%d\", n2)\n\n    // Find the length of the longest string.\n    var max_len int\n    if len(s1) > len(s2) {\n        max_len = len(s1)\n    } else {\n        max_len = len(s2)\n    }\n\n    // Create a slice to hold the differences.\n    var diffs []int\n\n    // Iterate through the strings, converting each character to an integer.\n    // If the strings are of different lengths, pad the shorter string with zeros.\n    for i := 0; i < max_len; i++ {\n        var n1_digit int\n        var n2_digit int\n        if i < len(s1) {\n            n1_digit = int(s1[i] - '0')\n        } else {\n            n1_digit = 0\n        }\n        if i < len(s2) {\n            n2_digit = int(s2[i] - '0')\n        } else {\n            n2_digit = 0\n        }\n\n        // Find the difference between the two digits.\n        diff := n1_digit - n2_digit\n        if diff < 0 {\n            diff = -diff\n        }\n\n        // Add the difference to the slice.\n        diffs = append(diffs, diff)\n    }\n\n    // Sum the differences.\n    var sum int\n    for _, diff := range diffs {\n        sum += diff\n    }\n\n    return sum\n}\n\nfunc TestDigit_Distance_Nums(t *testing.T) {\n  candidate := digit_distance_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1, 2), expected: 1 },\n     { actual: candidate(23, 56), expected: 6 },\n     { actual: candidate(123, 256), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123449,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}