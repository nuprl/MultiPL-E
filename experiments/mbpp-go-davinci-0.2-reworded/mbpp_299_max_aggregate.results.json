{
  "name": "mbpp_299_max_aggregate",
  "language": "go_test.go",
  "prompt": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py",
  "prompt_terminology": "reworded",
  "tests": "func TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max []interface{}\n    for _, row := range stdata {\n        if len(max) == 0 {\n            max = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max[i].(int) {\n                    max[i] = v\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpev8qud17_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpev8qud17_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpev8qud17_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpev8qud17_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpev8qud17_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpev8qud17_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: Implement this function\n    return nil\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg29iha2d_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpg29iha2d_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpg29iha2d_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpg29iha2d_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpg29iha2d_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpg29iha2d_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, cell := range row {\n                if max_agg[i] == nil {\n                    max_agg[i] = cell\n                } else {\n                    switch cell.(type) {\n                    case int:\n                        if cell.(int) > max_agg[i].(int) {\n                            max_agg[i] = cell\n                        }\n                    case float64:\n                        if cell.(float64) > max_agg[i].(float64) {\n                            max_agg[i] = cell\n                        }\n                    case string:\n                        if cell.(string) > max_agg[i].(string) {\n                            max_agg[i] = cell\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph4_u4rzy_test.go:48:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmph4_u4rzy_test.go:48:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmph4_u4rzy_test.go:49:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmph4_u4rzy_test.go:49:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmph4_u4rzy_test.go:50:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmph4_u4rzy_test.go:50:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_agg = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if max_agg[j] < stdata[i][j] {\n                    max_agg[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdn375ge5_test.go:16:31: invalid operation: max_agg[j] < stdata[i][j] (operator < not defined on interface)\n/tmp/tmpdn375ge5_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdn375ge5_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdn375ge5_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    if len(stdata) == 0 {\n        return nil\n    }\n    if len(stdata) == 1 {\n        return stdata[0]\n    }\n    if len(stdata[0]) == 0 {\n        return nil\n    }\n    if len(stdata[0]) == 1 {\n        return stdata[0]\n    }\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max interface{}\n        for j := 0; j < len(stdata); j++ {\n            if max == nil {\n                max = stdata[j][i]\n            } else {\n                if stdata[j][i].(int) > max.(int) {\n                    max = stdata[j][i]\n                }\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmc1603nb_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmc1603nb_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmc1603nb_test.go:47:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmc1603nb_test.go:47:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmc1603nb_test.go:48:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmc1603nb_test.go:48:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n            continue\n        }\n        for i, v := range row {\n            switch v.(type) {\n            case int:\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            case float64:\n                if v.(float64) > max_aggregate[i].(float64) {\n                    max_aggregate[i] = v\n                }\n            case string:\n                if v.(string) > max_aggregate[i].(string) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7_o8trlq_test.go:43:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp7_o8trlq_test.go:43:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp7_o8trlq_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp7_o8trlq_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp7_o8trlq_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp7_o8trlq_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        max := stdata[0][i]\n        for j := 1; j < len(stdata); j++ {\n            if stdata[j][i].(int) > max.(int) {\n                max = stdata[j][i]\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiu6xncqt_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpiu6xncqt_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpiu6xncqt_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpiu6xncqt_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpiu6xncqt_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpiu6xncqt_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for _, row := range stdata {\n        for _, col := range row {\n            result = append(result, col)\n        }\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu4xbp_ts_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpu4xbp_ts_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpu4xbp_ts_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpu4xbp_ts_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpu4xbp_ts_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpu4xbp_ts_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp28becqyi_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk7edvt8c_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, val := range row {\n                if val.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = val\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcn7v5gyl_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcn7v5gyl_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcn7v5gyl_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, data := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = data\n        } else {\n            for i, v := range data {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6aeqgw2g_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6aeqgw2g_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6aeqgw2g_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6aeqgw2g_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6aeqgw2g_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6aeqgw2g_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcawd51i6_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcawd51i6_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcawd51i6_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcawd51i6_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcawd51i6_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcawd51i6_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, val := range row {\n                if val.(int) > max_agg[i].(int) {\n                    max_agg[i] = val\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzjp_k6r2_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzjp_k6r2_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzjp_k6r2_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzjp_k6r2_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzjp_k6r2_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzjp_k6r2_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, sublist := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = sublist\n        } else {\n            for i, val := range sublist {\n                if val.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = val\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpexpamx_l_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpexpamx_l_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpexpamx_l_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpexpamx_l_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpexpamx_l_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpexpamx_l_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp28becqyi_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: Implement this function\n    return []interface{}{}\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmu7r6sue_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmu7r6sue_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmu7r6sue_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmu7r6sue_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmu7r6sue_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmu7r6sue_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp28becqyi_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    if len(stdata) == 0 {\n        return nil\n    }\n    if len(stdata) == 1 {\n        return stdata[0]\n    }\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max interface{}\n        for _, v := range stdata {\n            if max == nil {\n                max = v[i]\n            } else {\n                switch v[i].(type) {\n                case int:\n                    if v[i].(int) > max.(int) {\n                        max = v[i]\n                    }\n                case float64:\n                    if v[i].(float64) > max.(float64) {\n                        max = v[i]\n                    }\n                case string:\n                    if v[i].(string) > max.(string) {\n                        max = v[i]\n                    }\n                }\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsuq73s_o_test.go:51:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsuq73s_o_test.go:51:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsuq73s_o_test.go:52:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsuq73s_o_test.go:52:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpsuq73s_o_test.go:53:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpsuq73s_o_test.go:53:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk7edvt8c_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_agg[i].(int) {\n                        max_agg[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_agg[i].(float64) {\n                        max_agg[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp63en86x8_test.go:40:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp63en86x8_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp63en86x8_test.go:41:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp63en86x8_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp63en86x8_test.go:42:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp63en86x8_test.go:42:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = v\n                    }\n                case string:\n                    if v.(string) > max_aggregate[i].(string) {\n                        max_aggregate[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_u5cyk0n_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_u5cyk0n_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_u5cyk0n_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    if len(stdata) == 0 {\n        return []interface{}{}\n    }\n    if len(stdata) == 1 {\n        return stdata[0]\n    }\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for _, v := range stdata {\n            if v[i].(float64) > max {\n                max = v[i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpul0g7yaj_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpul0g7yaj_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpul0g7yaj_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpul0g7yaj_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpul0g7yaj_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpul0g7yaj_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    max_agg := make([]interface{}, len(stdata[0]))\n    for i := 0; i < len(stdata[0]); i++ {\n        max_agg[i] = stdata[0][i]\n    }\n    for _, row := range stdata {\n        for i, val := range row {\n            if val.(int) > max_agg[i].(int) {\n                max_agg[i] = val\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphnbb4ip9_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphnbb4ip9_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphnbb4ip9_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphnbb4ip9_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphnbb4ip9_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphnbb4ip9_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: implement this function\n    return nil\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpccfcsbnn_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpccfcsbnn_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpccfcsbnn_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpccfcsbnn_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpccfcsbnn_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpccfcsbnn_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_agg[i].(int) {\n                        max_agg[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_agg[i].(float64) {\n                        max_agg[i] = v\n                    }\n                case string:\n                    if v.(string) > max_agg[i].(string) {\n                        max_agg[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzlaffnc2_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzlaffnc2_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzlaffnc2_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    var max_aggregate_value float64\n    for _, row := range stdata {\n        var aggregate_value float64\n        for _, value := range row {\n            switch value.(type) {\n            case int:\n                aggregate_value += float64(value.(int))\n            case float64:\n                aggregate_value += value.(float64)\n            default:\n                fmt.Println(\"Unsupported type\")\n            }\n        }\n        if aggregate_value > max_aggregate_value {\n            max_aggregate_value = aggregate_value\n            max_aggregate = row\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqdgfn_r1_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqdgfn_r1_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqdgfn_r1_test.go:40:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqdgfn_r1_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqdgfn_r1_test.go:41:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqdgfn_r1_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_val float64\n    for _, row := range stdata {\n        agg_val := 0.0\n        for _, val := range row {\n            agg_val += val.(float64)\n        }\n        if agg_val > max_agg_val {\n            max_agg_val = agg_val\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpncqpyzok_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpncqpyzok_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpncqpyzok_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpncqpyzok_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpncqpyzok_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpncqpyzok_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, val := range row {\n                switch val.(type) {\n                case int:\n                    if val.(int) > max_agg[i].(int) {\n                        max_agg[i] = val\n                    }\n                case float64:\n                    if val.(float64) > max_agg[i].(float64) {\n                        max_agg[i] = val\n                    }\n                case string:\n                    if val.(string) > max_agg[i].(string) {\n                        max_agg[i] = val\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdzp9v73m_test.go:43:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdzp9v73m_test.go:43:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdzp9v73m_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdzp9v73m_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdzp9v73m_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdzp9v73m_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcawd51i6_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcawd51i6_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcawd51i6_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcawd51i6_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcawd51i6_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcawd51i6_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: Implement me!\n    return []interface{}{}\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdgfe6oic_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdgfe6oic_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdgfe6oic_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdgfe6oic_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdgfe6oic_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdgfe6oic_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: Implement me\n    return []interface{}{}\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk5vsea8__test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk5vsea8__test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk5vsea8__test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk5vsea8__test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk5vsea8__test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk5vsea8__test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_agg = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if max_agg[j] < stdata[i][j] {\n                    max_agg[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdn375ge5_test.go:16:31: invalid operation: max_agg[j] < stdata[i][j] (operator < not defined on interface)\n/tmp/tmpdn375ge5_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdn375ge5_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdn375ge5_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    var max_aggregate_value float64\n    for _, row := range stdata {\n        var aggregate float64\n        for _, value := range row {\n            switch value.(type) {\n            case int:\n                aggregate += float64(value.(int))\n            case float64:\n                aggregate += value.(float64)\n            }\n        }\n        if aggregate > max_aggregate_value {\n            max_aggregate_value = aggregate\n            max_aggregate = row\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpysfbnot9_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpysfbnot9_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpysfbnot9_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpysfbnot9_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpysfbnot9_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpysfbnot9_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 || max_agg[0].(int) < row[0].(int) {\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9woh7vo6_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9woh7vo6_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9woh7vo6_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9woh7vo6_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9woh7vo6_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9woh7vo6_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcawd51i6_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcawd51i6_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcawd51i6_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcawd51i6_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcawd51i6_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcawd51i6_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp28becqyi_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    var max int\n    for i := 0; i < len(stdata); i++ {\n        var sum int\n        for j := 0; j < len(stdata[i]); j++ {\n            sum += stdata[i][j].(int)\n        }\n        if i == 0 {\n            max = sum\n            result = stdata[i]\n        } else {\n            if sum > max {\n                max = sum\n                result = stdata[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpymsblpnm_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpymsblpnm_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpymsblpnm_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpymsblpnm_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpymsblpnm_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpymsblpnm_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, val := range row {\n                if val.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = val\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcn7v5gyl_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcn7v5gyl_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcn7v5gyl_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk7edvt8c_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_agg[i].(int) {\n                        max_agg[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_agg[i].(float64) {\n                        max_agg[i] = v\n                    }\n                case string:\n                    if v.(string) > max_agg[i].(string) {\n                        max_agg[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzlaffnc2_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzlaffnc2_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzlaffnc2_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk7edvt8c_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, v := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = v\n        } else {\n            for i, vv := range v {\n                if vv.(int) > max_agg[i].(int) {\n                    max_agg[i] = vv\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj8iausq1_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpj8iausq1_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpj8iausq1_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpj8iausq1_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpj8iausq1_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpj8iausq1_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = v\n                    }\n                case string:\n                    if v.(string) > max_aggregate[i].(string) {\n                        max_aggregate[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_u5cyk0n_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_u5cyk0n_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_u5cyk0n_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    max_aggregate := make([]interface{}, len(stdata[0]))\n    for i := 0; i < len(stdata[0]); i++ {\n        max_aggregate[i] = stdata[0][i]\n    }\n    for i := 1; i < len(stdata); i++ {\n        for j := 0; j < len(stdata[i]); j++ {\n            if stdata[i][j].(int) > max_aggregate[j].(int) {\n                max_aggregate[j] = stdata[i][j]\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkg43mgyf_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkg43mgyf_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkg43mgyf_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkg43mgyf_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkg43mgyf_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkg43mgyf_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, _ := range row {\n                if row[i].(int) > max_agg[i].(int) {\n                    max_agg[i] = row[i]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaewykiut_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaewykiut_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaewykiut_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaewykiut_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaewykiut_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaewykiut_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        for _, col := range row {\n            max_aggregate = append(max_aggregate, col)\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwv3v2p85_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwv3v2p85_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwv3v2p85_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwv3v2p85_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwv3v2p85_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwv3v2p85_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpajp61ero_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk7edvt8c_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpajp61ero_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, val := range row {\n                if val.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = val\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcn7v5gyl_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcn7v5gyl_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcn7v5gyl_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp28becqyi_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp28becqyi_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_agg[i].(int) {\n                        max_agg[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_agg[i].(float64) {\n                        max_agg[i] = v\n                    }\n                case string:\n                    if v.(string) > max_agg[i].(string) {\n                        max_agg[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzlaffnc2_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzlaffnc2_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzlaffnc2_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_sum float64\n    for _, row := range stdata {\n        var row_sum float64\n        for _, val := range row {\n            row_sum += val.(float64)\n        }\n        if row_sum > max_agg_sum {\n            max_agg_sum = row_sum\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu3rpuckq_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpu3rpuckq_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpu3rpuckq_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpu3rpuckq_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpu3rpuckq_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpu3rpuckq_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_agg = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if stdata[i][j].(int) > max_agg[j].(int) {\n                    max_agg[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvvywurdy_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvvywurdy_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvvywurdy_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvvywurdy_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvvywurdy_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvvywurdy_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max interface{}\n        for j := 0; j < len(stdata); j++ {\n            if j == 0 {\n                max = stdata[j][i]\n            } else {\n                if stdata[j][i].(int) > max.(int) {\n                    max = stdata[j][i]\n                }\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4cnm4vsl_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4cnm4vsl_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4cnm4vsl_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4cnm4vsl_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4cnm4vsl_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4cnm4vsl_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    var max_aggregate_value float64\n    var max_aggregate_index int\n    for i, row := range stdata {\n        var aggregate float64\n        for _, value := range row {\n            aggregate += value.(float64)\n        }\n        if i == 0 {\n            max_aggregate = row\n            max_aggregate_value = aggregate\n            max_aggregate_index = i\n        } else if aggregate > max_aggregate_value {\n            max_aggregate = row\n            max_aggregate_value = aggregate\n            max_aggregate_index = i\n        }\n    }\n    fmt.Printf(\"Max aggregate is %v at index %d\\n\", max_aggregate, max_aggregate_index)\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5i34syqe_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp5i34syqe_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp5i34syqe_test.go:40:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp5i34syqe_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp5i34syqe_test.go:41:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp5i34syqe_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max_value interface{}\n        for j := 0; j < len(stdata); j++ {\n            if j == 0 {\n                max_value = stdata[j][i]\n            } else {\n                if max_value.(int) < stdata[j][i].(int) {\n                    max_value = stdata[j][i]\n                }\n            }\n        }\n        result = append(result, max_value)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5zjoroa3_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp5zjoroa3_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp5zjoroa3_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp5zjoroa3_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp5zjoroa3_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp5zjoroa3_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp28becqyi_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_sum float64\n    for _, row := range stdata {\n        var row_sum float64\n        for _, val := range row {\n            switch val.(type) {\n            case int:\n                row_sum += float64(val.(int))\n            case float64:\n                row_sum += val.(float64)\n            }\n        }\n        if row_sum > max_agg_sum {\n            max_agg_sum = row_sum\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp75pqjzvq_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp75pqjzvq_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp75pqjzvq_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp75pqjzvq_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp75pqjzvq_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp75pqjzvq_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk7edvt8c_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_agg = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if max_agg[j] < stdata[i][j] {\n                    max_agg[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdn375ge5_test.go:16:31: invalid operation: max_agg[j] < stdata[i][j] (operator < not defined on interface)\n/tmp/tmpdn375ge5_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdn375ge5_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdn375ge5_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk7edvt8c_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpajp61ero_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    var max_aggregate_value float64\n    for _, row := range stdata {\n        var row_aggregate float64\n        for _, value := range row {\n            switch value.(type) {\n            case int:\n                row_aggregate += float64(value.(int))\n            case float64:\n                row_aggregate += value.(float64)\n            }\n        }\n        if row_aggregate > max_aggregate_value {\n            max_aggregate_value = row_aggregate\n            max_aggregate = row\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpge17wfx2_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpge17wfx2_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpge17wfx2_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpge17wfx2_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpge17wfx2_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpge17wfx2_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max interface{}\n        for j := 0; j < len(stdata); j++ {\n            if j == 0 {\n                max = stdata[j][i]\n            } else {\n                switch stdata[j][i].(type) {\n                case int:\n                    if stdata[j][i].(int) > max.(int) {\n                        max = stdata[j][i]\n                    }\n                case float64:\n                    if stdata[j][i].(float64) > max.(float64) {\n                        max = stdata[j][i]\n                    }\n                case string:\n                    if stdata[j][i].(string) > max.(string) {\n                        max = stdata[j][i]\n                    }\n                }\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm7i09uar_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm7i09uar_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm7i09uar_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm7i09uar_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm7i09uar_test.go:47:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm7i09uar_test.go:47:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_agg[i].(int) {\n                        max_agg[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_agg[i].(float64) {\n                        max_agg[i] = v\n                    }\n                case string:\n                    if v.(string) > max_agg[i].(string) {\n                        max_agg[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzlaffnc2_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzlaffnc2_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzlaffnc2_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    var max_aggregate_value float64\n    var max_aggregate_index int\n    for i, v := range stdata {\n        var aggregate float64\n        for _, v2 := range v {\n            aggregate += v2.(float64)\n        }\n        if i == 0 {\n            max_aggregate_value = aggregate\n            max_aggregate_index = i\n        } else {\n            if aggregate > max_aggregate_value {\n                max_aggregate_value = aggregate\n                max_aggregate_index = i\n            }\n        }\n    }\n    max_aggregate = stdata[max_aggregate_index]\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx4bosidj_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx4bosidj_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx4bosidj_test.go:40:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx4bosidj_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx4bosidj_test.go:41:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx4bosidj_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_agg = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if max_agg[j] < stdata[i][j] {\n                    max_agg[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdn375ge5_test.go:16:31: invalid operation: max_agg[j] < stdata[i][j] (operator < not defined on interface)\n/tmp/tmpdn375ge5_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdn375ge5_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdn375ge5_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: implement\n    return []interface{}{}\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqkfjik1x_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqkfjik1x_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqkfjik1x_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqkfjik1x_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqkfjik1x_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqkfjik1x_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk7edvt8c_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_agg = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if stdata[i][j] > max_agg[j] {\n                    max_agg[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiz_w6zbf_test.go:16:33: invalid operation: stdata[i][j] > max_agg[j] (operator > not defined on interface)\n/tmp/tmpiz_w6zbf_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpiz_w6zbf_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpiz_w6zbf_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpiz_w6zbf_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpiz_w6zbf_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpiz_w6zbf_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk7edvt8c_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    max_aggregate := make([]interface{}, len(stdata[0]))\n    for _, row := range stdata {\n        for i, cell := range row {\n            switch cell.(type) {\n            case int:\n                if cell.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = cell\n                }\n            case float64:\n                if cell.(float64) > max_aggregate[i].(float64) {\n                    max_aggregate[i] = cell\n                }\n            case string:\n                if cell.(string) > max_aggregate[i].(string) {\n                    max_aggregate[i] = cell\n                }\n            case bool:\n                if cell.(bool) {\n                    max_aggregate[i] = cell\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzqksje61_test.go:43:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzqksje61_test.go:43:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzqksje61_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzqksje61_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzqksje61_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzqksje61_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8xlifsax_test.go:40:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8xlifsax_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8xlifsax_test.go:41:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8xlifsax_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8xlifsax_test.go:42:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8xlifsax_test.go:42:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, _ := range row {\n                if row[i].(int) > max_agg[i].(int) {\n                    max_agg[i] = row[i]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaewykiut_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaewykiut_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaewykiut_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaewykiut_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpaewykiut_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpaewykiut_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_value float64\n    for _, row := range stdata {\n        var agg_value float64\n        for _, value := range row {\n            agg_value += value.(float64)\n        }\n        if agg_value > max_agg_value {\n            max_agg_value = agg_value\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp00g1bok2_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp00g1bok2_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp00g1bok2_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp00g1bok2_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp00g1bok2_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp00g1bok2_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_agg[i].(int) {\n                        max_agg[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_agg[i].(float64) {\n                        max_agg[i] = v\n                    }\n                case string:\n                    if v.(string) > max_agg[i].(string) {\n                        max_agg[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzlaffnc2_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzlaffnc2_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzlaffnc2_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    var max_aggregate_value float64\n    var max_aggregate_index int\n\n    for i, v := range stdata {\n        var aggregate float64\n        for _, v2 := range v {\n            aggregate += v2.(float64)\n        }\n        if i == 0 {\n            max_aggregate_value = aggregate\n            max_aggregate_index = i\n        } else {\n            if aggregate > max_aggregate_value {\n                max_aggregate_value = aggregate\n                max_aggregate_index = i\n            }\n        }\n    }\n    max_aggregate = stdata[max_aggregate_index]\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprgihmatb_test.go:40:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprgihmatb_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprgihmatb_test.go:41:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprgihmatb_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprgihmatb_test.go:42:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprgihmatb_test.go:42:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk7edvt8c_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    var max_aggregate_value float64\n    for _, row := range stdata {\n        var aggregate float64\n        for _, value := range row {\n            switch value.(type) {\n            case int:\n                aggregate += float64(value.(int))\n            case float64:\n                aggregate += value.(float64)\n            }\n        }\n        if aggregate > max_aggregate_value {\n            max_aggregate_value = aggregate\n            max_aggregate = row\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpysfbnot9_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpysfbnot9_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpysfbnot9_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpysfbnot9_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpysfbnot9_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpysfbnot9_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpajp61ero_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_aggregate = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if stdata[i][j].(int) > max_aggregate[j].(int) {\n                    max_aggregate[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx0p9i64p_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx0p9i64p_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx0p9i64p_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx0p9i64p_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx0p9i64p_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx0p9i64p_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO\n    return nil\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx7dakeir_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx7dakeir_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx7dakeir_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx7dakeir_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx7dakeir_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx7dakeir_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_agg[i].(int) {\n                        max_agg[i] = v\n                    }\n                case string:\n                    if v.(string) > max_agg[i].(string) {\n                        max_agg[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjtdrxw8b_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjtdrxw8b_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjtdrxw8b_test.go:40:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjtdrxw8b_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpjtdrxw8b_test.go:41:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpjtdrxw8b_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max []interface{}\n    for _, row := range stdata {\n        if len(max) == 0 {\n            max = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max[i].(int) {\n                    max[i] = v\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpev8qud17_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpev8qud17_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpev8qud17_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpev8qud17_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpev8qud17_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpev8qud17_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpppcps88__test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpppcps88__test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpppcps88__test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpppcps88__test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpppcps88__test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpppcps88__test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, cell := range row {\n                switch cell.(type) {\n                case int:\n                    if cell.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = cell\n                    }\n                case float64:\n                    if cell.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = cell\n                    }\n                case string:\n                    if cell.(string) > max_aggregate[i].(string) {\n                        max_aggregate[i] = cell\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp7uca57k_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp7uca57k_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp7uca57k_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp7uca57k_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp7uca57k_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp7uca57k_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    if len(stdata) == 0 {\n        return []interface{}{}\n    }\n\n    max_aggregate := make([]interface{}, len(stdata[0]))\n    for _, row := range stdata {\n        for i, cell := range row {\n            if i == 0 {\n                max_aggregate[i] = cell\n            } else {\n                switch cell.(type) {\n                case int:\n                    if cell.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = cell\n                    }\n                case float64:\n                    if cell.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = cell\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgg7qfx7y_test.go:43:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgg7qfx7y_test.go:43:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgg7qfx7y_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgg7qfx7y_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgg7qfx7y_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgg7qfx7y_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_val float64 = 0\n    for _, row := range stdata {\n        var agg_val float64 = 0\n        for _, val := range row {\n            agg_val += val.(float64)\n        }\n        if agg_val > max_agg_val {\n            max_agg_val = agg_val\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp811dh4er_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp811dh4er_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp811dh4er_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp811dh4er_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp811dh4er_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp811dh4er_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpajp61ero_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_val float64\n    for _, row := range stdata {\n        var agg_val float64\n        for _, col := range row {\n            switch col.(type) {\n            case float64:\n                agg_val += col.(float64)\n            }\n        }\n        if agg_val > max_agg_val {\n            max_agg_val = agg_val\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9cjv2_39_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9cjv2_39_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9cjv2_39_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9cjv2_39_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp9cjv2_39_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp9cjv2_39_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    max_aggregate := make([]interface{}, len(stdata[0]))\n    for i := 0; i < len(stdata[0]); i++ {\n        max_aggregate[i] = stdata[0][i]\n    }\n    for i := 1; i < len(stdata); i++ {\n        for j := 0; j < len(stdata[i]); j++ {\n            if stdata[i][j].(int) > max_aggregate[j].(int) {\n                max_aggregate[j] = stdata[i][j]\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkg43mgyf_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkg43mgyf_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkg43mgyf_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkg43mgyf_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkg43mgyf_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkg43mgyf_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // Implement this function.\n    return nil\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6jj85jc2_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6jj85jc2_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6jj85jc2_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6jj85jc2_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp6jj85jc2_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp6jj85jc2_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpajp61ero_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_len int\n    for _, row := range stdata {\n        if len(row) > max_agg_len {\n            max_agg = row\n            max_agg_len = len(row)\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprjiu0up4_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprjiu0up4_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprjiu0up4_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprjiu0up4_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprjiu0up4_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprjiu0up4_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, val := range row {\n                switch val.(type) {\n                case int:\n                    if val.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = val\n                    }\n                case float64:\n                    if val.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = val\n                    }\n                case string:\n                    if val.(string) > max_aggregate[i].(string) {\n                        max_aggregate[i] = val\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx_1nwbh7_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx_1nwbh7_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx_1nwbh7_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx_1nwbh7_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx_1nwbh7_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx_1nwbh7_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, cell := range row {\n                if cell.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = cell\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcd6axbdj_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcd6axbdj_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcd6axbdj_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcd6axbdj_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcd6axbdj_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcd6axbdj_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_aggregate = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if max_aggregate[j] < stdata[i][j] {\n                    max_aggregate[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprum_zdxg_test.go:16:37: invalid operation: max_aggregate[j] < stdata[i][j] (operator < not defined on interface)\n/tmp/tmprum_zdxg_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprum_zdxg_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprum_zdxg_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprum_zdxg_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprum_zdxg_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprum_zdxg_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: Implement this function.\n    return nil\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw859q6q3_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpw859q6q3_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpw859q6q3_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpw859q6q3_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpw859q6q3_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpw859q6q3_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n            continue\n        }\n        for i, v := range row {\n            switch v.(type) {\n            case int:\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            case float64:\n                if v.(float64) > max_aggregate[i].(float64) {\n                    max_aggregate[i] = v\n                }\n            case string:\n                if v.(string) > max_aggregate[i].(string) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7_o8trlq_test.go:43:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp7_o8trlq_test.go:43:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp7_o8trlq_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp7_o8trlq_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp7_o8trlq_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp7_o8trlq_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpppcps88__test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpppcps88__test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpppcps88__test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpppcps88__test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpppcps88__test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpppcps88__test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: Implement me!\n    return nil\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_267y1xl_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_267y1xl_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_267y1xl_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_267y1xl_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_267y1xl_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_267y1xl_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_val float64\n    for _, row := range stdata {\n        agg_val := 0.0\n        for _, val := range row {\n            agg_val += val.(float64)\n        }\n        if agg_val > max_agg_val {\n            max_agg_val = agg_val\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpncqpyzok_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpncqpyzok_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpncqpyzok_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpncqpyzok_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpncqpyzok_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpncqpyzok_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk7edvt8c_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    var max_aggregate_value float64\n    for _, row := range stdata {\n        var aggregate float64\n        for _, value := range row {\n            switch value.(type) {\n            case int:\n                aggregate += float64(value.(int))\n            case float64:\n                aggregate += value.(float64)\n            }\n        }\n        if aggregate > max_aggregate_value {\n            max_aggregate_value = aggregate\n            max_aggregate = row\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpysfbnot9_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpysfbnot9_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpysfbnot9_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpysfbnot9_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpysfbnot9_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpysfbnot9_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = v\n                    }\n                case string:\n                    if v.(string) > max_aggregate[i].(string) {\n                        max_aggregate[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3llausmr_test.go:43:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3llausmr_test.go:43:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3llausmr_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3llausmr_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3llausmr_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3llausmr_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max_value interface{}\n        for j := 0; j < len(stdata); j++ {\n            if j == 0 {\n                max_value = stdata[j][i]\n            } else {\n                if stdata[j][i].(int) > max_value.(int) {\n                    max_value = stdata[j][i]\n                }\n            }\n        }\n        result = append(result, max_value)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81edd_l3_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp81edd_l3_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp81edd_l3_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp81edd_l3_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp81edd_l3_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp81edd_l3_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, val := range row {\n                if val.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = val\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcn7v5gyl_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcn7v5gyl_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcn7v5gyl_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i := 0; i < len(row); i++ {\n                if row[i].(int) > max_agg[i].(int) {\n                    max_agg[i] = row[i]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj5b3gezx_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpj5b3gezx_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpj5b3gezx_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpj5b3gezx_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpj5b3gezx_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpj5b3gezx_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp28becqyi_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_val float64\n    for _, row := range stdata {\n        var agg_val float64\n        for _, val := range row {\n            agg_val += val.(float64)\n        }\n        if agg_val > max_agg_val {\n            max_agg_val = agg_val\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc4p1b3z__test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpc4p1b3z__test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc4p1b3z__test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpc4p1b3z__test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc4p1b3z__test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpc4p1b3z__test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: implement\n    return nil\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptq_ash7w_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptq_ash7w_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptq_ash7w_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptq_ash7w_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptq_ash7w_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptq_ash7w_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    if len(stdata) == 0 {\n        return nil\n    }\n    if len(stdata) == 1 {\n        return stdata[0]\n    }\n    if len(stdata[0]) == 0 {\n        return nil\n    }\n    if len(stdata[0]) == 1 {\n        return stdata[0]\n    }\n    var max_aggregate []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        max_aggregate = append(max_aggregate, stdata[0][i])\n    }\n    for i := 1; i < len(stdata); i++ {\n        for j := 0; j < len(stdata[i]); j++ {\n            if max_aggregate[j].(int) < stdata[i][j].(int) {\n                max_aggregate[j] = stdata[i][j]\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj0u0k2bq_test.go:43:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpj0u0k2bq_test.go:43:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpj0u0k2bq_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpj0u0k2bq_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpj0u0k2bq_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpj0u0k2bq_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    var max_aggregate_value float64\n    for _, row := range stdata {\n        var aggregate float64\n        for _, value := range row {\n            switch value.(type) {\n            case int:\n                aggregate += float64(value.(int))\n            case float64:\n                aggregate += value.(float64)\n            }\n        }\n        if aggregate > max_aggregate_value {\n            max_aggregate_value = aggregate\n            max_aggregate = row\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpysfbnot9_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpysfbnot9_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpysfbnot9_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpysfbnot9_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpysfbnot9_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpysfbnot9_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    if len(stdata) == 0 {\n        return nil\n    }\n\n    max_aggregate := make([]interface{}, len(stdata[0]))\n    for _, row := range stdata {\n        for i, v := range row {\n            switch v.(type) {\n            case int:\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            case float64:\n                if v.(float64) > max_aggregate[i].(float64) {\n                    max_aggregate[i] = v\n                }\n            case string:\n                if v.(string) > max_aggregate[i].(string) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk79728m8_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk79728m8_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk79728m8_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk79728m8_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk79728m8_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk79728m8_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_agg[i].(int) {\n                        max_agg[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_agg[i].(float64) {\n                        max_agg[i] = v\n                    }\n                case string:\n                    if v.(string) > max_agg[i].(string) {\n                        max_agg[i] = v\n                    }\n                default:\n                    fmt.Println(\"Unknown type\")\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpciru3l10_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpciru3l10_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpciru3l10_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpciru3l10_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpciru3l10_test.go:47:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpciru3l10_test.go:47:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: Implement this function.\n    return nil\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw859q6q3_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpw859q6q3_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpw859q6q3_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpw859q6q3_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpw859q6q3_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpw859q6q3_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_aggregate = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if stdata[i][j].(int) > max_aggregate[j].(int) {\n                    max_aggregate[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx0p9i64p_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx0p9i64p_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx0p9i64p_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx0p9i64p_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx0p9i64p_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx0p9i64p_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_agg = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if max_agg[j] < stdata[i][j] {\n                    max_agg[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdn375ge5_test.go:16:31: invalid operation: max_agg[j] < stdata[i][j] (operator < not defined on interface)\n/tmp/tmpdn375ge5_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdn375ge5_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdn375ge5_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp28becqyi_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_val float64\n    for _, row := range stdata {\n        agg := row[len(row)-1]\n        agg_val := agg.(float64)\n        if agg_val > max_agg_val {\n            max_agg_val = agg_val\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp57nzxfx7_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp57nzxfx7_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp57nzxfx7_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp57nzxfx7_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp57nzxfx7_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp57nzxfx7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, val := range row {\n                if val.(int) > max_agg[i].(int) {\n                    max_agg[i] = val\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzjp_k6r2_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzjp_k6r2_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzjp_k6r2_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzjp_k6r2_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzjp_k6r2_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzjp_k6r2_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n            continue\n        }\n        for i, col := range row {\n            if col.(int) > max_agg[i].(int) {\n                max_agg[i] = col\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8bivw555_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8bivw555_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8bivw555_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8bivw555_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp8bivw555_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp8bivw555_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp28becqyi_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_agg[i].(int) {\n                        max_agg[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_agg[i].(float64) {\n                        max_agg[i] = v\n                    }\n                case string:\n                    if v.(string) > max_agg[i].(string) {\n                        max_agg[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpghnm4wqf_test.go:43:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpghnm4wqf_test.go:43:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpghnm4wqf_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpghnm4wqf_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpghnm4wqf_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpghnm4wqf_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpajp61ero_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    if len(stdata) == 0 {\n        return nil\n    }\n    if len(stdata) == 1 {\n        return stdata[0]\n    }\n    var max_agg []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        max_agg = append(max_agg, stdata[0][i])\n    }\n    for i := 1; i < len(stdata); i++ {\n        for j := 0; j < len(stdata[i]); j++ {\n            if max_agg[j].(int) < stdata[i][j].(int) {\n                max_agg[j] = stdata[i][j]\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpogg99850_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogg99850_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogg99850_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogg99850_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpogg99850_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpogg99850_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_value float64 = 0.0\n    for _, row := range stdata {\n        var agg_value float64 = 0.0\n        for _, cell := range row {\n            switch cell.(type) {\n            case float64:\n                agg_value += cell.(float64)\n            }\n        }\n        if agg_value > max_agg_value {\n            max_agg_value = agg_value\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpomgyl4f0_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpomgyl4f0_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpomgyl4f0_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpomgyl4f0_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpomgyl4f0_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpomgyl4f0_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_val float64\n    for _, row := range stdata {\n        var agg_val float64\n        for _, val := range row {\n            agg_val += val.(float64)\n        }\n        if agg_val > max_agg_val {\n            max_agg_val = agg_val\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc4p1b3z__test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpc4p1b3z__test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc4p1b3z__test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpc4p1b3z__test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpc4p1b3z__test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpc4p1b3z__test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk7edvt8c_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: Implement\n    return nil\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdm2ss9_6_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdm2ss9_6_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdm2ss9_6_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdm2ss9_6_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdm2ss9_6_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdm2ss9_6_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, value := range row {\n                if max_aggregate[i] < value {\n                    max_aggregate[i] = value\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2hqlznov_test.go:16:37: invalid operation: max_aggregate[i] < value (operator < not defined on interface)\n/tmp/tmp2hqlznov_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2hqlznov_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2hqlznov_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2hqlznov_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp2hqlznov_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp2hqlznov_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = v\n                    }\n                case string:\n                    if v.(string) > max_aggregate[i].(string) {\n                        max_aggregate[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_u5cyk0n_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_u5cyk0n_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_u5cyk0n_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, cell := range row {\n                if cell.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = cell\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcd6axbdj_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcd6axbdj_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcd6axbdj_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcd6axbdj_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcd6axbdj_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcd6axbdj_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if len(max_aggregate) == 0 {\n            max_aggregate = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if max_aggregate[j] < stdata[i][j] {\n                    max_aggregate[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19atx74x_test.go:16:37: invalid operation: max_aggregate[j] < stdata[i][j] (operator < not defined on interface)\n/tmp/tmp19atx74x_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19atx74x_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19atx74x_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19atx74x_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp19atx74x_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp19atx74x_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    max_aggregate := make([]interface{}, len(stdata[0]))\n    for _, row := range stdata {\n        for i, v := range row {\n            if v.(int) > max_aggregate[i].(int) {\n                max_aggregate[i] = v\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfb36l1qk_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfb36l1qk_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfb36l1qk_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfb36l1qk_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpfb36l1qk_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpfb36l1qk_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_agg = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if max_agg[j] < stdata[i][j] {\n                    max_agg[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdn375ge5_test.go:16:31: invalid operation: max_agg[j] < stdata[i][j] (operator < not defined on interface)\n/tmp/tmpdn375ge5_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdn375ge5_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdn375ge5_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, val := range row {\n                switch val.(type) {\n                case int:\n                    if val.(int) > max_agg[i].(int) {\n                        max_agg[i] = val\n                    }\n                case float64:\n                    if val.(float64) > max_agg[i].(float64) {\n                        max_agg[i] = val\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpns3zp_te_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpns3zp_te_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpns3zp_te_test.go:40:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpns3zp_te_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpns3zp_te_test.go:41:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpns3zp_te_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, val := range row {\n                if val.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = val\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcn7v5gyl_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcn7v5gyl_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcn7v5gyl_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpajp61ero_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_agg = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if stdata[i][j].(int) > max_agg[j].(int) {\n                    max_agg[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvvywurdy_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvvywurdy_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvvywurdy_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvvywurdy_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvvywurdy_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvvywurdy_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate_list []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max_aggregate_value interface{}\n        for j := 0; j < len(stdata); j++ {\n            if max_aggregate_value == nil {\n                max_aggregate_value = stdata[j][i]\n            } else {\n                switch max_aggregate_value.(type) {\n                case int:\n                    if max_aggregate_value.(int) < stdata[j][i].(int) {\n                        max_aggregate_value = stdata[j][i]\n                    }\n                case float64:\n                    if max_aggregate_value.(float64) < stdata[j][i].(float64) {\n                        max_aggregate_value = stdata[j][i]\n                    }\n                case string:\n                    if max_aggregate_value.(string) < stdata[j][i].(string) {\n                        max_aggregate_value = stdata[j][i]\n                    }\n                }\n            }\n        }\n        max_aggregate_list = append(max_aggregate_list, max_aggregate_value)\n    }\n    return max_aggregate_list\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbow8uh5m_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbow8uh5m_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbow8uh5m_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbow8uh5m_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpbow8uh5m_test.go:47:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpbow8uh5m_test.go:47:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: Implement me!\n    return []interface{}{}\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdgfe6oic_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdgfe6oic_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdgfe6oic_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdgfe6oic_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdgfe6oic_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdgfe6oic_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpppcps88__test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpppcps88__test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpppcps88__test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpppcps88__test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpppcps88__test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpppcps88__test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_val float64\n    for _, row := range stdata {\n        agg_val := 0.0\n        for _, val := range row {\n            agg_val += val.(float64)\n        }\n        if agg_val > max_agg_val {\n            max_agg_val = agg_val\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpncqpyzok_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpncqpyzok_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpncqpyzok_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpncqpyzok_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpncqpyzok_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpncqpyzok_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, val := range row {\n                if val.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = val\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcn7v5gyl_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcn7v5gyl_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcn7v5gyl_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcn7v5gyl_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64 = 0\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpehqc8t77_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpehqc8t77_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpehqc8t77_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpehqc8t77_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpehqc8t77_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpehqc8t77_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    var max_sum int64 = 0\n    for _, data := range stdata {\n        var sum int64 = 0\n        for _, value := range data {\n            sum += value.(int64)\n        }\n        if sum > max_sum {\n            max_sum = sum\n            max_aggregate = data\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzisgdr4t_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzisgdr4t_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzisgdr4t_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzisgdr4t_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzisgdr4t_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzisgdr4t_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpajp61ero_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: implement\n    return nil\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptq_ash7w_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptq_ash7w_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptq_ash7w_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptq_ash7w_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptq_ash7w_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptq_ash7w_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: Implement me\n    return nil\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplhzpqixp_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplhzpqixp_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplhzpqixp_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplhzpqixp_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmplhzpqixp_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmplhzpqixp_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: Write your code here\n    return nil\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpanbn_dg4_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpanbn_dg4_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpanbn_dg4_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpanbn_dg4_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpanbn_dg4_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpanbn_dg4_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_value float64\n    for _, row := range stdata {\n        agg_value := 0.0\n        for _, col := range row {\n            switch col.(type) {\n            case int:\n                agg_value += float64(col.(int))\n            case float64:\n                agg_value += col.(float64)\n            }\n        }\n        if agg_value > max_agg_value {\n            max_agg_value = agg_value\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkax3xygf_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkax3xygf_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkax3xygf_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkax3xygf_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkax3xygf_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkax3xygf_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, cell := range row {\n                if cell.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = cell\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcd6axbdj_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcd6axbdj_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcd6axbdj_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcd6axbdj_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcd6axbdj_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcd6axbdj_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max interface{}\n        for j := 0; j < len(stdata); j++ {\n            if j == 0 {\n                max = stdata[j][i]\n            } else {\n                if stdata[j][i].(int) > max.(int) {\n                    max = stdata[j][i]\n                }\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4cnm4vsl_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4cnm4vsl_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4cnm4vsl_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4cnm4vsl_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4cnm4vsl_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4cnm4vsl_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, val := range row {\n                switch val.(type) {\n                case int:\n                    if val.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = val\n                    }\n                case float64:\n                    if val.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = val\n                    }\n                case string:\n                    if val.(string) > max_aggregate[i].(string) {\n                        max_aggregate[i] = val\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx_1nwbh7_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx_1nwbh7_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx_1nwbh7_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx_1nwbh7_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx_1nwbh7_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx_1nwbh7_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max []interface{}\n    for _, row := range stdata {\n        if len(max) == 0 {\n            max = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max[i].(int) {\n                    max[i] = v\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpev8qud17_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpev8qud17_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpev8qud17_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpev8qud17_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpev8qud17_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpev8qud17_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    if len(stdata) == 0 {\n        return []interface{}{}\n    }\n    if len(stdata) == 1 {\n        return stdata[0]\n    }\n    max := stdata[0]\n    for _, row := range stdata[1:] {\n        for i, v := range row {\n            if v.(int) > max[i].(int) {\n                max[i] = v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp09egfgy5_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp09egfgy5_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp09egfgy5_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp09egfgy5_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp09egfgy5_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp09egfgy5_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp28becqyi_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max interface{}\n        for j := 0; j < len(stdata); j++ {\n            if j == 0 {\n                max = stdata[j][i]\n            } else {\n                if stdata[j][i].(int) > max.(int) {\n                    max = stdata[j][i]\n                }\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4cnm4vsl_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4cnm4vsl_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4cnm4vsl_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4cnm4vsl_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4cnm4vsl_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4cnm4vsl_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_aggregate = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if max_aggregate[j] < stdata[i][j] {\n                    max_aggregate[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprum_zdxg_test.go:16:37: invalid operation: max_aggregate[j] < stdata[i][j] (operator < not defined on interface)\n/tmp/tmprum_zdxg_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprum_zdxg_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprum_zdxg_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprum_zdxg_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprum_zdxg_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprum_zdxg_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk7edvt8c_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    var max_aggregate_value float64\n    for _, data := range stdata {\n        var aggregate_value float64\n        for _, value := range data {\n            aggregate_value += value.(float64)\n        }\n        if aggregate_value > max_aggregate_value {\n            max_aggregate_value = aggregate_value\n            max_aggregate = data\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwjd0pfyf_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwjd0pfyf_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwjd0pfyf_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwjd0pfyf_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwjd0pfyf_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwjd0pfyf_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max interface{}\n        for j := 0; j < len(stdata); j++ {\n            if j == 0 {\n                max = stdata[j][i]\n            } else {\n                switch max.(type) {\n                case int:\n                    if stdata[j][i].(int) > max.(int) {\n                        max = stdata[j][i]\n                    }\n                case float64:\n                    if stdata[j][i].(float64) > max.(float64) {\n                        max = stdata[j][i]\n                    }\n                case string:\n                    if stdata[j][i].(string) > max.(string) {\n                        max = stdata[j][i]\n                    }\n                }\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu4xxlf8w_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpu4xxlf8w_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpu4xxlf8w_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpu4xxlf8w_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpu4xxlf8w_test.go:47:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpu4xxlf8w_test.go:47:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if j == 0 {\n                max = stdata[j][i].(float64)\n            } else {\n                if stdata[j][i].(float64) > max {\n                    max = stdata[j][i].(float64)\n                }\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy5k1rpak_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy5k1rpak_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy5k1rpak_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy5k1rpak_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy5k1rpak_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy5k1rpak_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_agg = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if max_agg[j] < stdata[i][j] {\n                    max_agg[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdn375ge5_test.go:16:31: invalid operation: max_agg[j] < stdata[i][j] (operator < not defined on interface)\n/tmp/tmpdn375ge5_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdn375ge5_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdn375ge5_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdn375ge5_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: Implement this function.\n    return nil\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw859q6q3_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpw859q6q3_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpw859q6q3_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpw859q6q3_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpw859q6q3_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpw859q6q3_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO: implement\n    return nil\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptq_ash7w_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptq_ash7w_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptq_ash7w_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptq_ash7w_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmptq_ash7w_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmptq_ash7w_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, v := range row {\n                if max_agg[i] == nil {\n                    max_agg[i] = v\n                } else if v != nil {\n                    switch v.(type) {\n                    case int:\n                        if v.(int) > max_agg[i].(int) {\n                            max_agg[i] = v\n                        }\n                    case float64:\n                        if v.(float64) > max_agg[i].(float64) {\n                            max_agg[i] = v\n                        }\n                    case string:\n                        if v.(string) > max_agg[i].(string) {\n                            max_agg[i] = v\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpegapou67_test.go:48:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpegapou67_test.go:48:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpegapou67_test.go:49:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpegapou67_test.go:49:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpegapou67_test.go:50:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpegapou67_test.go:50:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpajp61ero_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = v\n                    }\n                case string:\n                    if v.(string) > max_aggregate[i].(string) {\n                        max_aggregate[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_u5cyk0n_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_u5cyk0n_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_u5cyk0n_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = v\n                    }\n                case string:\n                    if v.(string) > max_aggregate[i].(string) {\n                        max_aggregate[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_u5cyk0n_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_u5cyk0n_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_u5cyk0n_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk7edvt8c_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpk7edvt8c_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpk7edvt8c_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcawd51i6_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcawd51i6_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcawd51i6_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcawd51i6_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcawd51i6_test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcawd51i6_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_agg[i].(int) {\n                        max_agg[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_agg[i].(float64) {\n                        max_agg[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp63en86x8_test.go:40:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp63en86x8_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp63en86x8_test.go:41:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp63en86x8_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp63en86x8_test.go:42:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp63en86x8_test.go:42:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, val := range row {\n                if val.(int) > max_agg[i].(int) {\n                    max_agg[i] = val\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzjp_k6r2_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzjp_k6r2_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzjp_k6r2_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzjp_k6r2_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzjp_k6r2_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzjp_k6r2_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 || max_agg[1].(int) < row[1].(int) {\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5r04qlm2_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp5r04qlm2_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp5r04qlm2_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp5r04qlm2_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp5r04qlm2_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp5r04qlm2_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        for _, value := range row {\n            max_aggregate = append(max_aggregate, value)\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3_nntqwr_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3_nntqwr_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3_nntqwr_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3_nntqwr_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3_nntqwr_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3_nntqwr_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, val := range row {\n                if val.(int) > max_agg[i].(int) {\n                    max_agg[i] = val\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzjp_k6r2_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzjp_k6r2_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzjp_k6r2_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzjp_k6r2_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzjp_k6r2_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzjp_k6r2_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_agg[i].(int) {\n                        max_agg[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_agg[i].(float64) {\n                        max_agg[i] = v\n                    }\n                case string:\n                    if v.(string) > max_agg[i].(string) {\n                        max_agg[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzlaffnc2_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzlaffnc2_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzlaffnc2_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_agg = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if j == 0 {\n                    continue\n                } else {\n                    if max_agg[j].(int) < stdata[i][j].(int) {\n                        max_agg[j] = stdata[i][j]\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi2aist8a_test.go:36:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpi2aist8a_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpi2aist8a_test.go:37:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpi2aist8a_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpi2aist8a_test.go:38:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpi2aist8a_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_agg = stdata[i]\n        } else {\n            for j := 0; j < len(stdata[i]); j++ {\n                if stdata[i][j].(int) > max_agg[j].(int) {\n                    max_agg[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvvywurdy_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvvywurdy_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvvywurdy_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvvywurdy_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpvvywurdy_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpvvywurdy_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i := 0; i < len(row); i++ {\n                if max_agg[i].(int) < row[i].(int) {\n                    max_agg[i] = row[i]\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp24gox5n_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp24gox5n_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp24gox5n_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp24gox5n_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpp24gox5n_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpp24gox5n_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    max := make([]interface{}, len(stdata[0]))\n    for i := 0; i < len(stdata); i++ {\n        for j := 0; j < len(stdata[i]); j++ {\n            if stdata[i][j].(int) > max[j].(int) {\n                max[j] = stdata[i][j]\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphinz0z53_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphinz0z53_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphinz0z53_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphinz0z53_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphinz0z53_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphinz0z53_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, value := range row {\n                if value.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = value\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4b8eo0vr_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4b8eo0vr_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4b8eo0vr_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4b8eo0vr_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp4b8eo0vr_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp4b8eo0vr_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_val float64\n    for _, row := range stdata {\n        agg_val := 0.0\n        for _, val := range row {\n            agg_val += val.(float64)\n        }\n        if agg_val > max_agg_val {\n            max_agg_val = agg_val\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpncqpyzok_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpncqpyzok_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpncqpyzok_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpncqpyzok_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpncqpyzok_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpncqpyzok_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_agg[i].(int) {\n                        max_agg[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_agg[i].(float64) {\n                        max_agg[i] = v\n                    }\n                case string:\n                    if v.(string) > max_agg[i].(string) {\n                        max_agg[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzlaffnc2_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzlaffnc2_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzlaffnc2_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzlaffnc2_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    max := 0\n    var max_agg []interface{}\n    for _, data := range stdata {\n        agg := 0\n        for _, v := range data {\n            agg += v.(int)\n        }\n        if agg > max {\n            max = agg\n            max_agg = data\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphc1m1n9c_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphc1m1n9c_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphc1m1n9c_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphc1m1n9c_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphc1m1n9c_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphc1m1n9c_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, val := range row {\n                switch val.(type) {\n                case int:\n                    if val.(int) > max_agg[i].(int) {\n                        max_agg[i] = val.(int)\n                    }\n                case float64:\n                    if val.(float64) > max_agg[i].(float64) {\n                        max_agg[i] = val.(float64)\n                    }\n                case string:\n                    if val.(string) > max_agg[i].(string) {\n                        max_agg[i] = val.(string)\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpauwfqzkn_test.go:43:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpauwfqzkn_test.go:43:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpauwfqzkn_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpauwfqzkn_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpauwfqzkn_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpauwfqzkn_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpajp61ero_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpajp61ero_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpajp61ero_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var result []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max float64\n        for j := 0; j < len(stdata); j++ {\n            if stdata[j][i].(float64) > max {\n                max = stdata[j][i].(float64)\n            }\n        }\n        result = append(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510632,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp28becqyi_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp28becqyi_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp28becqyi_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    // TODO\n    return nil\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx7dakeir_test.go:21:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx7dakeir_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx7dakeir_test.go:22:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx7dakeir_test.go:22:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpx7dakeir_test.go:23:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpx7dakeir_test.go:23:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    result := make([]interface{}, len(stdata[0]))\n    for _, row := range stdata {\n        for i, v := range row {\n            switch v.(type) {\n            case int:\n                if v.(int) > result[i].(int) {\n                    result[i] = v\n                }\n            case float64:\n                if v.(float64) > result[i].(float64) {\n                    result[i] = v\n                }\n            case string:\n                if v.(string) > result[i].(string) {\n                    result[i] = v\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpijzwf44y_test.go:39:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpijzwf44y_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpijzwf44y_test.go:40:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpijzwf44y_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpijzwf44y_test.go:41:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpijzwf44y_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = v\n                    }\n                case string:\n                    if v.(string) > max_aggregate[i].(string) {\n                        max_aggregate[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123537,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_u5cyk0n_test.go:44:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:44:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_u5cyk0n_test.go:45:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:45:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_u5cyk0n_test.go:46:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_u5cyk0n_test.go:46:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123540,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpppcps88__test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpppcps88__test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpppcps88__test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpppcps88__test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpppcps88__test.go:35:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpppcps88__test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    if len(stdata) == 0 {\n        return nil\n    }\n    if len(stdata) == 1 {\n        return stdata[0]\n    }\n    if len(stdata[0]) == 0 {\n        return nil\n    }\n    if len(stdata[0]) == 1 {\n        return stdata[0]\n    }\n    var max_aggregate []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        max_aggregate = append(max_aggregate, stdata[0][i])\n    }\n    for i := 1; i < len(stdata); i++ {\n        for j := 0; j < len(stdata[i]); j++ {\n            switch stdata[i][j].(type) {\n            case int:\n                if stdata[i][j].(int) > max_aggregate[j].(int) {\n                    max_aggregate[j] = stdata[i][j]\n                }\n            case float64:\n                if stdata[i][j].(float64) > max_aggregate[j].(float64) {\n                    max_aggregate[j] = stdata[i][j]\n                }\n            case string:\n                if stdata[i][j].(string) > max_aggregate[j].(string) {\n                    max_aggregate[j] = stdata[i][j]\n                }\n            default:\n                fmt.Println(\"Unknown type\")\n            }\n        }\n    }\n    return max_aggregate\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp08ms9oc3_test.go:56:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp08ms9oc3_test.go:56:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp08ms9oc3_test.go:57:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp08ms9oc3_test.go:57:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp08ms9oc3_test.go:58:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp08ms9oc3_test.go:58:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    max := make([]interface{}, len(stdata[0]))\n    for i := 0; i < len(stdata[0]); i++ {\n        max[i] = stdata[0][i]\n    }\n    for i := 1; i < len(stdata); i++ {\n        for j := 0; j < len(stdata[i]); j++ {\n            if stdata[i][j].(int) > max[j].(int) {\n                max[j] = stdata[i][j]\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwp02jumw_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwp02jumw_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwp02jumw_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwp02jumw_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwp02jumw_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwp02jumw_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of lists.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n    var max_agg []interface{}\n    var max_agg_sum int\n    for _, row := range stdata {\n        var agg_sum int\n        for _, v := range row {\n            agg_sum += v.(int)\n        }\n        if agg_sum > max_agg_sum {\n            max_agg_sum = agg_sum\n            max_agg = row\n        }\n    }\n    return max_agg\n}\n\nfunc TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123544,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpncxl4w86_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpncxl4w86_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpncxl4w86_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpncxl4w86_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpncxl4w86_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpncxl4w86_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}