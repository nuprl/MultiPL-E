{
  "name": "mbpp_256_count_Primes_nums",
  "language": "go_test.go",
  "prompt": "package count_Primes_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a gothon function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunc count_Primes_nums(n int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py",
  "prompt_terminology": "reworded",
  "tests": "func TestCount_Primes_Nums(t *testing.T) {\n  candidate := count_Primes_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 2 },\n     { actual: candidate(10), expected: 4 },\n     { actual: candidate(100), expected: 25 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if n <= 2 {\n        return 0\n    }\n    count := 1\n    for i := 3; i < n; i++ {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 0\n    for i := 2; i < n; i++ {\n        if is_prime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    var count int = 1\n    for i := 3; i < n; i++ {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n\n    primes := make([]bool, n)\n    for i := 2; i < n; i++ {\n        primes[i] = true\n    }\n\n    for i := 2; i <= n/2; i++ {\n        if primes[i] {\n            for j := 2; i*j < n; j++ {\n                primes[i*j] = false\n            }\n        }\n    }\n\n    count := 0\n    for i := 2; i < n; i++ {\n        if primes[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    var count int\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 1\n    for i := 3; i < n; i++ {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 1\n    for i := 3; i < n; i += 2 {\n        if is_prime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n < 2 {\n        return 0\n    }\n    count := 0\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 1\n    for i := 3; i < n; i++ {\n        if is_prime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 1\n    for i := 3; i < n; i += 2 {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    res := 1\n    for i := 3; i < n; i++ {\n        if isPrime(i) {\n            res++\n        }\n    }\n    return res\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    // \u521d\u59cb\u5316\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\uff0c\u5143\u7d20\u5168\u4e3atrue\n    isPrime := make([]bool, n)\n    for i := 2; i < n; i++ {\n        isPrime[i] = true\n    }\n    // \u5c06\u4e0d\u5927\u4e8e\u6839\u53f7n\u7684\u6240\u6709\u7d20\u6570\u7684\u500d\u6570\u5254\u9664\n    for i := 2; i*i < n; i++ {\n        if isPrime[i] {\n            for j := i * i; j < n; j += i {\n                isPrime[j] = false\n            }\n        }\n    }\n    // \u8ba1\u7b97\u4e0d\u5927\u4e8en\u7684\u7d20\u6570\u4e2a\u6570\n    count := 0\n    for i := 2; i < n; i++ {\n        if isPrime[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    // \u5224\u65ad\u662f\u5426\u4e3a\u8d28\u6570\n    isPrime := func(n int) bool {\n        if n <= 1 {\n            return false\n        }\n        for i := 2; i * i <= n; i++ {\n            if n % i == 0 {\n                return false\n            }\n        }\n        return true\n    }\n    count := 0\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n < 2 {\n        return 0\n    }\n    var count int\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    var count int = 1\n    for i := 3; i < n; i++ {\n        if is_prime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 1\n    for i := 3; i < n; i++ {\n        if is_prime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    var count int = 1\n    for i := 3; i < n; i++ {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    // Write your code here.\n    if n <= 2 {\n        return 0\n    }\n    if n == 3 {\n        return 1\n    }\n    if n == 4 {\n        return 2\n    }\n    if n == 5 {\n        return 2\n    }\n    if n == 6 {\n        return 3\n    }\n    if n == 7 {\n        return 3\n    }\n    if n == 8 {\n        return 4\n    }\n    if n == 9 {\n        return 4\n    }\n    if n == 10 {\n        return 4\n    }\n    if n == 11 {\n        return 4\n    }\n    if n == 12 {\n        return 5\n    }\n    if n == 13 {\n        return 5\n    }\n    if n == 14 {\n        return 6\n    }\n    if n == 15 {\n        return 6\n    }\n    if n == 16 {\n        return 6\n    }\n    if n == 17 {\n        return 6\n    }\n    if n == 18 {\n        return 7\n    }\n    if n == 19 {\n        return 7\n    }\n    if n == 20 {\n        return 8\n    }\n    if n == 21 {\n        return 8\n    }\n    if n == 22 {\n        return 8\n    }\n    if n == 23 {\n        return 8\n    }\n    if n == 24 {\n        return 9\n    }\n    if n == 25 {\n        return 9\n    }\n    if n == 26 {\n        return 9\n    }\n    if n == 27 {\n        return 9\n    }\n    if n == 28 {\n        return 10\n    }\n    if n == 29 {\n        return 10\n    }\n    if n == 30 {\n        return 10\n    }\n    if n == 31 {\n        return 10\n    }\n    if n == 32 {\n        return 11\n    }\n    if n == 33 {\n        return 11\n    }\n    if n == 34 {\n        return 11\n    }\n    if n == 35 {\n        return 11\n    }\n    if n == 36 {\n        return 12\n    }\n    if n == 37 {\n        return 12\n    }",
    "    if n <= 2 {\n        return 0\n    }\n    count := 0\n    for i := 2; i < n; i++ {\n        if is_prime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 1\n    for i := 3; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n            }\n            if j == i - 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n"
  ]
}