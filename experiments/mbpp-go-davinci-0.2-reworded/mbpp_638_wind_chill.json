{
  "name": "mbpp_638_wind_chill",
  "language": "go_test.go",
  "prompt": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py",
  "prompt_terminology": "reworded",
  "tests": "func TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return 0\n}\n",
    "    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*float64(v)*0.16 + 0.3965*float64(t)*float64(v)*0.16)\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n",
    "    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n"
  ]
}